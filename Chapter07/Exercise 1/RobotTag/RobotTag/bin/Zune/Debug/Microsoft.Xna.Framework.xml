<?xml version="1.0"?>
<doc>
  <assembly>
    <name />
  </assembly>
  <members>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEmitter.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.DopplerScale">
      <summary>Gets or sets a scalar applied to the level of Doppler effect calculated between this and any AudioListener.</summary>
      <returns>The Doppler scale value.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Forward">
      <summary>Gets or sets the forward orientation vector for this emitter.</summary>
      <returns>The forward orientation vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Position">
      <summary>Gets or sets the position of this emitter.</summary>
      <returns>The position vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Up">
      <summary>Gets or sets the upward orientation vector for this emitter.</summary>
      <returns>The upward orientation vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Velocity">
      <summary>Gets or sets the velocity vector of this emitter.</summary>
      <returns>The velocity vector.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AudioEmitter">
      <summary>Represents a 3D audio emitter. This object, used in combination with an Framework.Audio.AudioListener and the Cue.Apply3D method, can simulate 3D audio effects for a given Framework.Audio.Cue. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioListener.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Forward">
      <summary>Gets or sets the forward orientation vector for this listener.</summary>
      <returns>The forward orientation vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Position">
      <summary>Gets or sets the position of this listener.</summary>
      <returns>The position vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Up">
      <summary>Gets or sets the upward orientation vector for this listener.</summary>
      <returns>The upward orientation vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Velocity">
      <summary>Gets or sets the velocity vector of this listener.</summary>
      <returns>The velocity vector.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AudioListener">
      <summary>
    Represents a 3D audio listener. This object, used in combination with an Framework.Audio.AudioEmitter and the Cue.Apply3D method, can simulate 3D audio effects for a given Framework.Audio.Cue.
   Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InstancePlayLimitException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the InstancePlayLimitException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">Error message that explains the reason for the exception.</param>
      <param name="inner">System.Exception that is the cause of the current exception. If innerException is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InstancePlayLimitException.#ctor(System.String)">
      <summary>Initializes a new instance of the InstancePlayLimitException class with a specified error message.</summary>
      <param name="message">A System.String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InstancePlayLimitException.#ctor">
      <summary>Initializes a new instance of the InstancePlayLimitException class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.InstancePlayLimitException">
      <summary>The exception that is thrown when there is an attempt to play more than 16 SoundEffectInstance sounds concurrently.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoAudioHardwareException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoAudioHardwareException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoAudioHardwareException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.NoAudioHardwareException">
      <summary>The exception that is thrown when no audio hardware is present, or when audio hardware is installed but device drivers for the audio hardware are not present or enabled.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Dispose">
      <summary>Releases the resources used by the SoundEffect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the SoundEffect is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Play3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)">
      <summary>Returns a playing SoundEffectInstance at the specified position with the default volume and pitch.</summary>
      <param name="listener">Listener position.</param>
      <param name="emitter">Position of the emitter.</param>
      <returns>A playing SoundEffectInstance at the specified position with the default volume and pitch.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Play3D(Microsoft.Xna.Framework.Audio.AudioListener[],Microsoft.Xna.Framework.Audio.AudioEmitter,System.Single,System.Single,System.Boolean)">
      <summary>Returns a playing SoundEffectInstance at the specified positions using the specified values for volume, pitch, and looping.</summary>
      <param name="listeners">Positions of each listener.</param>
      <param name="emitter">Position of the emitter.</param>
      <param name="volume">Volume to use when begining playback. Ranging from 0.0f (silence) to 1.0f (full volume).  1.0f is full volume relative to SoundEffect.MasterVolume.</param>
      <param name="pitch">Pitch adjustment, ranging from -1.0f (down one octave) to 1.0f (up one octave).  0.0f is unity (normal) pitch.</param>
      <param name="loop">Whether to loop the sound indefinitely, until stopped by the application.  Specify true to continuously loop the sound's loop region, or false to play the entire sound just once.</param>
      <returns>A playing SoundEffectInstance at the specified positions using the specified values for volume, pitch, and looping.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Play3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter,System.Single,System.Single,System.Boolean)">
      <summary>
    Returns a playing SoundEffectInstance at the specified position using the specified values for volume, pitch, and looping.
  </summary>
      <param name="listener">Listener position.</param>
      <param name="emitter">Position of the emitter.</param>
      <param name="volume">Volume to use when begining playback. Ranging from 0.0f (silence) to 1.0f (full volume).  1.0f is full volume relative to SoundEffect.MasterVolume.</param>
      <param name="pitch">Pitch adjustment, ranging from -1.0f (down one octave) to 1.0f (up one octave).  0.0f is unity (normal) pitch.</param>
      <param name="loop">Whether to loop the sound indefinitely, until stopped by the application.  Specify true to continuously loop the sound's loop region, or false to play the entire sound just once.</param>
      <returns>
        A playing SoundEffectInstance at the specified position using the specified values for volume, pitch, and looping.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Play(System.Single,System.Single,System.Single,System.Boolean)">
      <summary>Creates a new SoundEffectInstance and plays it using the specified volume, pitch, panning, and loop control.</summary>
      <param name="volume">Volume, ranging from 0.0f (silence) to 1.0f (full volume).  1.0f is full volume relative to SoundEffect.MasterVolume.</param>
      <param name="pitch">Pitch adjustment, ranging from -1.0f (down one octave) to 1.0f (up one octave).  0.0f is unity (normal) pitch.</param>
      <param name="pan">Panning, ranging from -1.0f (full left) to 1.0f (full right).  0.0f is centered.</param>
      <param name="loop">Whether to loop the sound indefinitely, until stopped by the application.  Specify true to continuously loop the sound's loop region, or false to play the entire sound just once.</param>
      <returns>A new, playing, SoundEffectInstance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Play(System.Single)">
      <summary>Creates a new SoundEffectInstance and plays it at the specified volume.</summary>
      <param name="volume">Volume, ranging from 0.0f (silence) to 1.0f (full volume).  1.0f is full volume relative to SoundEffect.MasterVolume.</param>
      <returns>A new, playing, SoundEffectInstance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Play">
      <summary>Creates a new SoundEffectInstance and plays it.</summary>
      <returns>A new, playing, SoundEffectInstance.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.DistanceScale">
      <summary>Gets or sets a value that adjusts the effect of distance calculations on the sound (emitter).</summary>
      <returns>A value that adjustments the effect of Distance and Doppler calculations on the sound (emitter).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.DopplerScale">
      <summary>
    Gets or sets a value that adjusts the effect of doppler calculations on the sound (emitter).
  </summary>
      <returns>A value that adjusts the effect of doppler calculations on the sound (emitter).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.Duration">
      <summary>Gets or sets the duration of the SoundEffect.</summary>
      <returns>System.TimeSpan that is the duration of the .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.MasterVolume">
      <summary>Gets or sets the master volume that affects all SoundEffectInstance sounds.</summary>
      <returns>Volume, ranging from 0.0f (silence) to 1.0f (current device volume).  1.0f is full volume relative to the current device volume.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.Name">
      <summary>Gets or sets the asset name of the SoundEffect.</summary>
      <returns>Asset name of the .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.SpeedOfSound">
      <summary>Returns the speed of sound: 343.5 meters per second.</summary>
      <returns>The speed of sound: 343.5 meters per second.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.SoundEffect">
      <summary>Provides a loaded sound resource. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)">
      <summary>Applys 3D positioning to the sound using a single listener.</summary>
      <param name="listener">Position of the listener.</param>
      <param name="emitter">Position of the emitter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[],Microsoft.Xna.Framework.Audio.AudioEmitter)">
      <summary>Applys 3D position to the sound using multiple listeners.</summary>
      <param name="listeners">Positions of each listener.</param>
      <param name="emitter">Position of the emitter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose">
      <summary>Releases the resources used by the Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the SoundEffectInstance is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause">
      <summary>Pauses a SoundEffectInstance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play">
      <summary>Plays or resumes a SoundEffectInstance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume">
      <summary>Resumes playback for a SoundEffectInstance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop(System.Boolean)">
      <summary>Stops playing a SoundEffectInstance, either immediately or as authored.</summary>
      <param name="immediate">Whether to stop playing immediately, or to break out of the loop region and play the release.  Specify true to stop playing immediately, or false to break out of the loop region and play the release phase (the remainder of the sound).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop">
      <summary>Immediately stops playing a SoundEffectInstance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped">
      <summary>Gets a value that indicates whether looping is enabled for the SoundEffectInstance.</summary>
      <returns>true if the SoundEffectInstance was played with looping enabled; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan">
      <summary>Gets or sets the panning for the SoundEffectInstance.</summary>
      <returns>Panning, ranging from -1.0f (full left) to 1.0f (full right).  0.0f is centered.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch">
      <summary>Gets or sets the pitch adjustment for the SoundEffectInstance.</summary>
      <returns>Pitch adjustment, ranging from -1.0f (down one octave) to 1.0f (up one octave).  0.0f is unity (normal) pitch.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.State">
      <summary>Gets the current state (playing, paused, or stopped) of the SoundEffectInstance.</summary>
      <returns>SoundState that represents the current state of the SoundEffectInstance.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume">
      <summary>Gets or sets the volume of the SoundEffectInstance.</summary>
      <returns>Volume, ranging from 0.0f (silence) to 1.0f (full volume).  1.0f is full volume relative to SoundEffect.MasterVolume.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.SoundEffectInstance">
      <summary>Provides a single playing, paused, or stopped instance of a SoundEffect sound.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.SoundState">
      <summary>Current state (playing, paused, or stopped) of a SoundEffectInstance.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Audio.SoundState.Paused" documentation_ignore="1">
      <summary>The SoundEffectInstance is paused.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Audio.SoundState.Playing" documentation_ignore="1">
      <summary>The SoundEffectInstance is playing.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Audio.SoundState.Stopped" documentation_ignore="1">
      <summary>The SoundEffectInstance is stopped.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentLoadException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of ContentLoadException.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentLoadException.#ctor(System.String)">
      <summary>
    Creates a new instance of ContentLoadException.
  </summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentLoadException.#ctor">
      <summary>
    Creates a new instance of ContentLoadException.
  </summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentLoadException">
      <summary>Exception used to report errors from the ContentManager.Load method.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.#ctor(System.IServiceProvider)">
      <summary>
    Initializes a new instance of ContentManager.
   Reference page contains code sample.</summary>
      <param name="serviceProvider">The service provider that the ContentManager should use to locate services.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.#ctor(System.IServiceProvider,System.String)">
      <summary>
    Initializes a new instance of ContentManager.
   Reference page contains code sample.</summary>
      <param name="serviceProvider">The service provider the ContentManager should use to locate services.</param>
      <param name="rootDirectory">The root directory to search for content.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the ContentManager and optionally releases the managed resources.
  </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.Dispose">
      <summary>
    Releases all resources used by the ContentManager class.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.Load``1(System.String)">
      <summary>Loads an asset that has been processed by the Content Pipeline. Reference page contains code sample.</summary>
      <param name="assetName">Asset name, relative to the loader root directory, and not including the .xnb file extension.</param>
      <returns>The loaded asset. Repeated calls to load the same asset will return the same object instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.OpenStream(System.String)">
      <summary>
    Opens a stream for reading the specified asset. Derived classes can replace this to implement pack files or asset compression.
  </summary>
      <param name="assetName">The name of the asset being read.</param>
      <returns>The opened stream.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.ReadAsset``1(System.String,System.Action{System.IDisposable})">
      <summary>Low-level worker method that reads asset data.</summary>
      <param name="assetName">The name of the asset to be loaded from disk.</param>
      <param name="recordDisposableObject">Delegate function for handling the disposition of assets.
        If recordDisposableObject is null, the default lifespan tracking and 
        management is used, so unloading or disposing of the content manager frees everything that has been 
        loaded through it. If recordDisposableObject
        specifies a valid delegate, that delegate is used instead of the default lifespan tracking 
        and is called every time the loader encounters a type that implements System.IDisposable.
        You must use your own code to unload assets loaded in this fashion, since ContentManager's
        ContentManager.Unload method will not be aware of them.</param>
      <returns>Returns the loaded asset.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.Unload">
      <summary>Disposes all data that was loaded by this ContentManager.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentManager.RootDirectory">
      <summary>Gets or sets the root directory associated with this ContentManager.</summary>
      <returns>The root directory associated with this ContentManager.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentManager.ServiceProvider">
      <summary>Gets the service provider associated with the ContentManager.</summary>
      <returns>
        The service provider associated with the ContentManager.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentManager">
      <summary>
    The ContentManager is the run-time component which loads managed
    objects from the binary files produced by the design time content pipeline.
    It also manages the lifespan of the loaded objects, disposing the content
    manager will also dispose any assets which are themselves System.IDisposable.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadColor">
      <summary>Reads a Framework.Graphics.Color value from the currently open stream.</summary>
      <returns>
        The Framework.Graphics.Color value that was read.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadDouble">
      <summary>Reads a double value from the currently open stream.</summary>
      <returns>
        The double value that was read.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadExternalReference``1">
      <summary>Reads a link to an external file.</summary>
      <returns>The asset stored in the external file.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadMatrix">
      <summary>Reads a Framework.Matrix value from the currently open stream.</summary>
      <returns>The Framework.Matrix
     that was read.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadObject``1(``0)">
      <summary>Reads a single managed object from the current stream. Can be called recursively.</summary>
      <param name="existingInstance">An existing object to write into.</param>
      <returns>The object that was read.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadObject``1(Microsoft.Xna.Framework.Content.ContentTypeReader,``0)">
      <summary>Reads a single managed object from the current stream. Can be called recursively.</summary>
      <param name="typeReader">The ContentTypeReader to use to read the object.</param>
      <param name="existingInstance">An existing object to write into.</param>
      <returns>The object that was read.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadObject``1">
      <summary>Reads a single managed object from the current stream. Can be called recursively.</summary>
      <returns>The object that was read.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadObject``1(Microsoft.Xna.Framework.Content.ContentTypeReader)">
      <summary>Reads a single managed object from the current stream. Can be called recursively.</summary>
      <param name="typeReader">The ContentTypeReader to use to read the object.</param>
      <returns>The object that was read.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadQuaternion">
      <summary>
    Reads a Framework.Quaternion value from the current stream.
  </summary>
      <returns>The Framework.Quaternion
     that was read.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadRawObject``1(``0)">
      <summary>
    Reads a single managed object from the current stream as an instance of the specified type.
    If you specify a base class of the actual object type, the method reads data only from the base type.
  </summary>
      <param name="existingInstance">An existing object to write into.</param>
      <returns>The object that was read.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadRawObject``1(Microsoft.Xna.Framework.Content.ContentTypeReader,``0)">
      <summary>
    Reads a single managed object from the current stream as an instance of the specified type.
    If you specify a base class of the actual object type, this method reads data only from the base type.
  </summary>
      <param name="typeReader">The ContentTypeReader to use to read the object.</param>
      <param name="existingInstance">An existing object to write into.</param>
      <returns>The object that was read.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadRawObject``1">
      <summary>
    Reads a single managed object from the current stream as an instance of the specified type.
    If you specify a base class of the actual object type, this method reads data only from the base type.
  </summary>
      <returns>The object that was read.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadRawObject``1(Microsoft.Xna.Framework.Content.ContentTypeReader)">
      <summary>
    Reads a single managed object from the current stream as an instance of the specified type.
    If a base class of the actual object type is specified only data from the base type will be read.
  </summary>
      <param name="typeReader">The ContentTypeReader to use to read the object.</param>
      <returns>The object that was read.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadSharedResource``1(System.Action{``0})">
      <summary>Reads a shared resource ID, and records it for subsequent fix-up.</summary>
      <param name="fixup">The fix-up action to perform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadSingle">
      <summary>Reads a float value from the currently open stream.</summary>
      <returns>
        The float value that was read.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadVector2">
      <summary>
    Reads a Framework.Vector2 value from the current stream.
  </summary>
      <returns>
        The Framework.Vector2 that was read.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadVector3">
      <summary>
    Reads a Framework.Vector3 value from the current stream.
  </summary>
      <returns>
        The Framework.Vector3 that was read.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadVector4">
      <summary>
    Reads a Framework.Vector4 value from the current stream.
  </summary>
      <returns>
        The Framework.Vector4 that was read.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentReader.AssetName">
      <summary>Gets the name of the asset currently being read by this ContentReader.</summary>
      <returns>Name of the asset currently being read by this ContentReader.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentReader.ContentManager">
      <summary>Gets the ContentManager associated with the ContentReader.</summary>
      <returns>
        The ContentManager associated with the ContentReader.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentReader">
      <summary>
    A worker object that implements most of ContentManager.Load. A new
    ContentReader is constructed for each asset loaded.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.#ctor">
      <summary>
    Creates a new instance of ContentSerializerAttribute.
   Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.Clone">
      <summary>Creates a copy of the ContentSerializerAttribute.</summary>
      <returns>The copy.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.AllowNull">
      <summary>Get or set a value indicating whether this member can have a null value (default=true). Reference page contains code sample.</summary>
      <returns>Value indicating whether this member can have a null value.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.CollectionItemName">
      <summary>Gets or sets the XML element name for each item in a collection (default = "Item").
   Reference page contains code sample.</summary>
      <returns>The XML element name for each item in the collection.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.ElementName">
      <summary>Gets or sets the XML element name (default=name of the managed type member). Reference page contains code sample.</summary>
      <returns>The XML element name.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.FlattenContent">
      <summary>
    Gets or sets a value idicating whether to write member contents directly into the current XML context 
    rather than wrapping the member in a new XML element (default=false).
   Reference page contains code sample.</summary>
      <returns>
        Value idicating whether to write member contents directly into the current XML context
        rather than wrapping the member in a new XML element.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.HasCollectionItemName">
      <summary>Indicates whether an explicit CollectionItemName string is being used or the default value. Reference page contains code sample.</summary>
      <returns>true if an explicit CollectionItemName string is being used; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.Optional">
      <summary>
    Indicates whether to write this element if the member is null and skip past it if not found when deserializing XML (default=false).
   Reference page contains code sample.</summary>
      <returns>true if the member should be skipped when null.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.SharedResource">
      <summary>
    Indicates whether this member is referenced from multiple parents and should be serialized as a unique ID reference (default=false).
   Reference page contains code sample.</summary>
      <returns>true if this member is referenced from multiple parents; false otherwise.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerAttribute">
      <summary>A custom System.Attribute that marks a field or property to control how it is serialized or to indicate that protected or private data should be included in serialization.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.#ctor(System.String)">
      <summary>Creates a new instance of ContentSerializerCollectionItemNameAttribute. Reference page contains code sample.</summary>
      <param name="collectionItemName">The name for each item in the collection.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.CollectionItemName">
      <summary>Gets the name that will be used for each item in the collection.</summary>
      <returns>The name used for each item in the collection.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute">
      <summary>
    A custom System.Attribute that marks a collection class to specify the XML element name for each item in the collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute.#ctor">
      <summary>Creates a new instance of ContentSerializerIgnoreAttribute. Reference page contains code sample.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute">
      <summary>
    A custom System.Attribute that marks public fields or properties to prevent them from being serialized.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader.#ctor(System.Type)">
      <summary>Creates a new instance of ContentTypeReader.</summary>
      <param name="targetType">The type handled by this reader component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader.Initialize(Microsoft.Xna.Framework.Content.ContentTypeReaderManager)">
      <summary>Retrieves and caches nested type readers. Called by the framework at creation time.</summary>
      <param name="manager">The content manager.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,System.Object)">
      <summary>Reads a strongly typed object from the current stream.</summary>
      <param name="input">The ContentReader used to read the object.</param>
      <param name="existingInstance">The object receiving the data, or null if a new instance of the object should be created.</param>
      <returns>The object that was read.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentTypeReader.TargetType">
      <summary>Gets the type handled by this reader component.</summary>
      <returns>The type handled by this reader component.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentTypeReader.TypeVersion">
      <summary>Gets a format version number for this type.</summary>
      <returns>The version number for this type.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentTypeReader">
      <summary>Worker for reading a specific managed type from a binary format.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReaderManager.GetTypeReader(System.Type)">
      <summary>Looks up a reader for the specified type.</summary>
      <param name="targetType">The type the reader will handle.</param>
      <returns>
        The created ContentTypeReader.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentTypeReaderManager">
      <summary>A manager that constructs and keeps track of type reader objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader`1.#ctor">
      <summary>Creates a new instance of ContentTypeReader`1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader`1.Read(Microsoft.Xna.Framework.Content.ContentReader,`0)">
      <summary>Reads a strongly typed object from the current stream.</summary>
      <param name="input">The ContentReader used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
      <returns>The type of object to read.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader`1.Read(Microsoft.Xna.Framework.Content.ContentReader,System.Object)">
      <summary>Reads an object from the current stream.</summary>
      <param name="input">The ContentReader used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
      <returns>The object that was read.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentTypeReader`1">
      <summary>Worker for reading a specific managed type from a binary format.  Derive from this class to add new data types to the content pipeline system.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ResourceContentManager.#ctor(System.IServiceProvider,System.Resources.ResourceManager)">
      <summary>Creates a new instance of ResourceContentManager.</summary>
      <param name="serviceProvider">The service provider the ContentManager should use to locate services.</param>
      <param name="resourceManager">The resource manager for the ResourceContentManager to read from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ResourceContentManager.OpenStream(System.String)">
      <summary>Opens a stream for reading the specified resource.  Derived classes can replace this to implement pack files or asset compression.</summary>
      <param name="assetName">The name of the asset being read.</param>
      <returns>The opened stream.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ResourceContentManager">
      <summary>
    Subclass of ContentManager which is specialized to read from .resx resource
    files, rather than directly from individual files on disk.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates an instance of BoundingBox. Reference page contains links to related conceptual articles.</summary>
      <param name="min">The minimum point the BoundingBox includes.</param>
      <param name="max">The maximum point the BoundingBox includes.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingBox.CornerCount">
      <summary>Specifies the total number of corners (8) in the BoundingBox.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingBox.Max">
      <summary>The maximum point the BoundingBox contains.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingBox.Min">
      <summary>
    The minimum point the BoundingBox contains.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Tests whether the BoundingBox contains a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to test for overlap.</param>
      <returns>Enumeration indicating the extent of overlap.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>
    Tests whether the BoundingBox contains a point.
  </summary>
      <param name="point">The point to test for overlap.</param>
      <param name="result">Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Tests whether the BoundingBox contains a BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to test for overlap.</param>
      <returns>Enumeration indicating the extent of overlap.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>
    Tests whether the BoundingBox contains a BoundingSphere.
  </summary>
      <param name="sphere">The BoundingSphere to test for overlap.</param>
      <param name="result">Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Tests whether the BoundingBox contains another BoundingBox.</summary>
      <param name="box">The BoundingBox to test for overlap.</param>
      <returns>Enumeration indicating the extent of overlap.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>Tests whether the BoundingBox contains a point.</summary>
      <param name="point">The point to test for overlap.</param>
      <returns>Enumeration indicating the extent of overlap.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>
    Tests whether the BoundingBox contains a BoundingBox.
  </summary>
      <param name="box">The BoundingBox to test for overlap.</param>
      <param name="result">Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromPoints(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates the smallest BoundingBox that will contain a group of points.</summary>
      <param name="points">A list of points the BoundingBox should contain.</param>
      <returns>The created BoundingBox.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromSphere(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Creates the smallest BoundingBox that will contain the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to contain.</param>
      <returns>The created BoundingBox.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromSphere(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
    Creates the smallest BoundingBox that will contain the specified BoundingSphere.
  </summary>
      <param name="sphere">The BoundingSphere to contain.</param>
      <param name="result">The created BoundingBox.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateMerged(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
    Creates the smallest BoundingBox that contains the two specified BoundingBox instances.
  </summary>
      <param name="original">One of the BoundingBox instances to contain.</param>
      <param name="additional">One of the BoundingBox instances to contain.</param>
      <param name="result">The created BoundingBox.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateMerged(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>Creates the smallest BoundingBox that contains the two specified BoundingBox instances.</summary>
      <param name="original">One of the BoundingBoxs to contain.</param>
      <param name="additional">One of the BoundingBoxs to contain.</param>
      <returns>The created BoundingBox.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.op_Equality(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Determines whether two instances of BoundingBox are equal.
  </summary>
      <param name="a">BoundingBox to compare.</param>
      <param name="b">BoundingBox to compare.</param>
      <returns>true if the two BoundingBoxs are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Equals(System.Object)">
      <summary>
    Determines whether two instances of BoundingBox are equal.
  </summary>
      <param name="obj">The System.Object to compare with the current BoundingBox.</param>
      <returns>true if the specified System.Object is equal to the current BoundingBox; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Equals(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Determines whether two instances of BoundingBox are equal.
  </summary>
      <param name="other">The BoundingBox to compare with the current BoundingBox.</param>
      <returns>true if the specified BoundingBox is equal to the current BoundingBox; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.GetCorners(Microsoft.Xna.Framework.Vector3[])">
      <summary>Gets the array of points that make up the corners of the BoundingBox.</summary>
      <param name="corners">An existing array of at least 8 Vector3 points where the corners of the BoundingBox are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.GetCorners">
      <summary>
    Gets an array of points that make up the corners of the BoundingBox.
  </summary>
      <returns>
        An array of Vector3 points that represent the corners of the BoundingBox.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>
        A hash code for the current BoundingBox.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.op_Inequality(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Determines whether two instances of BoundingBox are not equal.
  </summary>
      <param name="a">The object to the left of the inequality operator.</param>
      <param name="b">The object to the right of the inequality operator.</param>
      <returns>true if left is not equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingBox intersects a BoundingSphere. Reference page contains links to related code samples.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <returns>true if the BoundingBox and BoundingSphere intersect; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current BoundingBox intersects a Plane. Reference page contains links to related code samples.</summary>
      <param name="plane">The Plane to check for intersection with.</param>
      <returns>An enumeration indicating whether the BoundingBox intersects the Plane.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Checks whether the current BoundingBox intersects a BoundingFrustum.
   Reference page contains links to related code samples.</summary>
      <param name="frustum">The BoundingFrustum to check for intersection with.</param>
      <returns>true if the BoundingBox and BoundingFrustum intersect; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
      <summary>
    Checks whether the current BoundingBox intersects a Ray.
   Reference page contains links to related code samples.</summary>
      <param name="ray">The Ray to check for intersection with.</param>
      <param name="result">Distance at which the ray intersects the BoundingBox, or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Checks whether the current BoundingBox intersects another BoundingBox.
   Reference page contains links to related code samples.</summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <returns>true if the BoundingBoxs intersect; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>
    Checks whether the current BoundingBox intersects a Plane.
   Reference page contains links to related code samples.</summary>
      <param name="plane">The Plane to check for intersection with.</param>
      <param name="result">An enumeration indicating whether the BoundingBox intersects the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
      <summary>
    Checks whether the current BoundingBox intersects another BoundingBox.
   Reference page contains links to related code samples.</summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">true if the BoundingBox instances intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
      <summary>
    Checks whether the current BoundingBox intersects a BoundingSphere.
   Reference page contains links to related code samples.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">true if the BoundingBox and BoundingSphere intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>
    Checks whether the current BoundingBox intersects a Ray.
   Reference page contains links to related code samples.</summary>
      <param name="ray">The Ray to check for intersection with.</param>
      <returns>Distance at which the ray intersects the BoundingBox, or null if there is no intersection.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.ToString">
      <summary>
    Returns a System.String that represents the current BoundingBox.
  </summary>
      <returns>System.String representation of the current BoundingBox.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.BoundingBox">
      <summary>Defines an axis-aligned box-shaped 3D volume. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.#ctor(Microsoft.Xna.Framework.Matrix)">
      <summary>Creates a new instance of BoundingFrustum. Reference page contains links to related conceptual articles.</summary>
      <param name="value">Combined matrix that usually takes view × projection matrix.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingFrustum.CornerCount">
      <summary>Specifies the total number of corners (8) in the BoundingFrustum.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingFrustum contains the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check against the  current BoundingFrustum.</param>
      <returns>Enumeration indicating the relationship of the current BoundingFrustum to the specified BoundingSphere.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>
    Checks whether the current BoundingFrustum contains the specified point.
  </summary>
      <param name="point">The point to test for overlap.</param>
      <param name="result">Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Checks whether the current BoundingFrustum contains the specified BoundingFrustum.
  </summary>
      <param name="frustum">The BoundingFrustum to check against the current BoundingFrustum.</param>
      <returns>
        Enumeration indicating the relationship of the current BoundingFrustum to the specified BoundingFrustum.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>
    Checks whether the current BoundingFrustum contains the specified BoundingSphere.
  </summary>
      <param name="sphere">The BoundingSphere to test for overlap.</param>
      <param name="result">Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Checks whether the current BoundingFrustum contains the specified BoundingBox.
  </summary>
      <param name="box">The BoundingBox to check against the  current BoundingFrustum.</param>
      <returns>
        Enumeration indicating the relationship of the current BoundingFrustum to the specified BoundingBox.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>
    Checks whether the current BoundingFrustum contains the specified point.
  </summary>
      <param name="point">The point to check against the  current BoundingFrustum.</param>
      <returns>
        Enumeration indicating the relationship of the current BoundingFrustum to the specified point.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>
    Checks whether the current BoundingFrustum contains the specified BoundingBox.
  </summary>
      <param name="box">The BoundingBox to test for overlap.</param>
      <param name="result">Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.op_Equality(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Determines whether two instances of BoundingFrustum are equal.
  </summary>
      <param name="a">The BoundingFrustum to the left of the equality operator.</param>
      <param name="b">The BoundingFrustum to the right of the equality operator.</param>
      <returns>true if left is equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Equals(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Determines whether the specified BoundingFrustum is equal to the current BoundingFrustum.
  </summary>
      <param name="other">The BoundingFrustum to compare with the current BoundingFrustum.</param>
      <returns>true if the specified BoundingFrustum is equal to the current BoundingFrustum; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Equals(System.Object)">
      <summary>
    Determines whether the specified System.Object is equal to the BoundingFrustum.
  </summary>
      <param name="obj">The System.Object to compare with the current BoundingFrustum.</param>
      <returns>true if the specified System.Object is equal to the current BoundingFrustum; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetCorners(Microsoft.Xna.Framework.Vector3[])">
      <summary>
    Gets an array of points that make up the corners of the BoundingFrustum.
  </summary>
      <param name="corners">An existing array of at least 8 Vector3 points where the corners of the BoundingFrustum are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetCorners">
      <summary>
    Gets an array of points that make up the corners of the BoundingFrustum.
  </summary>
      <returns>
        Array of Vector3 points that make up the corners of the BoundingFrustum.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>A hash code for the current BoundingFrustum.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.op_Inequality(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Determines whether two instances of BoundingFrustum are not equal.</summary>
      <param name="a">The BoundingFrustum to the left of the inequality operator.</param>
      <param name="b">The BoundingFrustum to the right of the inequality operator.</param>
      <returns>true if left is not equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingFrustum intersects the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection.</param>
      <returns>true if the BoundingFrustum intersects the BoundingSphere; false otherwise. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current BoundingFrustum intersects the specified Plane.</summary>
      <param name="plane">The Plane to check for intersection.</param>
      <returns>An enumeration indicating whether BoundingFrustum intersects the specified Plane.
    </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Checks whether the current BoundingFrustum intersects the specified BoundingFrustum.
  </summary>
      <param name="frustum">The BoundingFrustum to check for intersection.</param>
      <returns>true if the current BoundingFrustum intersects the specified BoundingFrustum; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
      <summary>
    Checks whether the current BoundingFrustum intersects a Ray.
  </summary>
      <param name="ray">The Ray to check for intersection with.</param>
      <param name="result">Distance at which the ray intersects the BoundingFrustum or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Checks whether the current BoundingFrustum intersects the specified BoundingBox.
  </summary>
      <param name="box">The BoundingBox to check for intersection.</param>
      <returns>true if the BoundingFrustum intersects the BoundingBox; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>
    Checks whether the current BoundingFrustum intersects a Plane.
  </summary>
      <param name="plane">The Plane to check for intersection with.</param>
      <param name="result">An enumeration indicating whether the BoundingFrustum intersects the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
      <summary>
    Checks whether the current BoundingFrustum intersects a BoundingBox.
  </summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">true if the BoundingFrustum and BoundingBox intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
      <summary>
    Checks whether the current BoundingFrustum intersects a BoundingSphere.
  </summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">true if the BoundingFrustum and BoundingSphere intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>
    Checks whether the current BoundingFrustum intersects the specified Ray.
  </summary>
      <param name="ray">The Ray to check for intersection.</param>
      <returns>Distance at which the ray intersects the BoundingFrustum or null if there is no intersection.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.ToString">
      <summary>Returns a System.String that represents the current BoundingFrustum.</summary>
      <returns>System.String representation of the current BoundingFrustum.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Bottom">
      <summary>Gets the bottom plane of the BoundingFrustum.</summary>
      <returns>Returns the bottom plane of the BoundingFrustum.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Far">
      <summary>Gets the far plane of the BoundingFrustum.</summary>
      <returns>Returns the far plane of the BoundingFrustum.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Left">
      <summary>Gets the left plane of the BoundingFrustum.</summary>
      <returns>Returns the left plane of the BoundingFrustum.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Matrix">
      <summary>Gets or sets the Matrix that describes this bounding frustum.</summary>
      <returns>The Matrix that describes this bounding frustum.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Near">
      <summary>Gets the near plane of the BoundingFrustum.</summary>
      <returns>Returns the near plane of the BoundingFrustum.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Right">
      <summary>Gets the right plane of the BoundingFrustum.</summary>
      <returns>Returns the right plane of the BoundingFrustum.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Top">
      <summary>Gets the top plane of the BoundingFrustum.</summary>
      <returns>Returns the top plane of the BoundingFrustum.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.BoundingFrustum">
      <summary>Defines a frustum and helps determine whether forms intersect with it.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new instance of BoundingSphere.</summary>
      <param name="center">Center point of the sphere.</param>
      <param name="radius">Radius of the sphere.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingSphere.Center">
      <summary>The center point of the sphere.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingSphere.Radius">
      <summary>The radius of the sphere.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>
    Checks whether the current BoundingSphere contains the specified BoundingSphere.
  </summary>
      <param name="sphere">The BoundingSphere to check against the  current BoundingSphere.</param>
      <returns>An enumeration indicating the relationship of the BoundingSpheres.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>
    Checks whether the current BoundingSphere contains the specified point.
  </summary>
      <param name="point">The point to test for overlap.</param>
      <param name="result">Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Checks whether the current BoundingSphere contains the specified BoundingFrustum.
  </summary>
      <param name="frustum">The BoundingFrustum to check against the  current BoundingSphere.</param>
      <returns>
        An enumeration indicating the relationship of the specified BoundingFrustum to the current BoundingSphere.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>
    Checks whether the current BoundingSphere contains the specified BoundingSphere.
  </summary>
      <param name="sphere">The BoundingSphere to test for overlap.</param>
      <param name="result">Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Checks whether the current BoundingSphere contains the specified BoundingBox.
  </summary>
      <param name="box">The BoundingBox to check against the  current BoundingSphere.</param>
      <returns>
        An enumeration indicating the relationship of the specified BoundingBox to the current BoundingSphere.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>
    Checks whether the current BoundingSphere contains the specified point.
  </summary>
      <param name="point">The point to check against the  current BoundingSphere.</param>
      <returns>
        An enumeration indicating the relationship of the specified point to the current BoundingSphere.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>
    Checks whether the current BoundingSphere contains the specified BoundingBox.
  </summary>
      <param name="box">The BoundingBox to test for overlap.</param>
      <param name="result">Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingSphere@)">
      <summary>
    Creates the smallest BoundingSphere that can contain a specified BoundingBox.
  </summary>
      <param name="box">The BoundingBox to create the BoundingSphere from.</param>
      <param name="result">The created BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Creates the smallest BoundingSphere that can contain a specified BoundingBox. </summary>
      <param name="box">The BoundingBox to create the BoundingSphere from.</param>
      <returns>The created BoundingSphere.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromFrustum(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Creates the smallest BoundingSphere that can contain a specified BoundingFrustum.  </summary>
      <param name="frustum">The BoundingFrustum to create the BoundingSphere with.</param>
      <returns>The created BoundingSphere.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromPoints(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates a BoundingSphere that can contain a specified list of points.</summary>
      <param name="points">List of points the BoundingSphere must contain.</param>
      <returns>The created BoundingSphere.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateMerged(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingSphere@)">
      <summary>
    Creates a BoundingSphere that contains the two specified BoundingSphere instances.
  </summary>
      <param name="original">BoundingSphere to be merged.</param>
      <param name="additional">BoundingSphere to be merged.</param>
      <param name="result">The created BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateMerged(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Creates a BoundingSphere that contains the two specified BoundingSphere instances.</summary>
      <param name="original">BoundingSphere to be merged.</param>
      <param name="additional">BoundingSphere to be merged.</param>
      <returns>The created BoundingSphere.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.op_Equality(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>
    Determines whether two instances of BoundingSphere are equal.
  </summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if left is equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Equals(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>
    Determines whether the specified BoundingSphere is equal to the current BoundingSphere.
  </summary>
      <param name="other">The BoundingSphere to compare with the current BoundingSphere.</param>
      <returns>true if the specified BoundingSphere is equal to the current BoundingSphere; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Equals(System.Object)">
      <summary>
    Determines whether the specified System.Object is equal to the BoundingSphere.
  </summary>
      <param name="obj">The System.Object to compare with the current BoundingSphere.</param>
      <returns>true if the specified System.Object is equal to the current BoundingSphere; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>
        A hash code for the current BoundingSphere.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.op_Inequality(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>
    Determines whether two instances of BoundingSphere are not equal.
  </summary>
      <param name="a">The BoundingSphere to the left of the inequality operator.</param>
      <param name="b">The BoundingSphere to the right of the inequality operator.</param>
      <returns>true if left is not equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingSphere intersects with a specified BoundingSphere. </summary>
      <param name="sphere">The BoundingSphere to check for intersection with the current BoundingSphere.</param>
      <returns>true if the BoundingSpheres intersect; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current BoundingSphere intersects with a specified Plane.</summary>
      <param name="plane">The Plane to check for intersection with the current BoundingSphere.</param>
      <returns>An enumeration indicating the relationship between the BoundingSphere and the Plane. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Checks whether the current BoundingSphere intersects with a specified BoundingFrustum.
  </summary>
      <param name="frustum">The BoundingFrustum to check for intersection with the current BoundingSphere.</param>
      <returns>true if the BoundingFrustum and BoundingSphere intersect; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
      <summary>
    Checks whether the current BoundingSphere intersects a Ray.
  </summary>
      <param name="ray">The Ray to check for intersection with.</param>
      <param name="result">Distance at which the ray intersects the BoundingSphere or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Checks whether the current BoundingSphere intersects with a specified BoundingBox.
  </summary>
      <param name="box">The BoundingBox to check for intersection with the current BoundingSphere.</param>
      <returns>true if the BoundingBox and BoundingSphere intersect; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>
    Checks whether the current BoundingSphere intersects a Plane.
  </summary>
      <param name="plane">The Plane to check for intersection with.</param>
      <param name="result">An enumeration indicating whether the BoundingSphere intersects the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
      <summary>
    Checks whether the current BoundingSphere intersects a BoundingBox.
  </summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">true if the BoundingSphere and BoundingBox intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
      <summary>
    Checks whether the current BoundingSphere intersects another BoundingSphere.
  </summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">true if the BoundingSphere instances intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>
    Checks whether the current BoundingSphere intersects with a specified Ray.
  </summary>
      <param name="ray">The Ray to check for intersection with the current BoundingSphere.</param>
      <returns>Distance at which the ray intersects the BoundingSphere or null if there is no intersection.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.ToString">
      <summary>
    Returns a System.String that represents the current BoundingSphere.
  </summary>
      <returns>System.String representation of the current BoundingSphere.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Transform(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.BoundingSphere@)">
      <summary>Translates and scales the BoundingSphere using a given Matrix.</summary>
      <param name="matrix">A transformation matrix that might include translation, rotation, or uniform scaling.  Note that BoundingSphere.Transform will not return correct results if there are non-uniform scaling, shears, or other unusual transforms in this transformation matrix.  This is because there is no way to shear or non-uniformly scale a sphere. Such an operation would cause the sphere to lose its shape as a sphere.</param>
      <param name="result">The transformed BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Transform(Microsoft.Xna.Framework.Matrix)">
      <summary>
		Translates and scales the BoundingSphere using a given Matrix.
	</summary>
      <param name="matrix">A transformation matrix that might include translation, rotation, or uniform scaling.  Note that BoundingSphere.Transform will not return correct results if there are non-uniform scaling, shears, or other unusual transforms in this transformation matrix. This is because there is no way to shear or non-uniformly scale a sphere. Such an operation would cause the sphere to lose its shape as a sphere.</param>
      <returns>
		  The transformed BoundingSphere.
	  </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.BoundingSphere">
      <summary>Defines a sphere.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.#ctor">
      <summary>Initializes a new instance of Curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.Clone">
      <summary>Creates a copy of the Curve.</summary>
      <returns>
        The copy of the Curve.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangents(Microsoft.Xna.Framework.CurveTangent)">
      <summary>
    Computes all tangents for all CurveKeys in this Curve, using a specified tangent type for both CurveKey.TangentIn and CurveKey.TangentOut.
  </summary>
      <param name="tangentType">The type of CurveKey.TangentOut and CurveKey.TangentIn to compute (one of the types specified in the CurveTangent enumeration).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangents(Microsoft.Xna.Framework.CurveTangent,Microsoft.Xna.Framework.CurveTangent)">
      <summary>
    Computes all tangents for all CurveKeys in this Curve,
    using different tangent types for CurveKey.TangentOut and CurveKey.TangentIn.
  </summary>
      <param name="tangentInType">The type of CurveKey.TangentIn to compute (one of the types specified in the CurveTangent enumeration).</param>
      <param name="tangentOutType">The type of CurveKey.TangentOut to compute (one of the types specified in the CurveTangent enumeration).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangent(System.Int32,Microsoft.Xna.Framework.CurveTangent)">
      <summary>Computes both the CurveKey.TangentIn and the CurveKey.TangentOut for a CurveKey specified by its index.</summary>
      <param name="keyIndex">The index of the CurveKey for which to compute tangents (in the Curve.Keys collection of the Curve).</param>
      <param name="tangentType">The type of tangents to compute (one of the types specified in the CurveTangent enumeration).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangent(System.Int32,Microsoft.Xna.Framework.CurveTangent,Microsoft.Xna.Framework.CurveTangent)">
      <summary>
    Computes a specified type of CurveKey.TangentIn and a specified type of CurveKey.TangentOut for a given CurveKey. 
  </summary>
      <param name="keyIndex">The index of the CurveKey for which to compute tangents (in the Curve.Keys collection of the Curve).</param>
      <param name="tangentInType">The type of CurveKey.TangentIn to compute (one of the types specified in the CurveTangent enumeration).</param>
      <param name="tangentOutType">The type of CurveKey.TangentOut to compute (one of the types specified in the CurveTangent enumeration).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.Evaluate(System.Single)">
      <summary>Finds the value at a position on the Curve.</summary>
      <param name="position">The position on the Curve.</param>
      <returns>Value at the position on the Curve.
    </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.IsConstant">
      <summary>Gets a value indicating whether the curve is constant.</summary>
      <returns>true is the curve is constant (has one or fewer points); false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.Keys">
      <summary>The points that make up the curve.</summary>
      <returns>Points that make up the curve.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.PostLoop">
      <summary>Specifies how to handle weighting values that are greater than the last control point in the curve.</summary>
      <returns>Specifies how to handle weighting values.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.PreLoop">
      <summary>Specifies how to handle weighting values that are less than the first control point in the curve.</summary>
      <returns>Specifies how to handle weighting values.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Curve">
      <summary>Stores an arbitrary collection of 2D CurveKey points, and provides methods for evaluating features of the curve they define.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of CurveKey.</summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.CurveContinuity)">
      <summary>Initializes a new instance of CurveKey.</summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
      <param name="tangentIn">Tangent approaching point from the previous point in the curve.</param>
      <param name="tangentOut">Tangent leaving point toward next point in the curve.</param>
      <param name="continuity">Enum indicating whether the curve is discrete or continuous.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of CurveKey.</summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
      <param name="tangentIn">Tangent approaching point from the previous point in the curve.</param>
      <param name="tangentOut">Tangent leaving point toward next point in the curve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Clone">
      <summary>Creates a copy of the CurveKey.</summary>
      <returns>The copy of the CurveKey.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.CompareTo(Microsoft.Xna.Framework.CurveKey)">
      <summary>Compares this instance to another CurveKey and returns an indication of their relative values.</summary>
      <param name="other">CurveKey to compare to.</param>
      <returns>Zero if the positions are the same; -1 if this CurveKey comes before  other and 1 if this CurveKey comes after other.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.op_Equality(Microsoft.Xna.Framework.CurveKey,Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether two CurveKey instances are equal.</summary>
      <param name="a">CurveKey on the left of the equal sign.</param>
      <param name="b">CurveKey on the right of the equal sign.</param>
      <returns>true if the CurveKeys are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Equals(Microsoft.Xna.Framework.CurveKey)">
      <summary>
    Determines whether the specified System.Object is equal to the CurveKey.
  </summary>
      <param name="other">The System.Object to compare with the current CurveKey.</param>
      <returns>true if the specified System.Object is equal to the current CurveKey; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>Value that is true if the current instance is equal to the specified object, or false if it is not.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>Hashcode for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.op_Inequality(Microsoft.Xna.Framework.CurveKey,Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether two CurveKey instances are not equal.</summary>
      <param name="a">CurveKey on the left of the equal sign.</param>
      <param name="b">CurveKey on the right of the equal sign.</param>
      <returns>true /&gt; if the CurveKeys are not equal; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Continuity">
      <summary>Describes whether the segment between this point and the next point in the curve is discrete or continuous.</summary>
      <returns>Describes the continuity between this point and the next.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Position">
      <summary>Position of the CurveKey in the curve.</summary>
      <returns>Position of the CurveKey in the curve.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.TangentIn">
      <summary>Describes the tangent when approaching this point from the previous point in the curve.</summary>
      <returns>The tangent when approaching.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.TangentOut">
      <summary>Describes the tangent when leaving this point to the next point in the curve.</summary>
      <returns>The tangent when leaving.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Value">
      <summary>Describes the value of this point.</summary>
      <returns>The value of the point.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveKey">
      <summary>Represents a point in a multi-point curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.#ctor">
      <summary>Initializes a new instance of CurveKeyCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Add(Microsoft.Xna.Framework.CurveKey)">
      <summary>Adds a CurveKey to the CurveKeyCollection.</summary>
      <param name="item">The CurveKey to add.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Clear">
      <summary>Removes all CurveKeys from the CurveKeyCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Clone">
      <summary>Creates a copy of the CurveKeyCollection.</summary>
      <returns>A new object that is a copy of this instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Contains(Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether the CurveKeyCollection contains a specific CurveKey.</summary>
      <param name="item">true if the CurveKey is found in the CurveKeyCollection; false otherwise.</param>
      <returns>The CurveKey to locate in the CurveKeyCollection.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.CopyTo(Microsoft.Xna.Framework.CurveKey[],System.Int32)">
      <summary>Copies the CurveKeys of the CurveKeyCollection to an array, starting at the array index provided.</summary>
      <param name="array">The destination of the CurveKeys copied from CurveKeyCollection. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in the array to start copying from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the CurveKeyCollection.</summary>
      <returns>An enumerator for the CurveKeyCollection.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the CurveKeyCollection.</summary>
      <returns>An enumerator for the CurveKeyCollection.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.IndexOf(Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines the index of a CurveKey in the CurveKeyCollection.</summary>
      <param name="item">CurveKey to locate in the CurveKeyCollection.</param>
      <returns>The index of the CurveKey if found in the CurveKeyCollection; −1 otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.RemoveAt(System.Int32)">
      <summary>Removes the CurveKey at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Remove(Microsoft.Xna.Framework.CurveKey)">
      <summary>Removes the first occurrence of a specific CurveKey from the CurveKeyCollection.</summary>
      <param name="item">The CurveKey to remove from the CurveKeyCollection.</param>
      <returns>true if CurveKey is successfully removed; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.Count">
      <summary>Gets the number of elements contained in the CurveKeyCollection.</summary>
      <returns>The number of elements in the CurveKeyCollection.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.IsReadOnly">
      <summary>Returns a value indicating whether the CurveKeyCollection is read-only.</summary>
      <returns>true if the CurveKeyCollection is read-only; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The array index of the element.</param>
      <returns>The CurveKey at the specified index.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveKeyCollection">
      <summary>Contains the CurveKeys making up a Curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.DrawableGameComponent.#ctor(Microsoft.Xna.Framework.Game)">
      <summary>Creates a new instance of Microsoft.Xna.Framework.DrawableGameComponent(Microsoft.Xna.Framework.Game).</summary>
      <param name="game">The Game that the game component should be attached to.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.DrawableGameComponent.DrawOrderChanged">
      <summary>Raised when the DrawableGameComponent.DrawOrder property changes.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.DrawableGameComponent.VisibleChanged">
      <summary>Raised when the DrawableGameComponent.Visible property changes.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.DrawableGameComponent.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the DrawableGameComponent and optionally releases the managed resources.
  </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.DrawableGameComponent.Draw(Microsoft.Xna.Framework.GameTime)">
      <summary>Called when the DrawableGameComponent needs to be drawn.  Override this method with component-specific drawing code. Reference page contains links to related conceptual articles.</summary>
      <param name="gameTime">Time passed since the last call to Microsoft.Xna.Framework.DrawableGameComponent.Draw(Microsoft.Xna.Framework.GameTime).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.DrawableGameComponent.Initialize">
      <summary>Initializes the component.  Override this method to load any non-graphics resources and query for any required services.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.DrawableGameComponent.LoadContent">
      <summary>Called when graphics resources need to be loaded. Override this method to load any component-specific graphics resources. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.DrawableGameComponent.LoadGraphicsContent(System.Boolean)">
      <summary>Obsolete. Called when the component needs to load graphics resources.  Override this method to load any component-specific graphics resources.</summary>
      <param name="loadAllContent">true if all graphics resources need to be loaded; false if only manual resources need to be loaded.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.DrawableGameComponent.OnDrawOrderChanged(System.Object,System.EventArgs)">
      <summary>Called when the DrawableGameComponent.DrawOrder property changes. Raises the DrawableGameComponent.DrawOrderChanged event.</summary>
      <param name="sender">The DrawableGameComponent.</param>
      <param name="args">Arguments to the DrawableGameComponent.DrawOrderChanged event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.DrawableGameComponent.OnVisibleChanged(System.Object,System.EventArgs)">
      <summary>Called when the DrawableGameComponent.Visible property changes.  Raises the DrawableGameComponent.VisibleChanged event.</summary>
      <param name="sender">The DrawableGameComponent.</param>
      <param name="args">Arguments to the DrawableGameComponent.VisibleChanged event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.DrawableGameComponent.UnloadContent">
      <summary>Called when graphics resources need to be unloaded. Override this method to unload any component-specific graphics resources. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.DrawableGameComponent.UnloadGraphicsContent(System.Boolean)">
      <summary>Obsolete. Called when graphics resources should be unloaded.  Override this method to handle component-specific graphics resources.</summary>
      <param name="unloadAllContent">true if all graphics resources should be unloaded; false if only manual resources should be unloaded.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.DrawableGameComponent.DrawOrder">
      <summary>Order in which the component should be drawn, relative to other components that are in the same GameComponentCollection.
 Reference page contains code sample.</summary>
      <returns>Order in which the component should be drawn.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.DrawableGameComponent.GraphicsDevice">
      <summary>The Graphics.GraphicsDevice the DrawableGameComponent is associated with.</summary>
      <returns>Graphics.GraphicsDevice the DrawableGameComponent is associated with.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.DrawableGameComponent.Visible">
      <summary>Indicates whether DrawableGameComponent.Draw should be called.</summary>
      <returns>trueDrawableGameComponent.Draw should be called; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.DrawableGameComponent">
      <summary>A game component that is notified when it needs to draw itself.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.FrameworkDispatcher.Update">
      <summary>
    Updates the status of various framework components (such as power state and media) and raises related events. If your game does not use the Framework.Game class, you must call this method (the recommendation is once per frame) yourself.
  </summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.FrameworkDispatcher">
      <summary>Implements the Windows-specific portion of a Microsoft.Xna.Framework.FrameworkDispatcher class. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.#ctor">
      <summary>Initializes a new instance of this class, which provides basic graphics device initialization, game logic, rendering code, and a game loop. Reference page contains code sample.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Game.Activated">
      <summary>Raised when the game gains focus.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Game.Deactivated">
      <summary>Raised when the game loses focus.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Game.Disposed">
      <summary>Raised when the game is being disposed.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Game.Exiting">
      <summary>Raised when the game is exiting.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.BeginDraw">
      <summary>
    Starts the drawing of a frame.  This method is followed by calls to Game.Draw and Game.EndDraw.
  </summary>
      <returns>true if the frame should be drawn; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.BeginRun">
      <summary>
    Called after all components are initialized but before the first update in the game loop.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Dispose(System.Boolean)">
      <summary>
    Releases all resources used by the Game class.
  </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Draw(Microsoft.Xna.Framework.GameTime)">
      <summary>Called when the game determines it is time to draw a frame. Reference page contains code sample.</summary>
      <param name="gameTime">Time passed since the last call to Microsoft.Xna.Framework.Game.Draw(Microsoft.Xna.Framework.GameTime).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.EndDraw">
      <summary>
    Ends the drawing of a frame.  This method is preceeded by calls to Game.Draw and Game.BeginDraw.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.EndRun">
      <summary>Called after the game loop has stopped running before exiting.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Exit">
      <summary>Exits the game.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Finalize">
      <summary>
    Allows a Game to attempt to free resources and perform other cleanup operations before garbage collection reclaims the Game.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Initialize">
      <summary>
    Called after the Game and Graphics.GraphicsDevice are created, but before Game.LoadContent.
 Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.LoadContent">
      <summary>Called when graphics resources need to be loaded.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.LoadGraphicsContent(System.Boolean)">
      <summary>Obsolete. Called when graphics resources need to be loaded.  Override this method to load any game-specific graphics resources. Reference page contains links to related code samples.</summary>
      <param name="loadAllContent">true if all graphics resources need to be loaded; false if only manual resources need to be loaded.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.OnActivated(System.Object,System.EventArgs)">
      <summary>Raises the Game.Activated event.  Override this method to add code to handle when the game gains focus.</summary>
      <param name="sender">The Game.</param>
      <param name="args">Arguments for the Game.Activated event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.OnDeactivated(System.Object,System.EventArgs)">
      <summary>Raises the Game.Deactivated event.  Override this method to add code to handle when the game loses focus.</summary>
      <param name="sender">The Game.</param>
      <param name="args">Arguments for the Game.Deactivated event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.OnExiting(System.Object,System.EventArgs)">
      <summary>Raises an Game.Exiting event.  Override this method to add code to handle when the game is exiting.</summary>
      <param name="sender">The Game.</param>
      <param name="args">Arguments for the Game.Exiting event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.ResetElapsedTime">
      <summary>Resets the elapsed time counter.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Run">
      <summary>
    Call this method to initialize the game, begin running the game loop, and start processing events for the game.
   Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.ShowMissingRequirementMessage(System.Exception)">
      <summary>This is used to display an error message if there is no suitable graphics device or sound card.</summary>
      <param name="exception">The exception to display.</param>
      <returns>true if an error was displayed, otherwise false.
	  </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.SuppressDraw">
      <summary>Prevents calls to Game.Draw until the next Game.Update.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Tick">
      <summary>Updates the game's clock and calls Game.Update and Game.Draw.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.UnloadContent">
      <summary>Called when graphics resources need to be unloaded.  Override this method to unload any game-specific graphics resources.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.UnloadGraphicsContent(System.Boolean)">
      <summary>Obsolete. Called when graphics resources need to be unloaded.  Override this method to unload any game-specific graphics resources.</summary>
      <param name="unloadAllContent">true if all graphics resources need to be unloaded; false if only manual resources need to be unloaded.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>Called when the game has determined that game logic needs to be processed. Reference page contains links to related code samples.</summary>
      <param name="gameTime">Time passed since the last call to Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime).</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.Components">
      <summary>Gets the collection of GameComponents owned by the game. Reference page contains links to related code samples.</summary>
      <returns>The collection of game GameComponents.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.Content">
      <summary>Gets or sets the current Content.ContentManager.</summary>
      <returns>The current Content.ContentManager.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.GraphicsDevice">
      <summary>
	  Gets the current Framework.Graphics.GraphicsDevice.
  </summary>
      <returns>
		  The current Framework.Graphics.GraphicsDevice.
	  </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.InactiveSleepTime">
      <summary>Gets or sets the time to sleep when the game is inactive.</summary>
      <returns>The time to sleep when the game is inactive.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.IsActive">
      <summary>Indicates whether the game is currently the active application. Reference page contains links to related code samples.</summary>
      <returns>true if the game is active; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.IsFixedTimeStep">
      <summary>Gets or sets a value indicating whether to use fixed time steps. Reference page contains links to related code samples.</summary>
      <returns>true if using fixed time steps; false otherwise.  
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.IsMouseVisible">
      <summary>
    Gets or sets a value indicating whether the mouse cursor should be visible.
   Reference page contains links to related code samples.</summary>
      <returns>true if the mouse cursor should be visible; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.Services">
      <summary>Gets the GameServiceContainer holding all the service providers attached to the Game. Reference page contains links to related conceptual articles.</summary>
      <returns>
        The GameServiceContainer holding all the service providers attached to the Game.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.TargetElapsedTime">
      <summary>Gets or sets the target time between calls to Game.Update when Game.IsFixedTimeStep is true. Reference page contains links to related code samples.</summary>
      <returns>The target time period for the game loop.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.Window">
      <summary>Gets the underlying operating system window. Reference page contains links to related conceptual articles.</summary>
      <returns>The underlying operating system window.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Game">
      <summary>Provides basic graphics device initialization, game logic, and rendering code. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.#ctor(Microsoft.Xna.Framework.Game)">
      <summary>Initializes a new instance of this class. Reference page contains links to related code samples.</summary>
      <param name="game">Game that the game component should be attached to.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.GameComponent.Disposed">
      <summary>Raised when the GameComponent is disposed.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GameComponent.EnabledChanged">
      <summary>Raised when the GameComponent.Enabled property changes.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GameComponent.UpdateOrderChanged">
      <summary>Raised when the GameComponent.UpdateOrder property changes.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the GameComponent and optionally releases the managed resources.
  </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.Finalize">
      <summary>
    Allows a GameComponent to attempt to free resources and perform other cleanup operations before garbage collection reclaims the GameComponent.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.Initialize">
      <summary>Called when the GameComponent needs to be initialized. Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.OnEnabledChanged(System.Object,System.EventArgs)">
      <summary>Called when the GameComponent.Enabled property changes.  Raises the GameComponent.EnabledChanged event.</summary>
      <param name="sender">The GameComponent.</param>
      <param name="args">Arguments to the GameComponent.EnabledChanged event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged(System.Object,System.EventArgs)">
      <summary>Called when the GameComponent.UpdateOrder property changes.  Raises the GameComponent.UpdateOrderChanged event.</summary>
      <param name="sender">The GameComponent.</param>
      <param name="args">Arguments to the GameComponent.UpdateOrderChanged event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>Called when the GameComponent needs to be updated.  Override this method with component-specific update code.</summary>
      <param name="gameTime">Time elapsed since the last call to Microsoft.Xna.Framework.GameComponent.Update(Microsoft.Xna.Framework.GameTime)</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameComponent.Enabled">
      <summary>Indicates whether GameComponent.Update should be called when Game.Update is called.</summary>
      <returns>true if GameComponent.Update should be called; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameComponent.Game">
      <summary>
    Gets the Game associated with this GameComponent.
  </summary>
      <returns>
        The Game associated with this GameComponent.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameComponent.UpdateOrder">
      <summary>Indicates the order in which the GameComponent should be updated relative to other GameComponent instances.  Lower values are updated first. </summary>
      <returns>
        The order in which the GameComponent should be updated.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GameComponent">
      <summary>Base class for all XNA Framework game components. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponentCollection.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GameComponentCollection.ComponentAdded">
      <summary>Raised when a component is added to the GameComponentCollection.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GameComponentCollection.ComponentRemoved">
      <summary>
    Raised when a component is removed from the GameComponentCollection.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponentCollection.ClearItems">
      <summary>Removes all children from the collection. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponentCollection.InsertItem(System.Int32,Microsoft.Xna.Framework.IGameComponent)">
      <summary>Inserts a child object into the collection at the specified location. </summary>
      <param name="index">The position in the collection.</param>
      <param name="item">The child object being inserted.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponentCollection.RemoveItem(System.Int32)">
      <summary>Removes a child object in the collection. </summary>
      <param name="index">The index of the item being removed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponentCollection.SetItem(System.Int32,Microsoft.Xna.Framework.IGameComponent)">
      <summary>Modifies the specified child object in the collection. </summary>
      <param name="index">The position in the collection.</param>
      <param name="item">The child object being modified.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GameComponentCollection">
      <summary>A collection of game components.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponentCollectionEventArgs.#ctor(Microsoft.Xna.Framework.IGameComponent)">
      <summary>Creates a new instance of Microsoft.Xna.Framework.GameComponentCollectionEventArgs(Microsoft.Xna.Framework.IGameComponent).</summary>
      <param name="gameComponent">The game component affected by the event.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameComponentCollectionEventArgs.GameComponent">
      <summary>The game component affected by the event.</summary>
      <returns>The game component affected by the event.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GameComponentCollectionEventArgs">
      <summary>Arguments used with events from the GameComponentCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameServiceContainer.#ctor">
      <summary>Initializes a new instance of this class, which represents a collection of game services.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameServiceContainer.AddService(System.Type,System.Object)">
      <summary>Adds a service to the GameServiceContainer. Reference page contains links to related conceptual articles.</summary>
      <param name="type">The type of service to add.</param>
      <param name="provider">The service provider to add.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameServiceContainer.GetService(System.Type)">
      <summary>Gets the object providing a specified service. Reference page contains links to related conceptual articles.</summary>
      <param name="type">The type of service.</param>
      <returns>The object providing the service.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameServiceContainer.RemoveService(System.Type)">
      <summary>Removes the object providing a specified service.</summary>
      <param name="type">The type of service.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GameServiceContainer">
      <summary>A collection of game services.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameTime.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
      <summary>Creates a new instance of Microsoft.Xna.Framework.GameTime(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan).</summary>
      <param name="totalRealTime">The amount of real time (wall clock) since the start of the game.</param>
      <param name="elapsedRealTime">The amount of elapsed real time (wall clock) since the last frame.</param>
      <param name="totalGameTime">The amount of game time since the start of the game.</param>
      <param name="elapsedGameTime">The amount of elapsed game time since the last update.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameTime.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
      <summary>
    Creates a new instance of Microsoft.Xna.Framework.GameTime(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean).
  </summary>
      <param name="totalRealTime">The amount of real time (wall clock) since the start of the game.</param>
      <param name="elapsedRealTime">The amount of elapsed real time (wall clock) since the last frame.</param>
      <param name="totalGameTime">The amount of game time since the start of the game.</param>
      <param name="elapsedGameTime">The amount of elapsed game time since the last update.</param>
      <param name="isRunningSlowly">Whether the game is running multiple updates this frame.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameTime.#ctor">
      <summary>Creates a new instance of Microsoft.Xna.Framework.GameTime.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameTime.ElapsedGameTime">
      <summary>The amount of elapsed game time since the last update. Reference page contains links to related code samples.</summary>
      <returns>Elapsed game time since the last update.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameTime.ElapsedRealTime">
      <summary>The amount of elapsed real time (wall clock) since the last frame. Reference page contains links to related code samples.</summary>
      <returns>Elapsed real time since the last frame.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameTime.IsRunningSlowly">
      <summary>
    Gets a value indicating that the game loop is taking longer than its Game.TargetElapsedTime.
    In this case, the game loop can be considered to be running too slowly and should do something to "catch up."
  </summary>
      <returns>true if the game loop is taking too long; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameTime.TotalGameTime">
      <summary>The amount of game time since the start of the game. Reference page contains links to related code samples.</summary>
      <returns>Game time since the start of the game.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameTime.TotalRealTime">
      <summary>The amount of real time (wall clock) since the start of the game. Reference page contains links to related code samples.</summary>
      <returns>Real time since the start of the game.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GameTime">
      <summary>
    Snapshot of the game timing state expressed in values that can be used by variable-step (real time) or fixed-step (game time) games.
   Reference page contains links to related code samples.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GameWindow.ClientSizeChanged">
      <summary>Raised when the size of the GameWindow changes.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GameWindow.ScreenDeviceNameChanged">
      <summary>Raised when the GameWindow moves to a different display.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.BeginScreenDeviceChange(System.Boolean)">
      <summary>Starts a device transition (windowed to full screen or vice versa).</summary>
      <param name="willBeFullScreen">Specifies whether the device will be in full-screen mode upon completion of the change.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.EndScreenDeviceChange(System.String)">
      <summary>Completes a device transition.</summary>
      <param name="screenDeviceName">The desktop screen to move the window to.  
        This should be the screen device name of the graphics device that has transitioned to full screen.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.EndScreenDeviceChange(System.String,System.Int32,System.Int32)">
      <summary>Completes a device transition.</summary>
      <param name="screenDeviceName">The desktop screen to move the window to.
        This should be the screen device name of the graphics device that has transitioned to full screen.</param>
      <param name="clientWidth">The new width of the game's client window.</param>
      <param name="clientHeight">The new height of the game's client window.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.OnActivated">
      <summary>Called when the GameWindow gets focus.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.OnClientSizeChanged">
      <summary>Called when the size of the client window changes.  Raises the GameWindow.ClientSizeChanged event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.OnDeactivated">
      <summary>Called when the GameWindow loses focus.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.OnPaint">
      <summary>Called when the GameWindow needs to be painted.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.OnScreenDeviceNameChanged">
      <summary>Called when the GameWindow is moved to a different screen.  Raises the GameWindow.ScreenDeviceNameChanged event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.SetTitle(System.String)">
      <summary>Sets the title of the GameWindow.</summary>
      <param name="title">The new title of the GameWindow.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameWindow.AllowUserResizing">
      <summary>Specifies whether to allow the user to resize the game window.</summary>
      <returns>true if user resizing is allowed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameWindow.ClientBounds">
      <summary>The screen dimensions of the game window's client rectangle. Reference page contains links to related conceptual articles.</summary>
      <returns>Screen dimensions of the game window's client rectangle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameWindow.Handle">
      <summary>Gets the handle to the system window.</summary>
      <returns>The handle to the system window.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameWindow.ScreenDeviceName">
      <summary>Gets the device name of the screen the window is currently in.</summary>
      <returns>The device name of the screen.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameWindow.Title">
      <summary>Gets and sets the title of the system window.</summary>
      <returns>The title of the system window.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GameWindow">
      <summary>The system window associated with a Game.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceInformation.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceInformation.Clone">
      <summary>Creates a clone of this object.</summary>
      <returns>The cloned object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceInformation.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The System.Object to compare with the current GraphicsDeviceInformation.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceInformation.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GraphicsDeviceInformation.Adapter">
      <summary>Specifies which graphics adapter to create the device on.</summary>
      <returns>The graphics adapter to create the device on.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GraphicsDeviceInformation.DeviceType">
      <summary>Specifies the type of device to create (hardware, reference, null).</summary>
      <returns>The type of device to create.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GraphicsDeviceInformation.PresentationParameters">
      <summary>
    Specifies the presentation parameters to use when creating a graphics device.
  </summary>
      <returns>The presentation parameters to use when creating a graphics device.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GraphicsDeviceInformation">
      <summary>Holds the settings for creating a graphics device on Windows.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.#ctor(Microsoft.Xna.Framework.Game)">
      <summary>Creates a new GraphicsDeviceManager and registers it to handle the configuration and management of the graphics device for the specified Game.</summary>
      <param name="game">Game the GraphicsDeviceManager should be associated with.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceCreated">
      <summary>Raised when a new graphics device is created.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceDisposing">
      <summary>Raised when the GraphicsDeviceManager is being disposed.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceResetting">
      <summary>Raised when the GraphicsDeviceManager is about to be reset.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GraphicsDeviceManager.DeviceReset">
      <summary>Raised when the GraphicsDeviceManager is reset.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GraphicsDeviceManager.Disposed">
      <summary>Raised when the GraphicsDeviceManager is disposed.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GraphicsDeviceManager.PreparingDeviceSettings">
      <summary>
    Raised when the GraphicsDeviceManager is changing the Graphics.GraphicsDevice settings (during reset or recreation of the Graphics.GraphicsDevice).
   Reference page contains code sample.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GraphicsDeviceManager.DefaultBackBufferHeight">
      <summary>Specifies the default minimum back-buffer height.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GraphicsDeviceManager.DefaultBackBufferWidth">
      <summary>Specifies the default minimum back-buffer width.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GraphicsDeviceManager.ValidAdapterFormats">
      <summary>Specifies the set of adapter formats supported by the GraphicsDeviceManager.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GraphicsDeviceManager.ValidBackBufferFormats">
      <summary>Specifies the set of back-buffer formats supported by the GraphicsDeviceManager.
  </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GraphicsDeviceManager.ValidDeviceTypes">
      <summary>Specifies the set of valid device types supported by the GraphicsDeviceManager.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.ApplyChanges">
      <summary>Applies any changes to device-related properties, changing the graphics device as necessary.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.Microsoft.Xna.Framework.IGraphicsDeviceManager.BeginDraw">
      <summary>
    Prepares the Graphics.GraphicsDevice to draw.
  </summary>
      <returns>true if the Graphics.GraphicsDevice is ready to draw; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.CanResetDevice(Microsoft.Xna.Framework.GraphicsDeviceInformation)">
      <summary>
    Determines whether the given GraphicsDeviceInformation is compatible with the existing graphics device.
  </summary>
      <param name="newDeviceInfo">Information describing the desired device configuration.</param>
      <returns>true if a device reset can be used to get a device compatible with the GraphicsDeviceInformation; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice">
      <summary>Called to ensure that the device manager has created a valid device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the GraphicsDeviceManager and optionally releases the managed resources.
  </summary>
      <param name="disposing">true to release both automatic and manual resources; false to release only manual resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.System.IDisposable.Dispose">
      <summary>
    Releases all resources used by the GraphicsDeviceManager class.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.Microsoft.Xna.Framework.IGraphicsDeviceManager.EndDraw">
      <summary>
    Called by the game at the end of drawing and presents the final rendering.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.FindBestDevice(System.Boolean)">
      <summary>Finds the best device configuration that is compatible with the current device preferences.</summary>
      <param name="anySuitableDevice">true if the GraphicsDeviceManager.FindBestDevice can select devices from any available adapter; false if only the current adapter should be considered.</param>
      <returns>The best device configuration found.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceCreated(System.Object,System.EventArgs)">
      <summary>Called when a device is created. Raises the GraphicsDeviceManager.DeviceCreated event.</summary>
      <param name="sender">The GraphicsDeviceManager.</param>
      <param name="args">Arguments for the GraphicsDeviceManager.DeviceCreated event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceDisposing(System.Object,System.EventArgs)">
      <summary>Called when a device is being disposed. Raises the GraphicsDeviceManager.DeviceDisposing event.</summary>
      <param name="sender">The GraphicsDeviceManager.</param>
      <param name="args">Arguments for the GraphicsDeviceManager.DeviceDisposing event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceResetting(System.Object,System.EventArgs)">
      <summary>
    Called when the device is about to be reset. Raises the GraphicsDeviceManager.DeviceResetting event.
  </summary>
      <param name="sender">The GraphicsDeviceManager.</param>
      <param name="args">Arguments for the GraphicsDeviceManager.DeviceResetting event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.OnDeviceReset(System.Object,System.EventArgs)">
      <summary>Called when the device has been reset.  Raises the GraphicsDeviceManager.DeviceReset event.</summary>
      <param name="sender">The GraphicsDeviceManager.</param>
      <param name="args">Arguments for the GraphicsDeviceManager.DeviceReset event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.OnPreparingDeviceSettings(System.Object,Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs)">
      <summary>
    Called when the GraphicsDeviceManager is changing the Graphics.GraphicsDevice settings (during reset or recreation of the Graphics.GraphicsDevice).
    Raises the GraphicsDeviceManager.PreparingDeviceSettings event.
  </summary>
      <param name="sender">The GraphicsDeviceManager.</param>
      <param name="args">The graphics device information to modify.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.RankDevices(System.Collections.Generic.List{Microsoft.Xna.Framework.GraphicsDeviceInformation})">
      <summary>Ranks the given list of devices that satisfy the given preferences.</summary>
      <param name="foundDevices">The list of devices to rank.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.ToggleFullScreen">
      <summary>Toggles between full screen and windowed mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GraphicsDeviceManager.GraphicsDevice">
      <summary>Gets the Framework.Graphics.GraphicsDevice associated with the GraphicsDeviceManager.</summary>
      <returns>
        The Framework.Graphics.GraphicsDevice associated with the GraphicsDeviceManager.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GraphicsDeviceManager.IsFullScreen">
      <summary>
    Gets or sets a value that indicates whether the device should start in full-screen mode.
  </summary>
      <returns>Value that indicates whether the device should start in full-screen mode.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GraphicsDeviceManager.MinimumPixelShaderProfile">
      <summary>Gets or sets the minimum pixel shader version required by the GraphicsDeviceManager.</summary>
      <returns>
        The minimum pixel shader version required by the GraphicsDeviceManager.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GraphicsDeviceManager.MinimumVertexShaderProfile">
      <summary>
    Gets or sets the minimum vertex shader version required by the GraphicsDeviceManager.
  </summary>
      <returns>
        The minimum vertex shader version required by the GraphicsDeviceManager.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferMultiSampling">
      <summary>Gets or sets a value that indicates whether to enable a multisampled back buffer.</summary>
      <returns>Value indicating whether multisampling is enabled on the back buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferFormat">
      <summary>Gets or sets the format of the back buffer.</summary>
      <returns>The format of the back buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferHeight">
      <summary>Gets or sets the preferred back-buffer height.</summary>
      <returns>The preferred back-buffer height.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredBackBufferWidth">
      <summary>Gets or sets the preferred back-buffer width.</summary>
      <returns>The preferred back-buffer width.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GraphicsDeviceManager.PreferredDepthStencilFormat">
      <summary>Gets or sets the format of the depth stencil.</summary>
      <returns>The format of the depth stencil.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GraphicsDeviceManager.SynchronizeWithVerticalRetrace">
      <summary> Gets or sets a value that indicates whether to sync to the vertical trace (vsync) when presenting
    the back buffer.
  </summary>
      <returns>
        Value that indicates whether to sync to the vertical trace (vsync) when presenting
        the back buffer.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GraphicsDeviceManager">
      <summary>
    Handles the configuration and management of the graphics device.
  </summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.IDrawable.DrawOrderChanged">
      <summary>Raised when the IDrawable.DrawOrder property changes.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.IDrawable.VisibleChanged">
      <summary>
    Raised when the IDrawable.Visible property changes.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.IDrawable.Draw(Microsoft.Xna.Framework.GameTime)">
      <summary>Draws the IDrawable. Reference page contains links to related conceptual articles.</summary>
      <param name="gameTime">Snapshot of the game's timing state.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.IDrawable.DrawOrder">
      <summary>The order in which to draw this object relative to other objects.  Objects with a lower value are drawn first.</summary>
      <returns>Order in which to draw this object relative to other objects.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.IDrawable.Visible">
      <summary>
    Indicates whether IDrawable.Draw should be called in Game.Draw for this game component.
  </summary>
      <returns>true if IDrawable.Draw should be called; false otherwise.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.IDrawable">
      <summary>Defines the interface for a drawable game component.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.IGameComponent.Initialize">
      <summary>Called when the component should be initialized.  
  This method can be used for tasks like querying for services the component needs and setting up non-graphics resources. </summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.IGameComponent">
      <summary>Defines an interface for game components.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.IGraphicsDeviceManager.BeginDraw">
      <summary>Starts the drawing of a frame.</summary>
      <returns>true if the frame should be drawn; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice">
      <summary>Called to ensure that the device manager has created a valid device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.IGraphicsDeviceManager.EndDraw">
      <summary>Called by the game at the end of drawing; presents the final rendering.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.IGraphicsDeviceManager">
      <summary>Defines the interface for an object that manages a Graphics.GraphicsDevice.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.IUpdateable.EnabledChanged">
      <summary>
    Raised when the IUpdateable.Enabled property changes.
  </summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.IUpdateable.UpdateOrderChanged">
      <summary>
    Raised when the IUpdateable.UpdateOrder property changes.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.IUpdateable.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>Called when the game component should be updated.</summary>
      <param name="gameTime">Snapshot of the game's timing state.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.IUpdateable.Enabled">
      <summary>Indicates whether the game component's IUpdateable.Update method should be called in Game.Update.</summary>
      <returns>true if IUpdateable.Update should be called; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.IUpdateable.UpdateOrder">
      <summary>Indicates when the game component should be updated relative to other game components.  Lower values are updated first.</summary>
      <returns>When the game component should be updated.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.IUpdateable">
      <summary>Defines an interface for a game component that should be updated in Game.Update.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.E">
      <summary>Represents the mathematical constant e.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Log10E">
      <summary>Represents the log base ten of e.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Log2E">
      <summary>Represents the log base two of e.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.PiOver2">
      <summary>Represents the value of pi divided by two.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.PiOver4">
      <summary>Represents the value of pi divided by four.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Pi">
      <summary>Represents the value of pi.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.TwoPi">
      <summary>Represents the value of pi times two.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.</summary>
      <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
      <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
      <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
      <param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.</param>
      <param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.</param>
      <returns>Cartesian coordinate of the specified point with respect to the axis being used.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <returns>A position that is the result of the Catmull-Rom interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Clamp(System.Single,System.Single,System.Single)">
      <summary>Restricts a value to be within a specified range. Reference page contains links to related code samples.</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value.  If value is less than min, min will be returned.</param>
      <param name="max">The maximum value.  If value is greater than max, max will be returned.</param>
      <returns>
        The clamped value.  
            If value&amp;gt;max, max will be returned.
          
            If value&amp;lt;min, min will be returned.
          If min≤value≥max, value will be returned.
        </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Distance(System.Single,System.Single)">
      <summary>Calculates the absolute value of the difference of two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <returns>Distance between the two values.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position.</param>
      <param name="tangent1">Source tangent.</param>
      <param name="value2">Source position.</param>
      <param name="tangent2">Source tangent.</param>
      <param name="amount">Weighting factor.</param>
      <returns>The result of the Hermite spline interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)">
      <summary>Linearly interpolates between two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
      <returns>Interpolated value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Max(System.Single,System.Single)">
      <summary>Returns the greater of two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <returns>The greater value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Min(System.Single,System.Single)">
      <summary>Returns the lesser of two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <returns>The lesser value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <returns>Interpolated value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.ToDegrees(System.Single)">
      <summary>Converts radians to degrees.</summary>
      <param name="radians">The angle in radians.</param>
      <returns>The angle in degrees.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)">
      <summary>Converts degrees to radians.</summary>
      <param name="degrees">The angle in degrees.</param>
      <returns>The angle in radians.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.WrapAngle(System.Single)">
      <summary>Reduces a given angle to a value between &lt;span style="font-family:times;"&gt;π&lt;/span&gt; and -&lt;span style="font-family:times;"&gt;π&lt;/span&gt;.</summary>
      <param name="angle">The angle to reduce, in radians.</param>
      <returns>The new angle, in radians.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.MathHelper">
      <summary>Contains commonly used precalculated values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Matrix.</summary>
      <param name="m11">Value to initialize m11 to.</param>
      <param name="m12">Value to initialize m12 to.</param>
      <param name="m13">Value to initialize m13 to.</param>
      <param name="m14">Value to initialize m14 to.</param>
      <param name="m21">Value to initialize m21 to.</param>
      <param name="m22">Value to initialize m22 to.</param>
      <param name="m23">Value to initialize m23 to.</param>
      <param name="m24">Value to initialize m24 to.</param>
      <param name="m31">Value to initialize m31 to.</param>
      <param name="m32">Value to initialize m32 to.</param>
      <param name="m33">Value to initialize m33 to.</param>
      <param name="m34">Value to initialize m34 to.</param>
      <param name="m41">Value to initialize m41 to.</param>
      <param name="m42">Value to initialize m42 to.</param>
      <param name="m43">Value to initialize m43 to.</param>
      <param name="m44">Value to initialize m44 to.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M11">
      <summary>Value at row 1 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M12">
      <summary>Value at row 1 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M13">
      <summary>Value at row 1 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M14">
      <summary>Value at row 1 column 4 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M21">
      <summary>Value at row 2 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M22">
      <summary>Value at row 2 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M23">
      <summary>Value at row 2 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M24">
      <summary>Value at row 2 column 4 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M31">
      <summary>Value at row 3 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M32">
      <summary>Value at row 3 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M33">
      <summary>Value at row 3 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M34">
      <summary>Value at row 3 column 4 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M41">
      <summary>Value at row 4 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M42">
      <summary>Value at row 4 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M43">
      <summary>Value at row 4 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M44">
      <summary>Value at row 4 column 4 of the matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Addition(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Adds a matrix to another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Add(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Adds a matrix to another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Add(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Adds a matrix to another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="result">Resulting matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Nullable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates a spherical billboard that rotates around a specified object position.</summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="cameraUpVector">The up vector of the camera.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
      <returns>The created billboard matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateBillboard(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Nullable{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a spherical billboard that rotates around a specified object position.</summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="cameraUpVector">The up vector of the camera.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
      <param name="result">The created billboard matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Nullable{Microsoft.Xna.Framework.Vector3},System.Nullable{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a cylindrical billboard that rotates around a specified axis.</summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="rotateAxis">Axis to rotate the billboard around.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
      <param name="objectForwardVector">Optional forward vector of the object.</param>
      <param name="result">The created billboard matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Nullable{Microsoft.Xna.Framework.Vector3},System.Nullable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates a cylindrical billboard that rotates around a specified axis.</summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="rotateAxis">Axis to rotate the billboard around.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
      <param name="objectForwardVector">Optional forward vector of the object.</param>
      <returns>The created billboard matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new Matrix that rotates around an arbitrary vector.</summary>
      <param name="axis">The axis to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
      <returns>The created Matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>
    Creates a new Matrix that rotates around an arbitrary vector.
  </summary>
      <param name="axis">The axis to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
      <param name="result">The created Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
    Creates a rotation Matrix from a Quaternion.
  </summary>
      <param name="quaternion">Quaternion to create the Matrix from.</param>
      <param name="result">The created Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion)">
      <summary>Creates a rotation Matrix from a Quaternion.</summary>
      <param name="quaternion">Quaternion to create the Matrix from.</param>
      <returns>The created Matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Fills in a rotation matrix from a specified yaw, pitch, and roll.</summary>
      <param name="yaw">Angle of rotation, in radians, around the y-axis.</param>
      <param name="pitch">Angle of rotation, in radians, around the x-axis.</param>
      <param name="roll">Angle of rotation, in radians, around the z-axis.</param>
      <param name="result">An existing matrix filled in to represent the specified yaw, pitch, and roll.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Creates a new rotation matrix from a specified yaw, pitch, and roll.</summary>
      <param name="yaw">Angle of rotation, in radians, around the y-axis.</param>
      <param name="pitch">Angle of rotation, in radians, around the x-axis.</param>
      <param name="roll">Angle of rotation, in radians, around the z-axis.</param>
      <returns>A new rotation matrix with the specified yaw, pitch, and roll.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateLookAt(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a view matrix. Reference page contains links to related code samples.</summary>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="cameraTarget">The target towards which the camera is pointing.</param>
      <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
      <param name="result">The created view matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateLookAt(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a view matrix. Reference page contains links to related code samples.</summary>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="cameraTarget">The target towards which the camera is pointing.</param>
      <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
      <returns>The created view matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, orthogonal projection matrix. Reference page contains links to related code samples.</summary>
      <param name="left">Minimum x-value of the view volume.</param>
      <param name="right">Maximum x-value of the view volume.</param>
      <param name="bottom">Minimum y-value of the view volume.</param>
      <param name="top">Maximum y-value of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
      <returns>The projection matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a customized, orthogonal projection matrix. Reference page contains links to related code samples.</summary>
      <param name="left">Minimum x-value of the view volume.</param>
      <param name="right">Maximum x-value of the view volume.</param>
      <param name="bottom">Minimum y-value of the view volume.</param>
      <param name="top">Maximum y-value of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
      <param name="result">The projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds an orthogonal projection matrix. Reference page contains links to related code samples.</summary>
      <param name="width">Width of the view volume.</param>
      <param name="height">Height of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
      <returns>The projection matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds an orthogonal projection matrix. Reference page contains links to related code samples.</summary>
      <param name="width">Width of the view volume.</param>
      <param name="height">Height of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
      <param name="result">The projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a perspective projection matrix based on a field of view. Reference page contains links to related conceptual articles.</summary>
      <param name="fieldOfView">Field of view in radians.</param>
      <param name="aspectRatio">Aspect ratio, defined as view space width divided by height.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
      <returns>The perspective projection matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a perspective projection matrix based on a field of view. Reference page contains links to related conceptual articles.</summary>
      <param name="fieldOfView">Field of view in radians.</param>
      <param name="aspectRatio">Aspect ratio, defined as view space width divided by height.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
      <param name="result">The perspective projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, perspective projection matrix. Reference page contains links to related code samples.</summary>
      <param name="left">Minimum x-value of the view volume at the near view plane.</param>
      <param name="right">Maximum x-value of the view volume at the near view plane.</param>
      <param name="bottom">Minimum y-value of the view volume at the near view plane.</param>
      <param name="top">Maximum y-value of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to of the far view plane.</param>
      <returns>The created projection matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a customized, perspective projection matrix. Reference page contains links to related code samples.</summary>
      <param name="left">Minimum x-value of the view volume at the near view plane.</param>
      <param name="right">Maximum x-value of the view volume at the near view plane.</param>
      <param name="bottom">Minimum y-value of the view volume at the near view plane.</param>
      <param name="top">Maximum y-value of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to of the far view plane.</param>
      <param name="result">The created projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a perspective projection matrix. Reference page contains links to related code samples.</summary>
      <param name="width">Width of the view volume at the near view plane.</param>
      <param name="height">Height of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
      <returns>The projection matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a perspective projection matrix. Reference page contains links to related code samples.</summary>
      <param name="width">Width of the view volume at the near view plane.</param>
      <param name="height">Height of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
      <param name="result">The projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateReflection(Microsoft.Xna.Framework.Plane)">
      <summary>
    Creates a Matrix that reflects the coordinate system about a specified Plane.
  </summary>
      <param name="value">The Plane about which to create a reflection.</param>
      <returns>
        A new Matrix expressing the reflection.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateReflection(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Fills in an existing Matrix so that it reflects the coordinate system about a specified Plane.</summary>
      <param name="value">The Plane about which to create a reflection.</param>
      <param name="result">A Matrix that creates the reflection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationX(System.Single)">
      <summary>Returns a matrix that can be used to rotate a set of vertices around the x-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the x-axis.  Note that you can use MathHelper.ToRadians to convert degrees to radians.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationX(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the x-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the x-axis.  Note that you can use MathHelper.ToRadians to convert degrees to radians.</param>
      <param name="result">The matrix in which to place the calculated data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationY(System.Single)">
      <summary>Returns a matrix that can be used to rotate a set of vertices around the y-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the y-axis.  Note that you can use MathHelper.ToRadians to convert degrees to radians.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationY(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the y-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the y-axis.  Note that you can use MathHelper.ToRadians to convert degrees to radians.</param>
      <param name="result">The matrix in which to place the calculated data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationZ(System.Single)">
      <summary>Returns a matrix that can be used to rotate a set of vertices around the z-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the z-axis.  Note that you can use MathHelper.ToRadians to convert degrees to radians.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationZ(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the z-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the z-axis.  Note that you can use MathHelper.ToRadians to convert degrees to radians.</param>
      <param name="result">The rotation matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single)">
      <summary>Creates a scaling Matrix.</summary>
      <param name="scale">Amount to scale by.</param>
      <returns>The created scaling Matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>
    Creates a scaling Matrix.
  </summary>
      <param name="xScale">Value to scale by on the x-axis.</param>
      <param name="yScale">Value to scale by on the y-axis.</param>
      <param name="zScale">Value to scale by on the z-axis.</param>
      <param name="result">The created scaling Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>
    Creates a scaling Matrix.
  </summary>
      <param name="scale">Value to scale by.</param>
      <param name="result">The created scaling Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(Microsoft.Xna.Framework.Vector3)">
      <summary>
    Creates a scaling Matrix.
  </summary>
      <param name="scales">Amounts to scale by on the x, y, and z axes.</param>
      <returns>
        The created scaling Matrix.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
    Creates a scaling Matrix.
  </summary>
      <param name="scales">Amounts to scale by on the x, y, and z axes.</param>
      <param name="result">The created scaling Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,System.Single,System.Single)">
      <summary>
    Creates a scaling Matrix.
  </summary>
      <param name="xScale">Value to scale by on the x-axis.</param>
      <param name="yScale">Value to scale by on the y-axis.</param>
      <param name="zScale">Value to scale by on the z-axis.</param>
      <returns>
        The created scaling Matrix.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateShadow(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Plane)">
      <summary>
    Creates a Matrix that flattens geometry into a specified Plane as if casting a shadow from a specified light source.
  </summary>
      <param name="lightDirection">A Vector3 specifying the direction from which the light that will cast the shadow is coming.</param>
      <param name="plane">The Plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
      <returns>
        A new Matrix that can be used to flatten geometry onto the specified plane from the specified direction.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateShadow(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Fills in a Matrix to flatten geometry into a specified Plane as if casting a shadow from a specified light source.</summary>
      <param name="lightDirection">A Vector3 specifying the direction from which the light that will cast the shadow is coming.</param>
      <param name="plane">The Plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
      <param name="result">A Matrix that can be used to flatten geometry onto the specified plane from the specified direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>
    Creates a translation Matrix.
   Reference page contains links to related code samples.</summary>
      <param name="xPosition">Value to translate by on the x-axis.</param>
      <param name="yPosition">Value to translate by on the y-axis.</param>
      <param name="zPosition">Value to translate by on the z-axis.</param>
      <param name="result">The created translation Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(Microsoft.Xna.Framework.Vector3)">
      <summary>
    Creates a translation Matrix.
   Reference page contains links to related code samples.</summary>
      <param name="position">Amounts to translate by on the x, y, and z axes.</param>
      <returns>The created translation Matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
    Creates a translation Matrix.
   Reference page contains links to related code samples.</summary>
      <param name="position">Amounts to translate by on the x, y, and z axes.</param>
      <param name="result">The created translation Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>
    Creates a translation Matrix.
   Reference page contains links to related code samples.</summary>
      <param name="xPosition">Value to translate by on the x-axis.</param>
      <param name="yPosition">Value to translate by on the y-axis.</param>
      <param name="zPosition">Value to translate by on the z-axis.</param>
      <returns>The created translation Matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateWorld(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a world matrix with the specified parameters.</summary>
      <param name="position">Position of the object. This value is used in translation operations.</param>
      <param name="forward">Forward direction of the object.</param>
      <param name="up">Upward direction of the object; usually [0, 1, 0].</param>
      <param name="result">The created world matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateWorld(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a world matrix with the specified parameters.</summary>
      <param name="position">Position of the object. This value is used in translation operations.</param>
      <param name="forward">Forward direction of the object.</param>
      <param name="up">Upward direction of the object; usually [0, 1, 0].</param>
      <returns>The created world matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Decompose(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Extracts the scalar, translation, and rotation components from a 3D scale/rotate/translate (SRT) Matrix. Reference page contains code sample.</summary>
      <param name="scale">The scalar component of the transform matrix, expressed as a Vector3.</param>
      <param name="rotation">The rotation component of the transform matrix, expressed as a Quaternion.</param>
      <param name="translation">The translation component of the transform matrix, expressed as a Vector3.</param>
      <returns>true if the Matrix can be decomposed; false otherwise.
    </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Determinant">
      <summary>Calculates the determinant of the matrix.</summary>
      <returns>The determinant of the matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
      <returns>Result of the division.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Divides the components of a matrix by a scalar.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="divider">The divisor.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
      <param name="result">Result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Divides the components of a matrix by a scalar.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="divider">The divisor.</param>
      <param name="result">Result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Division(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Division(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Divides the components of a matrix by a scalar.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="divider">The divisor.</param>
      <returns>The result of the division.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Equality(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Compares a matrix for equality with another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <returns>true if the matrices are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Equals(Microsoft.Xna.Framework.Matrix)">
      <summary>
    Determines whether the specified System.Object is equal to the Matrix.
  </summary>
      <param name="other">The System.Object to compare with the current Matrix.</param>
      <returns>true if the specified System.Object is equal to the current Matrix; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.GetHashCode">
      <summary>Gets the hash code of this object.</summary>
      <returns>Hash code of this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Inequality(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Tests a matrix for inequality with another matrix.</summary>
      <param name="matrix1">The matrix on the left of the equal sign.</param>
      <param name="matrix2">The matrix on the right of the equal sign.</param>
      <returns>true if the matrices are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Invert(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Calculates the inverse of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
      <param name="result">The inverse of the matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Invert(Microsoft.Xna.Framework.Matrix)">
      <summary>Calculates the inverse of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
      <returns>The inverse of the matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Lerp(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="amount">Interpolation value.</param>
      <param name="result">Resulting matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Lerp(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="amount">Interpolation value.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(System.Single,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="matrix">Source matrix.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="matrix">Source matrix.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Multiplies a matrix by another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="result">Result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Negate(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Negates individual elements of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
      <param name="result">Negated matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Negate(Microsoft.Xna.Framework.Matrix)">
      <summary>Negates individual elements of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
      <returns>Negated matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Subtraction(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Subtracts matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Subtract(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Subtracts matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Subtract(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Subtracts matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="result">Result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transform(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Quaternion)">
      <summary>
    Transforms a Matrix by applying a Quaternion rotation.
  </summary>
      <param name="value">The Matrix to transform.</param>
      <param name="rotation">The rotation to apply, expressed as a Quaternion.</param>
      <returns>
        A new Matrix that is the result of the transform.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transform(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Transforms a Matrix by applying a Quaternion rotation.</summary>
      <param name="value">The Matrix to transform.</param>
      <param name="rotation">The rotation to apply, expressed as a Quaternion.</param>
      <param name="result">An existing Matrix filled in with the result of the transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transpose(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Transposes the rows and columns of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
      <param name="result">Transposed matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transpose(Microsoft.Xna.Framework.Matrix)">
      <summary>Transposes the rows and columns of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
      <returns>Transposed matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_UnaryNegation(Microsoft.Xna.Framework.Matrix)">
      <summary>Negates individual elements of a matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <returns>Negated matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Backward">
      <summary>Gets and sets the backward vector of the Matrix.</summary>
      <returns>The backward vector of the Matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Down">
      <summary>Gets and sets the down vector of the Matrix.</summary>
      <returns>The down vector of the Matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Forward">
      <summary>Gets and sets the forward vector of the Matrix.</summary>
      <returns>The forward vector of the Matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Identity">
      <summary>Returns an instance of the identity matrix.</summary>
      <returns>The identity matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Left">
      <summary>Gets and sets the left vector of the Matrix.</summary>
      <returns>The left vector of the Matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Right">
      <summary>Gets and sets the right vector of the Matrix.</summary>
      <returns>The right vector of the Matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Translation">
      <summary>Gets and sets the translation vector of the Matrix.</summary>
      <returns>The translation vector of the Matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Up">
      <summary>Gets and sets the up vector of the Matrix.</summary>
      <returns>The up vector of the Matrix.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Matrix">
      <summary>Defines a matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.NoSuitableGraphicsDeviceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.NoSuitableGraphicsDeviceException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.NoSuitableGraphicsDeviceException">
      <summary>Thrown when no available graphics device fits the given device preferences.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new instance of Plane.</summary>
      <param name="normal">The normal vector to the Plane.</param>
      <param name="d">The Plane's distance along its normal from the origin.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
    Creates a new instance of Plane.
  </summary>
      <param name="a">X component of the normal defining the Plane.</param>
      <param name="b">Y component of the normal defining the Plane.</param>
      <param name="c">Z component of the normal defining the Plane.</param>
      <param name="d">Distance of the Plane along its normal from the origin.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>
    Creates a new instance of Plane.
  </summary>
      <param name="value">Vector4 with X, Y, and Z components defining the normal of the Plane.
      The W component defines the distance of the Plane along the normal from the origin.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
    Creates a new instance of Plane.
  </summary>
      <param name="point1">One point of a triangle defining the Plane.</param>
      <param name="point2">One point of a triangle defining the Plane.</param>
      <param name="point3">One point of a triangle defining the Plane.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Plane.D">
      <summary>The distance of the Plane along its normal from the origin. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Plane.Normal">
      <summary>The normal vector of the Plane.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotCoordinate(Microsoft.Xna.Framework.Vector3)">
      <summary>
    Returns the dot product of a specified Vector3 and the Plane.Normal vector of this
    Plane plus the distance (Plane.D) value of the Plane.
  </summary>
      <param name="value">The Vector3 to multiply by.</param>
      <returns>The resulting value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotCoordinate(Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>
    Returns the dot product of a specified Vector3 and the Plane.Normal vector of this 
    Plane plus the distance (Plane.D) value of the Plane.
  </summary>
      <param name="value">The Vector3 to multiply by.</param>
      <param name="result">The resulting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotNormal(Microsoft.Xna.Framework.Vector3)">
      <summary>
    Returns the dot product of a specified Vector3
    and the Plane.Normal vector of this Plane.
  </summary>
      <param name="value">The Vector3 to multiply by.</param>
      <returns>The resulting dot product.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotNormal(Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>
    Returns the dot product of a specified Vector3 
    and the Plane.Normal vector of this Plane.
  </summary>
      <param name="value">The Vector3 to multiply by.</param>
      <param name="result">The resulting dot product.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Dot(Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>
    Calculates the dot product of a specified Vector4 and this Plane.
  </summary>
      <param name="value">The Vector4 to multiply this Plane by.</param>
      <param name="result">The dot product of the specified Vector4 and this Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Dot(Microsoft.Xna.Framework.Vector4)">
      <summary>
    Calculates the dot product of a specified Vector4 and this Plane.
  </summary>
      <param name="value">The Vector4 to multiply this Plane by.</param>
      <returns>
        The dot product of the specified Vector4 and this Plane.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.op_Equality(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Plane)">
      <summary>
    Determines whether two instances of Plane are equal.
  </summary>
      <param name="lhs">The object to the left of the equality operator.</param>
      <param name="rhs">The object to the right of the equality operator.</param>
      <returns>true if left is equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Equals(Microsoft.Xna.Framework.Plane)">
      <summary>
    Determines whether the specified Plane is equal to the Plane.
  </summary>
      <param name="other">The Plane to compare with the current Plane.</param>
      <returns>true if the specified Plane is equal to the current Plane; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Equals(System.Object)">
      <summary>
    Determines whether the specified System.Object is equal to the Plane.
  </summary>
      <param name="obj">The System.Object to compare with the current Plane.</param>
      <returns>true if the specified System.Object is equal to the current Plane; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>
        A hash code for the current Plane.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.op_Inequality(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Plane)">
      <summary>
    Determines whether two instances of Plane are not equal.
  </summary>
      <param name="lhs">The object to the left of the inequality operator.</param>
      <param name="rhs">The object to the right of the inequality operator.</param>
      <returns>true if left is not equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current Plane intersects a specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <returns>An enumeration indicating the relationship between the Plane and the BoundingSphere.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>
    Checks whether the current Plane intersects a BoundingBox.
  </summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">An enumeration indicating whether the Plane intersects the BoundingBox.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current Plane intersects a specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check for intersection with.</param>
      <returns>An enumeration indicating the relationship between the Plane and the BoundingFrustum.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>
    Checks whether the current Plane intersects a BoundingSphere.
  </summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">An enumeration indicating whether the Plane intersects the BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current Plane intersects a specified BoundingBox.</summary>
      <param name="box">The BoundingBox to test for intersection with.</param>
      <returns>An enumeration indicating the relationship between the Plane and the BoundingBox.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Normalize(Microsoft.Xna.Framework.Plane)">
      <summary>
    Changes the coefficients of the Plane.Normal vector of a Plane to make it of unit length.
  </summary>
      <param name="value">The Plane to normalize.</param>
      <returns>A new Plane with a normal having unit length.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Normalize(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Plane@)">
      <summary>
    Changes the coefficients of the Plane.Normal vector of a Plane to make it of unit length.
  </summary>
      <param name="value">The Plane to normalize.</param>
      <param name="result">An existing plane Plane filled in with a normalized version of the specified plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Normalize">
      <summary>
    Changes the coefficients of the Plane.Normal vector of this Plane to make it of unit length.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.ToString">
      <summary>
    Returns a System.String that represents the current Plane.
  </summary>
      <returns>System.String representation of the current Plane.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Transforms a normalized Plane by a Matrix.
  </summary>
      <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Plane.Normal vector is of unit length, before this method is called.</param>
      <param name="matrix">The transform Matrix to apply to the Plane.</param>
      <returns>
        A new Plane that results from applying the transform.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Plane@)">
      <summary>
    Transforms a normalized Plane by a Matrix.
  </summary>
      <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Plane.Normal vector is of unit length, before this method is called.</param>
      <param name="matrix">The transform Matrix to apply to the Plane.</param>
      <param name="result">An existing Plane filled in with the results of applying the transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Quaternion)">
      <summary>
    Transforms a normalized Plane by a Quaternion rotation.
  </summary>
      <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Plane.Normal vector is of unit length, before this method is called.</param>
      <param name="rotation">The Quaternion rotation to apply to the Plane.</param>
      <returns>
        A new Plane that results from applying the rotation.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Plane@)">
      <summary>
    Transforms a normalized Plane by a Quaternion rotation.
  </summary>
      <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Plane.Normal vector is of unit length, before this method is called.</param>
      <param name="rotation">The Quaternion rotation to apply to the Plane.</param>
      <param name="result">An existing Plane filled in with the results of applying the rotation.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Plane">
      <summary>Defines a plane.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of Point.</summary>
      <param name="x">The x-coordinate of the Point.</param>
      <param name="y">The y-coordinate of the Point.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Point.X">
      <summary>Specifies the x-coordinate of the Point.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Point.Y">
      <summary>Specifies the y-coordinate of the Point.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.op_Equality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
      <summary>
	  Determines whether two Point instances are equal.
  </summary>
      <param name="a">Point on the left side of the equal sign.</param>
      <param name="b">Point on the right side of the equal sign.</param>
      <returns>true if a and bare equal; false otherwise.
	  </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.Equals(Microsoft.Xna.Framework.Point)">
      <summary>
    Determines whether two Point instances are equal.
  </summary>
      <param name="other">The Point to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.Equals(System.Object)">
      <summary>
	  Determines whether two Point instances are equal.
  </summary>
      <param name="obj">The object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.
	  </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.op_Inequality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
      <summary>
	  Determines whether two Point instances are not equal.
  </summary>
      <param name="a">The Point on the left side of the equal sign.</param>
      <param name="b">The Point on the right side of the equal sign.</param>
      <returns>true if the instances are not equal; false otherwise.
	  </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.ToString">
      <summary>
	  Returns a System.String that represents the current Point.
  </summary>
      <returns>A System.String that represents the current Point.  </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Point.Zero">
      <summary>Returns the point (0,0).</summary>
      <returns>The point (0,0).</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Point">
      <summary>Defines a point in 2D space.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.PowerStatus.PowerStateChanged">
      <summary>Raised when the power state changes.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.PowerStatus.BatteryChargeStatus">
      <summary>
    Gets the BatteryChargeStatus associated with the system.</summary>
      <returns>
        The BatteryChargeStatus associated with the system.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.PowerStatus.BatteryFullLifetime">
      <summary>Gets the full charge lifetime of the primary battery power source.</summary>
      <returns>The full charge lifetime of the primary battery power source.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.PowerStatus.BatteryLifePercent">
      <summary>Gets the approximate percentage of full battery time remaining.</summary>
      <returns>Approximate percentage of full battery time remaining.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.PowerStatus.BatteryLifeRemaining">
      <summary>Gets the approximate battery life remaining.</summary>
      <returns>Approximate battery life remaining.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.PowerStatus.PowerLineStatus">
      <summary>Gets the PowerLineStatus associated with the system.</summary>
      <returns>
        The PowerLineStatus associated with the system.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.PowerStatus">
      <summary>Contains system power information, including battery life status and power line status. Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs.#ctor(Microsoft.Xna.Framework.GraphicsDeviceInformation)">
      <summary>Creates a new instance of Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs(Microsoft.Xna.Framework.GraphicsDeviceInformation).</summary>
      <param name="graphicsDeviceInformation">Information about the Graphics.GraphicsDevice.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs.GraphicsDeviceInformation">
      <summary>Information about the Graphics.GraphicsDevice.</summary>
      <returns>
        Information about the Graphics.GraphicsDevice.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs">
      <summary>Arguments for the GraphicsDeviceManager.PreparingDeviceSettings  event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Initializes a new instance of Quaternion.</summary>
      <param name="vectorPart">The vector component of the quaternion.</param>
      <param name="scalarPart">The rotation component of the quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Quaternion.</summary>
      <param name="x">The x-value of the quaternion.</param>
      <param name="y">The y-value of the quaternion.</param>
      <param name="z">The z-value of the quaternion.</param>
      <param name="w">The w-value of the quaternion.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.W">
      <summary>Specifies the rotation component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.X">
      <summary>Specifies the x-value of the vector component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.Y">
      <summary>Specifies the y-value of the vector component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.Z">
      <summary>Specifies the z-value of the vector component of the quaternion.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Addition(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Adds two Quaternions.</summary>
      <param name="quaternion1">Quaternion to add.</param>
      <param name="quaternion2">Quaternion to add.</param>
      <returns>Result of adding the Quaternions.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Adds two Quaternions.</summary>
      <param name="quaternion1">Quaternion to add.</param>
      <param name="quaternion2">Quaternion to add.</param>
      <param name="result">Result of adding the Quaternions.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Adds two Quaternions.</summary>
      <param name="quaternion1">Quaternion to add.</param>
      <param name="quaternion2">Quaternion to add.</param>
      <returns>Result of adding the Quaternions.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.</summary>
      <param name="value1">The first Quaternion rotation in the series.</param>
      <param name="value2">The second Quaternion rotation in the series.</param>
      <param name="result">The Quaternion rotation representing the concatenation of value1 followed by value2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.</summary>
      <param name="value1">The first Quaternion rotation in the series.</param>
      <param name="value2">The second Quaternion rotation in the series.</param>
      <returns>
        A new Quaternion representing the concatenation of the value1 rotation followed by the value2 rotation.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion)">
      <summary>Returns the conjugate of a specified Quaternion.</summary>
      <param name="value">The Quaternion of which to return the conjugate.</param>
      <returns>
        A new Quaternion that is the conjugate of the specified one.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
    Returns the conjugate of a specified Quaternion.
  </summary>
      <param name="value">The Quaternion of which to return the conjugate.</param>
      <param name="result">An existing Quaternion filled in to be the conjugate of the specified one.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate">
      <summary>
    Transforms this Quaternion into its conjugate.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a Quaternion from a vector and an angle to rotate about the vector.</summary>
      <param name="axis">The vector to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
      <returns>The created Quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
    Creates a Quaternion from a vector and an angle to rotate about the vector.
  </summary>
      <param name="axis">The vector to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
      <param name="result">The created Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix)">
      <summary>Creates a Quaternion from a rotation Matrix.</summary>
      <param name="matrix">The rotation Matrix to create the Quaternion from.</param>
      <returns>The created Quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
    Creates a Quaternion from a rotation Matrix.
  </summary>
      <param name="matrix">The rotation Matrix to create the Quaternion from.</param>
      <param name="result">The created Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
    Creates a new Quaternion from specified yaw, pitch, and roll angles.
  </summary>
      <param name="yaw">The yaw angle, in radians, around the y-axis.</param>
      <param name="pitch">The pitch angle, in radians, around the x-axis.</param>
      <param name="roll">The roll angle, in radians, around the z-axis.</param>
      <param name="result">An existing Quaternion filled in to express the specified yaw, pitch, and roll angles.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>
    Creates a new Quaternion from specified yaw, pitch, and roll angles.
  </summary>
      <param name="yaw">The yaw angle, in radians, around the y-axis.</param>
      <param name="pitch">The pitch angle, in radians, around the x-axis.</param>
      <param name="roll">The roll angle, in radians, around the z-axis.</param>
      <returns>A new Quaternion expressing the specified yaw, pitch, and roll angles.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
    Divides a Quaternion by another Quaternion.
  </summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">The divisor.</param>
      <param name="result">Result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides a Quaternion by another Quaternion.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">The divisor.</param>
      <returns>Result of the division.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Division(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides a Quaternion by another Quaternion.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">The divisor.</param>
      <returns>Result of the division.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@)">
      <summary>
    Calculates the dot product of two Quaternions.
  </summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
      <param name="result">Dot product of the Quaternions.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Calculates the dot product of two Quaternions.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
      <returns>Dot product of the Quaternions.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Equality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Compares two Quaternions for equality.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
      <returns>true if the Quaternions are equal, false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Equals(Microsoft.Xna.Framework.Quaternion)">
      <summary>
    Determines whether the specified System.Object is equal to the Quaternion.
  </summary>
      <param name="other">The Quaternion to compare with the current Quaternion.</param>
      <returns>true if the specified System.Object is equal to the current Quaternion; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.GetHashCode">
      <summary>Get the hash code of this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Inequality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Compare two Quaternions for inequality.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
      <returns>true if the Quaternions are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion)">
      <summary>Returns the inverse of a Quaternion.</summary>
      <param name="quaternion">Source Quaternion.</param>
      <returns>The inverse of the Quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
    Returns the inverse of a Quaternion.
  </summary>
      <param name="quaternion">Source Quaternion.</param>
      <param name="result">The inverse of the Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.LengthSquared">
      <summary>Calculates the length squared of a Quaternion.</summary>
      <returns>The length squared of the Quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Length">
      <summary>Calculates the length of a Quaternion.</summary>
      <returns>The length of the Quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Linearly interpolates between two quaternions.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="amount">Value indicating how far to interpolate between the quaternions.</param>
      <param name="result">The resulting quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Linearly interpolates between two quaternions.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="amount">Value indicating how far to interpolate between the quaternions.</param>
      <returns>The resulting quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Multiplies two quaternions.</summary>
      <param name="quaternion1">The quaternion on the left of the multiplication.</param>
      <param name="quaternion2">The quaternion on the right of the multiplication.</param>
      <param name="result">The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Multiplies a quaternion by a scalar value.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Multiplies two quaternions.</summary>
      <param name="quaternion1">The quaternion on the left of the multiplication.</param>
      <param name="quaternion2">The quaternion on the right of the multiplication.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Multiplies two quaternions.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Multiplies a quaternion by a scalar value.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Multiplies a quaternion by a scalar value.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion)">
      <summary>Flips the sign of each component of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
      <returns>Negated quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Flips the sign of each component of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
      <param name="result">Negated quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides each component of the quaternion by the length of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
      <returns>Normalized quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Divides each component of the quaternion by the length of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
      <param name="result">Normalized quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize">
      <summary>Divides each component of the quaternion by the length of the quaternion.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Interpolates between two quaternions, using spherical linear interpolation.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="amount">Value that indicates how far to interpolate between the quaternions.</param>
      <param name="result">Result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Interpolates between two quaternions, using spherical linear interpolation.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="amount">Value that indicates how far to interpolate between the quaternions.</param>
      <returns>Result of the interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Subtraction(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Subtracts a quaternion from another quaternion.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Subtracts a quaternion from another quaternion.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="result">Result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Subtracts a quaternion from another quaternion.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.ToString">
      <summary>Retireves a string representation of the current object.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_UnaryNegation(Microsoft.Xna.Framework.Quaternion)">
      <summary>Flips the sign of each component of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
      <returns>Negated quaternion.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Quaternion.Identity">
      <summary>Returns a Quaternion representing no rotation.</summary>
      <returns>The identity Quaternion (0,0,0,1).</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Quaternion">
      <summary>Defines a four-dimensional vector (x,y,z,w), which is used to efficiently rotate an object about the (x, y, z) vector by the angle theta, where w = cos(theta/2).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a new instance of Ray.</summary>
      <param name="position">The starting point of the Ray.</param>
      <param name="direction">Unit vector describing the direction of the Ray.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Ray.Direction">
      <summary>Unit vector specifying the direction the Ray is pointing.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Ray.Position">
      <summary>Specifies the starting point of the Ray.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.op_Equality(Microsoft.Xna.Framework.Ray,Microsoft.Xna.Framework.Ray)">
      <summary>
    Determines whether two instances of Ray are equal.
  </summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if left is equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Equals(System.Object)">
      <summary>
    Determines whether two instances of Ray are equal.
  </summary>
      <param name="obj">The System.Object to compare with the current Ray.</param>
      <returns>true if the specified System.Object is equal to the current Ray; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Equals(Microsoft.Xna.Framework.Ray)">
      <summary>
    Determines whether the specified Ray is equal to the current Ray.
  </summary>
      <param name="other">The Ray to compare with the current Ray.</param>
      <returns>true if the specified Ray is equal to the current Ray; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>
        A hash code for the current Ray.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.op_Inequality(Microsoft.Xna.Framework.Ray,Microsoft.Xna.Framework.Ray)">
      <summary>
    Determines whether two instances of Ray are not equal.
  </summary>
      <param name="a">The object to the left of the inequality operator.</param>
      <param name="b">The object to the right of the inequality operator.</param>
      <returns>true if left is not equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.Plane@,System.Nullable{System.Single}@)">
      <summary>
    Determines whether this Ray intersects a specified Plane.
  </summary>
      <param name="plane">The Plane with which to calculate this Ray's intersection.</param>
      <param name="result">The distance at which this Ray intersects the specified Plane, or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the Ray intersects a specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with the Ray.</param>
      <returns>Distance at which the ray intersects the BoundingSphere or null if there is no intersection.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>
    Determines whether this Ray intersects a specified Plane.
  </summary>
      <param name="plane">The Plane with which to calculate this Ray's intersection.</param>
      <returns>
        The distance at which this Ray intersects the specified Plane, or null if there is no intersection.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Checks whether the Ray intersects a specified BoundingFrustum.
  </summary>
      <param name="frustum">The BoundingFrustum to check for intersection with the Ray.</param>
      <returns>Distance at which the ray intersects the BoundingFrustum or null if there is no intersection.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Nullable{System.Single}@)">
      <summary>
    Checks whether the current Ray intersects a BoundingBox.
  </summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">Distance at which the ray intersects the BoundingBox or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Checks whether the Ray intersects a specified BoundingBox.
  </summary>
      <param name="box">The BoundingBox to check for intersection with the Ray.</param>
      <returns>Distance at which the ray intersects the BoundingBox or null if there is no intersection.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Nullable{System.Single}@)">
      <summary>
    Checks whether the current Ray intersects a BoundingSphere.
  </summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">Distance at which the ray intersects the BoundingSphere or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.ToString">
      <summary>
    Returns a System.String that represents the current Ray.
  </summary>
      <returns>System.String representation of the current Ray.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Ray">
      <summary>Defines a ray.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of Rectangle.</summary>
      <param name="x">The x-coordinate of the rectangle.</param>
      <param name="y">The y-coordinate of the rectangle.</param>
      <param name="width">Width of the rectangle.</param>
      <param name="height">Height of the rectangle.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.Height">
      <summary>Specifies the height of the rectangle.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.Width">
      <summary>Specifies the width of the rectangle.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.X">
      <summary>Specifies the x-coordinate of the rectangle.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.Y">
      <summary>Specifies the y-coordinate of the rectangle.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point)">
      <summary>
    Determines whether this Rectangle contains a specified Point.
  </summary>
      <param name="value">The Point to evaluate.</param>
      <returns>true if the specified Point is contained within this Rectangle; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle)">
      <summary>
    Determines whether this Rectangle entirely contains a specified Rectangle.
  </summary>
      <param name="value">The Rectangle to evaluate.</param>
      <returns>true if this Rectangle entirely contains the specified Rectangle; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)">
      <summary>
    Determines whether this Rectangle entirely contains a specified Rectangle.
  </summary>
      <param name="value">The Rectangle to evaluate.</param>
      <param name="result">On exit, is true if this Rectangle entirely contains the specified Rectangle, or false if not.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point@,System.Boolean@)">
      <summary>
    Determines whether this Rectangle contains a specified Point.
  </summary>
      <param name="value">The Point to evaluate.</param>
      <param name="result">true if the specified Point is contained within this Rectangle; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(System.Int32,System.Int32)">
      <summary>
    Determines whether this Rectangle contains a specified point represented by its x- and y-coordinates.
  </summary>
      <param name="x">The x-coordinate of the specified point.</param>
      <param name="y">The y-coordinate of the specified point.</param>
      <returns>true if the specified point is contained within this Rectangle; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.op_Equality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Compares two rectangles for equality.</summary>
      <param name="a">Source rectangle.</param>
      <param name="b">Source rectangle.</param>
      <returns>true if the rectangles are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Equals(Microsoft.Xna.Framework.Rectangle)">
      <summary>
    Determines whether the specified System.Object is equal to the Rectangle.
  </summary>
      <param name="other">The System.Object to compare with the current Rectangle.</param>
      <returns>true if the specified System.Object is equal to the current Rectangle; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.op_Inequality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Compares two rectangles for inequality.</summary>
      <param name="a">Source rectangle.</param>
      <param name="b">Source rectangle.</param>
      <returns>true if the rectangles are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Inflate(System.Int32,System.Int32)">
      <summary>Pushes the edges of the Rectangle out by the horizontal and vertical values specified.</summary>
      <param name="horizontalAmount">Value to push the sides out by.</param>
      <param name="verticalAmount">Value to push the top and bottom out by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle)">
      <summary>
    Determines whether a specified Rectangle intersects with this Rectangle.
  </summary>
      <param name="value">The Rectangle to evaluate.</param>
      <returns>true if the specified Rectangle intersects with this one; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)">
      <summary>
    Determines whether a specified Rectangle intersects with this Rectangle.
  </summary>
      <param name="value">The Rectangle to evaluate</param>
      <param name="result">true if the specified Rectangle intersects with this one; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.</summary>
      <param name="value1">The first Rectangle to compare.</param>
      <param name="value2">The second Rectangle to compare.</param>
      <returns>The area where the two parameters overlap.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)">
      <summary>
	  Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.
  </summary>
      <param name="value1">The first Rectangle to compare.</param>
      <param name="value2">The second Rectangle to compare.</param>
      <param name="result">The area where the two first parameters overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Point)">
      <summary>Changes the position of the Rectangle.</summary>
      <param name="amount">The values to adjust the position of the Rectangle by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(System.Int32,System.Int32)">
      <summary>Changes the position of the Rectangle.</summary>
      <param name="offsetX">Change in the x-position.</param>
      <param name="offsetY">Change in the y-position.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Creates a new Rectangle that exactly contains two other rectangles.</summary>
      <param name="value1">The first Rectangle to contain.</param>
      <param name="value2">The second Rectangle to contain.</param>
      <returns>The union of the two Rectangle parameters.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)">
      <summary>
		Creates a new Rectangle that exactly contains two other rectangles.
	</summary>
      <param name="value1">The first Rectangle to contain.</param>
      <param name="value2">The second Rectangle to contain.</param>
      <param name="result">The Rectangle that must be the union of the first two rectangles.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Bottom">
      <summary>Returns the y-coordinate of the bottom of the rectangle.</summary>
      <returns>The y-coordinate of the bottom of the rectangle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Center">
      <summary>Gets the Point that specifies the center of the rectangle.</summary>
      <returns>The center of the rectangle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Empty">
      <summary>Returns a Rectangle with all of its values set to zero.</summary>
      <returns>An empty Rectangle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.IsEmpty">
      <summary>Gets a value that indicates whether the Rectangle is empty.</summary>
      <returns>true if the rectangle is empty, otherwise false.
	  </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Left">
      <summary>Returns the x-coordinate of the left side of the rectangle.</summary>
      <returns>The x-coordinate of the left side of the rectangle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Location">
      <summary>Gets or sets the upper-left value of the Rectangle.</summary>
      <returns>The new upper-left corner of the Rectangle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Right">
      <summary>Returns the x-coordinate of the right side of the rectangle.</summary>
      <returns>The x-coordinate of the right side of the rectangle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Top">
      <summary>Returns the y-coordinate of the top of the rectangle.</summary>
      <returns>The y-coordinate of the top of the rectangle.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Rectangle">
      <summary>Defines a rectangle.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single)">
      <summary>Creates a new instance of Vector2.</summary>
      <param name="value">Value to initialize both components to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of Vector2.</summary>
      <param name="x">Initial value for the x-component of the vector.</param>
      <param name="y">Initial value for the y-component of the vector.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector2.X">
      <summary>Gets or sets the x-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector2.Y">
      <summary>Gets or sets the y-component of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Sum of the source vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">Sum of the source vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Sum of the source vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a Vector2 containing the 2D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 2D triangle.</summary>
      <param name="value1">A Vector2 containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector2 containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector2 containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
      <param name="result">The 2D Cartesian coordinates of the specified point are placed in this Vector2 on exit.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
      <summary>Returns a Vector2 containing the 2D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 2D triangle.</summary>
      <param name="value1">A Vector2 containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector2 containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector2 containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
      <returns>A new Vector2 containing the 2D Cartesian coordinates of the specified point.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">A vector that is the result of the Catmull-Rom interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <param name="result">The clamped value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The distance between the vectors squared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The distance between the source vectors squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The distance between the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Distance between the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <param name="result">The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <param name="result">The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
      <returns>The result of dividing the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <returns>The result of the division.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
      <returns>The result of dividing the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <returns>The source vector divided by b.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
      <summary>Calculates the dot product of two vectors and writes the result to a user-specified variable. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The dot product of the two vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Equality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Tests vectors for equality.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>true if the vectors are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Equals(Microsoft.Xna.Framework.Vector2)">
      <summary>
    Determines whether the specified System.Object is equal to the Vector2.
  </summary>
      <param name="other">The System.Object to compare with the current Vector2.</param>
      <returns>true if the specified System.Object is equal to the current Vector2; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.GetHashCode">
      <summary>Gets the hash code of the vector object.</summary>
      <returns>Hash code of the vector object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <returns>The result of the Hermite spline interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">The result of the Hermite spline interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Inequality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Tests vectors for inequality.</summary>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
      <returns>Returns true if the vectors are not equal,  false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.LengthSquared">
      <summary>Calculates the length of the vector squared.</summary>
      <returns>The length of the vector squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Length">
      <summary>Calculates the length of the vector.</summary>
      <returns>Length of the vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
      <returns>The linear interpolation of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
      <param name="result">The result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The maximized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The minimized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <returns>Vector pointing in the opposite direction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <param name="result">Vector pointing in the opposite direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2)">
      <summary>Creates a unit vector from the specified vector.  The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
      <param name="value">Source Vector2.</param>
      <returns>The created unit vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Creates a unit vector from the specified vector, writing the result to a user-specified variable.  The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
      <param name="value">Source vector.</param>
      <param name="result">Normalized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Normalize">
      <summary>Turns the current vector into a unit vector.  The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Determines the reflect vector of the given vector and normal.</summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of vector.</param>
      <param name="result">The created reflect vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Determines the reflect vector of the given vector and normal.</summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of vector.</param>
      <returns>Resulting reflect vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <returns>Interpolated value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <param name="result">The interpolated value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">source vector.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])">
      <summary>
    Transforms an array of Vector2 vector normals by a specified Matrix.
  </summary>
      <param name="sourceArray">The array of vector normals to transform.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">An existing array into which the transformed vector normals are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
      <summary>
    Transforms a specified range in an array of Vector2 vector normals by a specified Matrix and places the results in a specified range in a destination array.
  </summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
      <param name="matrix">The Matrix to apply.</param>
      <param name="destinationArray">The destination array into which the resulting Vector2s are written.</param>
      <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
      <param name="length">The number of vector normals to be transformed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 2D vector normal by a matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed normal.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Transforms a vector normal by a matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
      <param name="result">The Vector2 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])">
      <summary>Transforms an array of Vector2s by a specified Matrix.</summary>
      <param name="sourceArray">The array of Vector2s to transform.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">An existing array into which the transformed Vector2s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a single Vector2, or the vector normal (x, y, 0, 0), by a specified Quaternion rotation.</summary>
      <param name="value">The vector to rotate.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <returns>Returns a new Vector2 containing the result of the rotation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
      <summary>
    Transforms a specified range in an array of Vector2s by a specified Matrix and places the results in a specified range in a destination array.
  </summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
      <param name="matrix">The Matrix to transform by.</param>
      <param name="destinationArray">The destination array into which the resulting Vector2s will be written.</param>
      <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
      <param name="length">The number of Vector2s to be transformed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[])">
      <summary>
    Transforms an array of Vector2s by a specified Quaternion.
  </summary>
      <param name="sourceArray">The array of Vector2s to transform.</param>
      <param name="rotation">The transform Matrix to use.</param>
      <param name="destinationArray">An existing array into which the transformed Vector2s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms the vector (x, y, 0, 1) by the specified matrix.</summary>
      <param name="position">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)">
      <summary>
    Transforms a Vector2 by the given Matrix.
  </summary>
      <param name="position">The source Vector2.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">The Vector2 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2@)">
      <summary>
    Transforms a Vector2, or the vector normal (x, y, 0, 0), by a specified Quaternion rotation.
  </summary>
      <param name="value">The vector to rotate.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">An existing Vector2 filled in with the result of the rotation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
      <summary>
    Transforms a specified range in an array of Vector2s by a specified Quaternion and places the results in a specified range in a destination array.
  </summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">The destination array into which the resulting Vector2s are written.</param>
      <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
      <param name="length">The number of Vector2s to be transformed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <returns>Vector pointing in the opposite direction.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.One">
      <summary>Returns a Vector2 with both of its components set to one.</summary>
      <returns>Vector2 with both of its components set to one.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.UnitX">
      <summary>Returns the unit vector for the x-axis.</summary>
      <returns>The unit vector for the x-axis.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.UnitY">
      <summary>Returns the unit vector for the y-axis.</summary>
      <returns>The unit vector for the y-axis.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.Zero">
      <summary>Returns a Vector2 with all of its components set to zero.</summary>
      <returns>A Vector2  with all of its components set to zero.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector2">
      <summary>Defines a vector with two components.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single)">
      <summary>Creates a new instance of Vector3.</summary>
      <param name="value">Value to initialize each component to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Initializes a new instance of Vector3.</summary>
      <param name="value">A vector containing the values to initialize x and y components with.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Vector3.</summary>
      <param name="x">Initial value for the x-component of the vector.</param>
      <param name="y">Initial value for the y-component of the vector.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.X">
      <summary>Gets or sets the x-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.Y">
      <summary>Gets or sets the y-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.Z">
      <summary>Gets or sets the z-component of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Addition(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Sum of the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">Sum of the source vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Sum of the source vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a Vector3 containing the 3D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 3D triangle.</summary>
      <param name="value1">A Vector3 containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector3 containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector3 containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
      <param name="result">The 3D Cartesian coordinates of the specified point are placed in this Vector3 on exit.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>Returns a Vector3 containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.</summary>
      <param name="value1">A Vector3 containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector3 containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector3 containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
      <returns>A new Vector3 containing the 3D Cartesian coordinates of the specified point.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">A vector that is the result of the Catmull-Rom interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <param name="result">The clamped value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Calculates the cross product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <param name="result">The cross product of the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the cross product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <returns>Cross product of the source vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The distance between the two vectors squared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The distance between the source vectors squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The distance between the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Distance between the source vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <param name="result">The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <returns>The source vector divided by b.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <param name="result">The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
      <returns>The result of dividing the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value">Source vector.</param>
      <param name="divider">The divisor.</param>
      <returns>The source vector divided by div.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
      <returns>The result of dividing the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>
    Calculates the dot product of two vectors and writes the result to a user-specified variable.  If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <param name="result">The dot product of the two vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
    Calculates the dot product of two vectors.  If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Equality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Tests vectors for equality.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>true if the vectors are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Equals(Microsoft.Xna.Framework.Vector3)">
      <summary>
    Determines whether the specified System.Object is equal to the Vector3.
  </summary>
      <param name="other">The Vector3 to compare with the current Vector3.</param>
      <returns>true if the specified Vector3 is equal to the current Vector3; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.GetHashCode">
      <summary>Gets the hash code of the vector object.</summary>
      <returns>Hash code of the vector object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <returns>The result of the Hermite spline interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">The result of the Hermite spline interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Inequality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Tests vectors for inequality.</summary>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
      <returns>true if the vectors are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.LengthSquared">
      <summary>Calculates the length of the vector squared.</summary>
      <returns>The length of the vector squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Length">
      <summary>Calculates the length of the vector.</summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
      <param name="result">The result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
      <returns>The linear interpolation of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The maximized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The minimized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <param name="result">Vector pointing in the opposite direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <returns>Vector pointing in the opposite direction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Creates a unit vector from the specified vector, writing the result to a user-specified variable.  The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
      <param name="value">Source vector.</param>
      <param name="result">The normalized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a unit vector from the specified vector.  The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
      <param name="value">The source Vector3.</param>
      <returns>The created unit vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Normalize">
      <summary>Turns the current vector into a unit vector.  The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns the reflection of a vector off a surface that has the specified normal. Reference page contains code sample.</summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of the surface.</param>
      <param name="result">The reflected vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns the reflection of a vector off a surface that has the specified normal. Reference page contains code sample.</summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of the surface.</param>
      <returns>The reflected vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Weighting value.</param>
      <param name="result">The interpolated value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <returns>Interpolated value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Subtraction(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 3D vector normal by a matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed vector normal.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Transforms a vector normal by a matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">The Vector3 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of 3D vector normals by a specified Matrix and writes the results to a specified range in a destination array.</summary>
      <param name="sourceArray">The source array of Vector3 normals.</param>
      <param name="sourceIndex">The starting index in the source array.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">The destination Vector3 array.</param>
      <param name="destinationIndex">The starting index in the destination array.</param>
      <param name="length">The number of vectors to transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])">
      <summary>Transforms an array of 3D vector normals by a specified Matrix.</summary>
      <param name="sourceArray">The array of Vector3 normals to transform.</param>
      <param name="matrix">The transform matrix to apply.</param>
      <param name="destinationArray">An existing Vector3 array into which the results of the transforms are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
    Transforms a Vector3 by a specified Quaternion rotation.
  </summary>
      <param name="value">The Vector3 to rotate.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">An existing Vector3 filled in with the results of the rotation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 3D vector by the given matrix.</summary>
      <param name="position">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
      <summary>
    Transforms a Vector3 by a specified Quaternion rotation.
  </summary>
      <param name="value">The Vector3 to rotate.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <returns>Returns a new Vector3 that results from the rotation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
    Transforms a Vector3 by the given Matrix.
  </summary>
      <param name="position">The source Vector3.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">The transformed vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
      <summary>
    Applies a specified Quaternion rotation to a specified range of an array of Vector3s 
    and writes the results into a specified range of a destination array.
  </summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index in the source array at which to start.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">The existing destination array.</param>
      <param name="destinationIndex">The index in the destination array at which to start.</param>
      <param name="length">The number of Vector3s to transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
      <summary>
    Applies a specified transform Matrix to a specified range of an array of Vector3s
    and writes the results into a specified range of a destination array.
  </summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index in the source array at which to start.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">The existing destination array.</param>
      <param name="destinationIndex">The index in the destination array at which to start.</param>
      <param name="length">The number of Vector3s to transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[])">
      <summary>
    Transforms a source array of Vector3s by a specified Quaternion rotation and writes the results to an existing destination array.
  </summary>
      <param name="sourceArray">The source array.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">An existing destination array into which the transformed Vector3s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])">
      <summary>Transforms a source array of Vector3s by a specified Matrix and writes the results to an existing destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">An existing destination array into which the transformed Vector3s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <returns>Vector pointing in the opposite direction.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Backward">
      <summary>Returns a unit Vector3 designating backward in a right-handed coordinate system (0, 0, 1).</summary>
      <returns>
      A unit Vector3 pointing backward.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Down">
      <summary>Returns a unit Vector3 designating down (0, −1, 0).</summary>
      <returns>
      A unit Vector3 pointing down.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Forward">
      <summary>Returns a unit Vector3 designating forward in a right-handed coordinate system(0, 0, −1).</summary>
      <returns>
      A unit Vector3 pointing forward.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Left">
      <summary>Returns a unit Vector3 designating left (−1, 0, 0).</summary>
      <returns>
      A unit Vector3 pointing left.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.One">
      <summary>Returns a Vector3 with ones in all of its components.</summary>
      <returns>
        a Vector3 with ones in all of its components.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Right">
      <summary>Returns a unit Vector3 pointing to the right (1, 0, 0).</summary>
      <returns>A unit Vector3 pointing to the right.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitX">
      <summary>Returns the x unit Vector3 (1, 0, 0).</summary>
      <returns>Returns the x unit Vector3 .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitY">
      <summary>
    Returns the y unit Vector3 (0, 1, 0).
  </summary>
      <returns>
        Returns the y unit Vector3.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitZ">
      <summary>
    Returns the z unit Vector3 (0, 0, 1).
  </summary>
      <returns>
        Returns the z unit Vector3.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Up">
      <summary>Returns a unit vector designating up (0, 1, 0).</summary>
      <returns>
        A unit Vector3  pointing up.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Zero">
      <summary>Returns a Vector3 with all of its components set to zero.</summary>
      <returns>
        A Vector3 with all of its components set to zero.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector3">
      <summary>Defines a vector with three components.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(System.Single)">
      <summary>Creates a new instance of Vector4.</summary>
      <param name="value">Value to initialize each component to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Initializes a new instance of Vector4.</summary>
      <param name="value">A vector containing the values to initialize x, y, and z components with.</param>
      <param name="w">Initial value for the w-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Vector4.</summary>
      <param name="x">Initial value for the x-component of the vector.</param>
      <param name="y">Initial value for the y-component of the vector.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
      <param name="w">Initial value for the w-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
      <summary>Initializes a new instance of Vector4.</summary>
      <param name="value">A vector containing the values to initialize x and y components with.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
      <param name="w">Initial value for the w-component of the vector.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.W">
      <summary>Gets or sets the w-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.X">
      <summary>Gets or sets the x-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.Y">
      <summary>Gets or sets the y-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.Z">
      <summary>Gets or sets the z-component of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Addition(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Sum of the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Add(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Sum of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Add(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">Sum of the source vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Barycentric(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a Vector4 containing the 4D Cartesian coordinates of a point specified in Barycentric (areal) coordinates relative to a 4D triangle.</summary>
      <param name="value1">A Vector4 containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector4 containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector4 containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
      <param name="result">The 4D Cartesian coordinates of the specified point are placed in this Vector4 on exit.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Barycentric(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single,System.Single)">
      <summary>Returns a Vector4 containing the 4D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 4D triangle.</summary>
      <param name="value1">A Vector4 containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector4 containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector4 containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
      <returns>A new Vector4 containing the 4D Cartesian coordinates of the specified point.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.CatmullRom(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">A vector that is the result of the Catmull-Rom interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.CatmullRom(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Clamp(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <param name="result">The clamped value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Clamp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.DistanceSquared(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The distance between the source vectors squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.DistanceSquared(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The distance between the two vectors squared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Distance(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Distance between the source vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Distance(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The distance between the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
      <returns>The result of dividing the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <returns>The source vector divided by b.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <param name="result">The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <param name="result">The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Division(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
      <returns>The result of dividing the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Division(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <returns>The source vector divided by div.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Dot(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the dot product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Dot(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the dot product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <param name="result">The dot product of the two vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Equality(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Tests vectors for equality.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>true if the vectors are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Equals(Microsoft.Xna.Framework.Vector4)">
      <summary>
    Determines whether the specified System.Object is equal to the Vector4.
  </summary>
      <param name="other">The Vector4 to compare with the current Vector4.</param>
      <returns>true if the specified Vector4 is equal to the current Vector4; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.GetHashCode">
      <summary>Gets the hash code of this object.</summary>
      <returns>Hash code of the vector object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Hermite(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">The result of the Hermite spline interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Hermite(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <returns>The result of the Hermite spline interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Inequality(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Tests vectors for inequality.</summary>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
      <returns>true if the vectors are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.LengthSquared">
      <summary>Calculates the length of the vector squared.</summary>
      <returns>The length of the vector squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Length">
      <summary>Calculates the length of the vector.</summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
      <param name="result">The result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
      <returns>The linear interpolation of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Max(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Max(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The maximized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Min(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Min(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The minimized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Multiplies a vector by a scalar.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Multiplies a vector by a scalar.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies a vector by a scalar.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value1">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Negate(Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <returns>Vector pointing in the opposite direction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Negate(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <param name="result">Vector pointing in the opposite direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Normalize(Microsoft.Xna.Framework.Vector4)">
      <summary>Creates a unit vector from the specified vector.</summary>
      <param name="vector">The source Vector4.</param>
      <returns>The created unit vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Normalize(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a normalized version of the specified vector.</summary>
      <param name="vector">Source vector.</param>
      <param name="result">The normalized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Normalize">
      <summary>Turns the current vector into a unit vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.SmoothStep(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">The interpolated value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.SmoothStep(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <returns>Interpolated value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Subtraction(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Subtract(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Subtract(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">The result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Transforms a Vector3 by the given Matrix.
  </summary>
      <param name="position">The source Vector3.</param>
      <param name="matrix">The transformation Matrix.</param>
      <returns>The Vector4 resulting from the transformation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Transforms a Vector4 by the specified Matrix.
  </summary>
      <param name="vector">The source Vector4.</param>
      <param name="matrix">The transformation Matrix.</param>
      <returns>The transformed Vector4.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)">
      <summary>
    Transforms a Vector2 by a specified Quaternion into a Vector4.
  </summary>
      <param name="value">The Vector2 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <returns>
        Returns the Vector4 resulting from the transformation.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
      <summary>
    Transforms a Vector2 by the given Matrix.
  </summary>
      <param name="position">The source Vector2.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
      <summary>
    Transforms a Vector3 by a specified Quaternion into a Vector4.
  </summary>
      <param name="value">The Vector3 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <returns>The Vector4 resulting from the transformation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a Vector4 by a specified Quaternion.</summary>
      <param name="value">The Vector4 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <returns>The Vector4 resulting from the transformation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
      <summary>
    Transforms a Vector3 by the given Matrix.
  </summary>
      <param name="position">The source Vector3.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4[])">
      <summary>Transforms an array of Vector4s by a specified Quaternion.</summary>
      <param name="sourceArray">The array of Vector4s to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">The existing destination array into which the transformed Vector4s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of Vector4s by a specified Quaternion into a specified range in a destination array.</summary>
      <param name="sourceArray">The array of Vector4s containing the range to transform.</param>
      <param name="sourceIndex">The index in the source array of the first Vector4 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">The existing destination array of Vector4s into which to write the results.</param>
      <param name="destinationIndex">The index in the destination array of the first result Vector4 to write.</param>
      <param name="length">The number of Vector4s to transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of Vector4s by a specified Matrix into a specified range in a destination array.</summary>
      <param name="sourceArray">The array of Vector4s containing the range to transform.</param>
      <param name="sourceIndex">The index in the source array of the first Vector4 to transform.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">The existing destination array of Vector4s into which to write the results.</param>
      <param name="destinationIndex">The index in the destination array of the first result Vector4 to write.</param>
      <param name="length">The number of Vector4s to transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
      <summary>
    Transforms a Vector2 by a specified Quaternion into a Vector4.
  </summary>
      <param name="value">The Vector2 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4[])">
      <summary>Transforms an array of Vector4s by a specified Matrix.</summary>
      <param name="sourceArray">The array of Vector4s to transform.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">The existing destination array into which the transformed Vector4s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
      <summary>
    Transforms a Vector3 by a specified Quaternion into a Vector4.
  </summary>
      <param name="value">The Vector3 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Transforms a Vector2 by the given Matrix.
  </summary>
      <param name="position">The source Vector2.</param>
      <param name="matrix">The transformation Matrix.</param>
      <returns>The transformed Vector4.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
      <summary>
    Transforms a Vector4 by the given Matrix.
  </summary>
      <param name="vector">The source Vector4.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a Vector4 by a specified Quaternion.</summary>
      <param name="value">The Vector4 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_UnaryNegation(Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <returns>Vector pointing in the opposite direction.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.One">
      <summary>Returns a Vector4 with all of its components set to one.</summary>
      <returns>
        A Vector4 with all of its components set to one.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitW">
      <summary>Returns the Vector4 (0, 0, 0, 1). </summary>
      <returns>
        The Vector4 (0, 0, 0, 1).
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitX">
      <summary>
    Returns the Vector4 (1, 0, 0, 0).
  </summary>
      <returns>
        The Vector4 (1, 0, 0, 0).
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitY">
      <summary>
    Returns the Vector4 (0, 1, 0, 0).
  </summary>
      <returns>
        The Vector4 (0, 1, 0, 0).
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitZ">
      <summary>
    Returns the Vector4 (0, 0, 1, 0).
  </summary>
      <returns>
        The Vector4 (0, 0, 1, 0).
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.Zero">
      <summary>
    Returns a Vector4 with all of its components set to zero.
  </summary>
      <returns>
        A Vector4 with all of its components set to zero.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector4">
      <summary>Defines a vector with four components.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.BatteryChargeStatus">
      <summary>Indicates battery charge status.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BatteryChargeStatus.Charging" documentation_ignore="1">
      <summary>Indicates a battery is charging.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BatteryChargeStatus.Critical" documentation_ignore="1">
      <summary>Indicates a critically low level of battery charge.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BatteryChargeStatus.High" documentation_ignore="1">
      <summary>Indicates a high level of battery charge.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BatteryChargeStatus.Low" documentation_ignore="1">
      <summary>Indicates a low level of battery charge.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BatteryChargeStatus.NoSystemBattery" documentation_ignore="1">
      <summary>Indicates that no battery is present.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BatteryChargeStatus.Unknown" documentation_ignore="1">
      <summary>Indicates an unknown battery condition.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.ContainmentType">
      <summary>Indicates the extent to which bounding volumes intersect or contain one another.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.ContainmentType.Contains" documentation_ignore="1">
      <summary>Indicates that one bounding volume completely contains the other.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.ContainmentType.Disjoint" documentation_ignore="1">
      <summary>Indicates there is no overlap between the bounding volumes.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.ContainmentType.Intersects" documentation_ignore="1">
      <summary>Indicates that the bounding volumes partially overlap.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveContinuity">
      <summary>Defines the continuity of CurveKeys on a Curve.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveContinuity.Smooth" documentation_ignore="1">
      <summary>Interpolation can be used between this CurveKey and the next.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveContinuity.Step" documentation_ignore="1">
      <summary>Interpolation cannot be used between this CurveKey and the next. Specifying a position between the two points returns this point.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveLoopType">
      <summary>Defines how the value of a Curve will be determined for positions before the first point on the Curve or after the last point on the Curve.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.Constant" documentation_ignore="1">
      <summary>The Curve will evaluate to its first key for positions before the first point in the Curve and to the last key for positions after the last point.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.Cycle" documentation_ignore="1">
      <summary>Positions specified past the ends of the curve will wrap around to the opposite side of the Curve.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.CycleOffset" documentation_ignore="1">
      <summary>Positions specified past the ends of the curve will wrap around to the opposite side of the Curve.
      The value will be offset by the difference between the values of the first and last CurveKey multiplied by the number of times the position wraps around.
      If the position is before the first point in the Curve, the difference will be subtracted from its value; otherwise, the difference will be added.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.Linear" documentation_ignore="1">
      <summary>Linear interpolation will be performed to determine the value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.Oscillate" documentation_ignore="1">
      <summary>Positions specified past the ends of the Curve act as an offset from the same side of the Curve toward the opposite side.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveTangent">
      <summary>Specifies different tangent types to be calculated for CurveKey points in a Curve.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveTangent.Flat" documentation_ignore="1">
      <summary>A Flat tangent always has a value equal to zero.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveTangent.Linear" documentation_ignore="1">
      <summary>A Linear tangent at a CurveKey is equal to the difference 
          between its CurveKey.Value and the Value of the preceding or succeeding CurveKey.For example, in Curve MyCurve, where i is greater than zero and 
          (i + 1) is less than the total number of CurveKeys in 
          MyCurve, the linear CurveKey.TangentIn of MyCurve.Keys[i] is equal to:  ( MyCurve.Keys[i].Value - MyCurve.Keys[i - 1].Value )Similarly, the linear CurveKey.TangentOut is equal to:  ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i].Value.)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveTangent.Smooth" documentation_ignore="1">
      <summary>A Smooth tangent smooths the inflection between a CurveKey.TangentIn and CurveKey.TangentOut by taking into account the values of both neighbors of the CurveKey.The smooth CurveKey.TangentIn of MyCurve.Keys[i] is equal to:  ( ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i - 1].Value ) * 
    ( ( MyCurve.Keys[i].Position - MyCurve.Keys[i - 1].Position ) /
      ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i-1].Position ) ) )Similarly, the smooth CurveKey.TangentOut is equal to:  ( ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i - 1].Value ) *
    ( ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i].Position ) /
      ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i - 1].Position ) ) )</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.PlaneIntersectionType">
      <summary>Describes the intersection between a plane and a bounding volume.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Back" documentation_ignore="1">
      <summary>There is no intersection, and the bounding volume is in the negative half-space of the Plane.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Front" documentation_ignore="1">
      <summary>There is no intersection, and the bounding volume is in the positive half-space of the Plane.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting" documentation_ignore="1">
      <summary>The Plane is intersected.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.PlayerIndex">
      <summary>Specifies the game controller associated with a player.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlayerIndex.One" documentation_ignore="1">
      <summary>The first controller.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlayerIndex.Two" documentation_ignore="1">
      <summary>The second controller.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlayerIndex.Three" documentation_ignore="1">
      <summary>The third controller.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlayerIndex.Four" documentation_ignore="1">
      <summary>The fourth controller.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.PowerLineStatus">
      <summary>Indicates the status of the system powerline.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PowerLineStatus.Offline" documentation_ignore="1">
      <summary>The system is offline.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PowerLineStatus.Online" documentation_ignore="1">
      <summary>The system is online.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PowerLineStatus.Unknown" documentation_ignore="1">
      <summary>The power status of the system is unknown.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.FriendCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.FriendCollection.Finalize">
      <summary>Allows this object to free resources and perform other cleanup operations before garbage collection reclaims the object. </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendCollection.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.FriendCollection">
      <summary>Represents the complete friends list of a local gamer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.FriendRequestReceivedFrom">
      <summary>Gets whether the local gamer who requested the friends list has received a friend request from this gamer.</summary>
      <returns>true if the local gamer who requested the friends list has received a friend request from this gamer; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.FriendRequestSentTo">
      <summary>
    Gets whether the local gamer who requested the friends list has sent a friend request to this gamer.
  </summary>
      <returns>true if the local gamer who requested the friends list has sent a friend request to this gamer; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.HasVoice">
      <summary>Gets whether this friend currently has voice capability.</summary>
      <returns>true if this friend currently has voice capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.InviteAccepted">
      <summary>
    Gets whether this friend has accepted an invitation from the local gamer who requested the friends list.
  </summary>
      <returns>true if this friend has accepted an invitation from the local gamer who requested the friends list; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.InviteReceivedFrom">
      <summary>
    Gets whether the local gamer who requested the friends list has received an invitation from this friend.
  </summary>
      <returns>true if the local gamer who requested the friends list has received an invitation from this friend; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.InviteRejected">
      <summary>
    Gets whether this friend has rejected an invitation from the local gamer who requested the friends list.
  </summary>
      <returns>true if this friend has rejected an invitation from the local gamer who requested the friends list; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.InviteSentTo">
      <summary>
    Gets whether the local gamer who requested the friends list has sent an invitation to this friend.
  </summary>
      <returns>true if the local gamer who requested the friends list has sent an invitation to this friend; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.IsAway">
      <summary>Gets whether this friend is currently away from the computer or console.</summary>
      <returns>true if this friend is currently away from the computer or console; false otherwise. 
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.IsBusy">
      <summary>Gets whether this friend is currently busy.</summary>
      <returns>true if this friend is currently busy; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.IsJoinable">
      <summary>Gets whether this friend is currently in a public session that can be joined.</summary>
      <returns>true if this friend is currently in a public session that can be joined; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.IsOnline">
      <summary>Gets whether this friend is currently online.</summary>
      <returns>true if this friend is currently online; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.IsPlaying">
      <summary>Gets whether this friend is currently playing a game.</summary>
      <returns>true if this friend is currently playing a game; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.FriendGamer.Presence">
      <summary>
    Gets a title-defined presence string describing what this friend is currently doing.
  </summary>
      <returns>Title-defined presence string describing what this friend is currently doing.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.FriendGamer">
      <summary>Provides the presence information of a friend of the local gamer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.AccelerateWithButtons">
      <summary>Gets whether the gamer prefers to use controller buttons to accelerate in racing games.
  </summary>
      <returns>true if the gamer prefers to use controller buttons to accelerate in racing games; false otherwise. If false, use triggers for acceleration.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.AutoAim">
      <summary>
    Gets whether the title should automatically correct the gamer's aim.
  </summary>
      <returns>true if the title should automatically correct the gamer's aim; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.AutoCenter">
      <summary>Gets whether the title should automatically center the view when the gamer moves.</summary>
      <returns>true if the title should automatically center the view when the gamer moves; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.BrakeWithButtons">
      <summary>Gets whether the gamer prefers to use controller buttons to brake in racing games.
  </summary>
      <returns>true if the gamer prefers to use controller buttons to brake in racing games; false otherwise.  If false, use the triggers for braking.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.ControllerSensitivity">
      <summary>Gets the preferred controller sensitivity setting for this gamer.</summary>
      <returns>The preferred controller sensitivity setting for this gamer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.GameDifficulty">
      <summary>Gets the preferred difficulty setting for this gamer.</summary>
      <returns>The preferred difficulty setting for this gamer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.InvertYAxis">
      <summary>Gets whether the gamer prefers to invert the y-axis input of the controller.</summary>
      <returns>true if the gamer prefers to invert the y-axis input of the controller; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.ManualTransmission">
      <summary>Gets whether the gamer prefers to drive a manual shift transmission in racing games.</summary>
      <returns>true if the gamer prefers to drive a manual shift transmission in racing games; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.MoveWithRightThumbStick">
      <summary>Gets whether the gamer prefers to move using the right thumbstick.</summary>
      <returns>true if the gamer prefers to move using the right thumbstick; false otherwise.  If this value is false, use the left thumbstick for player movement.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.PrimaryColor">
      <summary>Gets the preferred color for the player character.</summary>
      <returns>The preferred color for the player character.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.RacingCameraAngle">
      <summary>Gets the gamer's preferred camera angle for racing games.</summary>
      <returns>The gamer's preferred camera angle for racing games.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GameDefaults.SecondaryColor">
      <summary>Gets a secondary color selection for the player character.</summary>
      <returns>A secondary color selection for the player character.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GameDefaults">
      <summary>Describes a gamer's preferred settings.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Gamer.BeginGetProfile(System.AsyncCallback,System.Object)">
      <summary>Starts an asynchronous profile read operation.</summary>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
      <returns>An System.IAsyncResult used to track the progress of the method. Call Gamer.EndGetProfile to access these results.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Gamer.EndGetProfile(System.IAsyncResult)">
      <summary>Ends an asynchronous profile read operation.</summary>
      <param name="result">An System.IAsyncResult  used to track the progress of the operation.</param>
      <returns>The profile data for this gamer.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Gamer.GetProfile">
      <summary>Reads profile data for this gamer.</summary>
      <returns>The profile data for this gamer.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Gamer.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Gamer.Gamertag">
      <summary>Gets the gamertag string.</summary>
      <returns>Name of the gamertag.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Gamer.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Gamer.SignedInGamers">
      <summary>Represents a collection of all gamers on the local system.</summary>
      <returns>Collection of current gamers on the local system.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Gamer.Tag">
      <summary>
    Gets or sets a custom object which can be used to attach arbitrary user defined data to the gamer.</summary>
      <returns>A custom object used to attach arbitrary user defined data to the gamer.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.Gamer">
      <summary>
    Abstract base class for types that represent game players (profiles that have an
      associated gamertag). The concrete types SignedInGamer and Framework.Net.NetworkGamer derive from this.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GetEnumerator">
      <summary>Returns a strongly typed Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GamerCollectionEnumerator that can iterate through a GamerCollection`1.</summary>
      <returns>The Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GamerCollectionEnumerator.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.System.Collections.Generic.IEnumerable&lt;Microsoft.Xna.Framework.GamerServices.Gamer&gt;.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the collection.</summary>
      <returns>Enumerator that can iterate through the collection.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerCollection`1">
      <summary>Represents a collection of gamers. This collection cannot be modified and is updated automatically during the call to GamerServicesDispatcher.Update.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GamerCollectionEnumerator.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GamerCollectionEnumerator.MoveNext">
      <summary>
    Advances the enumerator to the next element of the GamerCollection`1.
  </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GamerCollectionEnumerator.System.Collections.IEnumerator.Reset">
      <summary>
    Sets the enumerator to its initial position, which is before the first element in the GamerCollection`1.
  </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GamerCollectionEnumerator.Current">
      <summary>Gets the current element in the GamerCollection`1.</summary>
      <returns>
        The current element in the GamerCollection`1.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GamerCollectionEnumerator.System.Collections.IEnumerator.Current">
      <summary>
    Gets the current element in the GamerCollection`1 as a System.Object.
  </summary>
      <returns>
        The current element in the GamerCollection`1 as a System.Object.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerCollection`1.GamerCollectionEnumerator">
      <summary>
    Provides the ability to iterate through the gamers in an GamerCollection`1.
  </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPresence.PresenceMode">
      <summary>
    Gets or sets the current presence mode for this gamer. Reference page contains links to related code samples.</summary>
      <returns>The current presence mode for this gamer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPresence.PresenceValue">
      <summary>Gets or sets a custom presence value.</summary>
      <returns>A custom presence value, which indicates a stage, score, or level to display as a part of the presence string.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerPresence">
      <summary>Provides properties to set the rich presence state for a locally signed-in gamer profile. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException(System.String,System.Exception) with the specified error message and inner exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The inner exception related to this exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException.#ctor(System.String)">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException(System.String) with the specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException.#ctor">
      <summary>Creates an instance of Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException">
      <summary>Thrown if a gamer services or multiplayer API is called without a valid, signed-in profile.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPrivileges.AllowCommunication">
      <summary>Checks whether this gamer is allowed to send and receive communications using voice, text, messaging, or game invites.</summary>
      <returns>true if this gamer is allowed to send and receive communications using voice, text, messaging, or game invites; false otherwise.
       </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPrivileges.AllowOnlineSessions">
      <summary>Checks whether this gamer is allowed to play in online multiplayer sessions.</summary>
      <returns>true if this gamer is allowed to play in online multiplayer sessions; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPrivileges.AllowProfileViewing">
      <summary>Checks whether this gamer is allowed to view the profiles of other gamers.</summary>
      <returns>true if this gamer is allowed to view the profiles of other gamers; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPrivileges.AllowPurchaseContent">
      <summary>Checks whether this gamer is allowed to purchase content from LIVE Marketplace.</summary>
      <returns>true if this gamer is allowed to purchase content from LIVE Marketplace; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPrivileges.AllowTradeContent">
      <summary>Checks whether this gamer is allowed to trade content with other gamers.</summary>
      <returns>true if this gamer is allowed to trade content with other gamers; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerPrivileges.AllowUserCreatedContent">
      <summary>Checks whether this gamer is allowed to access user content that was created by other gamers.</summary>
      <returns>true if this gamer is allowed to access user content that was created by other gamers; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerPrivileges">
      <summary>Describes what operations a gamer is allowed to perform.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerProfile.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.GamerPicture">
      <summary>Gets the gamer picture, which will be 64 pixels by 64 pixels.</summary>
      <returns>The gamer picture, which will be 64 pixels by 64 pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.GamerScore">
      <summary>Gets the GamerScore of this gamer.</summary>
      <returns>The GamerScore of this gamer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.GamerZone">
      <summary>Gets the GamerZone setting.
</summary>
      <returns>
      The GamerZone setting.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.Motto">
      <summary>Gets the gamer motto string.</summary>
      <returns>The gamer motto.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.Region">
      <summary>Gets the region of this gamer.</summary>
      <returns>The region of this gamer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.Reputation">
      <summary>Gets the gamer reputation, as a number of stars ranging 0 to 5.</summary>
      <returns>The gamer reputation, representing a number of stars ranging 0 to 5.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.TitlesPlayed">
      <summary>Gets the number of titles this gamer has played.</summary>
      <returns>The number of titles this gamer has played.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerProfile.TotalAchievements">
      <summary>Gets the total number of achievements this gamer has obtained.</summary>
      <returns>The total number of achievements this gamer has obtained.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerProfile">
      <summary>
     Profile settings describing information about a gamer such as their motto, reputation, and gamer picture. This data is accessible for both locally signed in profiles and remote gamers that you are playing with in a multiplayer session.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerServicesComponent.#ctor(Microsoft.Xna.Framework.Game)">
      <summary>Creates a new GamerServicesComponent.</summary>
      <param name="game">The game that will be associated with this component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerServicesComponent.Initialize">
      <summary>Initializes the GamerServicesDispatcher.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerServicesComponent.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
    Updates the GamerServicesDispatcher.
  </summary>
      <param name="gameTime">The game timing state.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerServicesComponent">
      <summary>Wraps the functionality of the GamerServicesDispatcher.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.InstallingTitleUpdate">
      <summary>
    Notifies the game when a Games for Windows - LIVE title update is being installed.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.Initialize(System.IServiceProvider)">
      <summary>Initializes gamer services functionality for the game. Reference page contains links to related code samples.</summary>
      <param name="serviceProvider">The service provider to be used when locating additional services services. For example, IGraphicsDeviceService.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.Update">
      <summary>Updates the status of gamer services and raises related events. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.IsInitialized">
      <summary>Determines if Initialize has been called.</summary>
      <returns>true if gamer services have been initialized; false otherwise. 
</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.WindowHandle">
      <summary>Gets or sets the handle to the underlying game window.</summary>
      <returns>Handle to a window.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher">
      <summary>Implements the Windows-specific portion of a Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher class. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of GamerServicesNotAvailableException with the specified error message and the inner exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The inner exception related to this exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException.#ctor(System.String)">
      <summary>Initializes a new instance of GamerServicesNotAvailableException with the specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException.#ctor">
      <summary>Creates an empty instance of GamerServicesNotAvailableException.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException">
      <summary>Thrown if the gamer services system cannot be successfully initialized.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector(System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins the process for displaying the storage device selector user interface, specifying the size of the data to be written to the storage device.</summary>
      <param name="sizeInBytes">Size, in bytes, of the data to write to the storage device.</param>
      <param name="directoryCount">Number of directories to write to the storage device.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="state">A user-created object uniquely identifying this request.</param>
      <returns>
        An System.IAsyncResult used to track the progress of the method.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector(System.AsyncCallback,System.Object)">
      <summary>Begins the process for displaying the storage device selector user interface.</summary>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="state">A user-created object uniquely identifying this request.</param>
      <returns>An System.IAsyncResult used to track the progress of the method.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector(Microsoft.Xna.Framework.PlayerIndex,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins the process for displaying the storage device selector user interface, specifying the index of the player to be shown the user interface, as well as the size of the data to be written to the storage device.</summary>
      <param name="player">Index of the player being shown the user interface display. On Windows, the only valid option is PlayerIndex.One.</param>
      <param name="sizeInBytes">Size, in bytes, of the data to write to the storage device.</param>
      <param name="directoryCount">Number of directories to write to the storage device.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="state">A user-created object uniquely identifying this request.</param>
      <returns>
        An System.IAsyncResult used to track the progress of the method.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector(Microsoft.Xna.Framework.PlayerIndex,System.AsyncCallback,System.Object)">
      <summary>Begins the process for displaying the storage device selector user interface, specifying the index of the player to be shown the user interface.</summary>
      <param name="player">Index of the player being shown the user interface display. On Windows, the only valid option is PlayerIndex.One.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="state">A user-created object uniquely identifying this request.</param>
      <returns>An System.IAsyncResult used to track the progress of the method.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.EndShowStorageDeviceSelector(System.IAsyncResult)">
      <summary>Ends the display of the storage selector user interface.</summary>
      <param name="result">The System.IAsyncResult returned from BeginShowStorageDeviceSelector.</param>
      <returns>Storage device selected by the gamer.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.Guide.Show">
      <summary>Shows the guide user interface.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Guide.IsTrialMode">
      <summary>Determines whether the game is running currently in limited trial mode. Reference page contains links to related code samples.</summary>
      <returns>true if the game is running currently in limited trial mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Guide.IsVisible">
      <summary>Determines whether a Guide user interface screen is active.</summary>
      <returns>true if a user interface screen is displayed; false otherwise. It is not possible to bring up another Guide user interface screen, if IsVisible is true.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.Guide.SimulateTrialMode">
      <summary>Allows titles to simulate trial mode restrictions when testing using the Development configuration. Reference page contains links to related code samples.</summary>
      <returns>true to simulate trial mode restrictions in a Development configuration; false otherwise.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.Guide">
      <summary>Provides access to the Guide user interface.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException(System.String,System.Exception) with the specified error message and related inner exception.</summary>
      <param name="message">A message describing the error.</param>
      <param name="innerException">The inner exception related to this exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException.#ctor(System.String)">
      <summary>Initializes an instance of Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException(System.String) with the specified error message.</summary>
      <param name="message">A message describing the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException.#ctor">
      <summary>
    Initializes an empty instance of Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException">
      <summary>Thrown if an attmept is made to display a component of the Guide user interface when a Guide component is already displayed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.SignedInEventArgs.#ctor(Microsoft.Xna.Framework.GamerServices.SignedInGamer)">
      <summary>Creates a new instance of SignedInEventArgs.</summary>
      <param name="gamer">The gamer that just signed in.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInEventArgs.Gamer">
      <summary>Gets the gamer that just signed in.</summary>
      <returns>The gamer that just signed in.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.SignedInEventArgs">
      <summary>Represents the arguments passed to a SignedInGamer.SignedIn event.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GamerServices.SignedInGamer.SignedIn">
      <summary>Occurs when a new gamer signs into the local system.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GamerServices.SignedInGamer.SignedOut">
      <summary>Occurs when a gamer signs out on the local system.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.SignedInGamer.GetFriends">
      <summary>Reads the friends list of this local gamer. This includes both the gamertags of the friends and their current presence information.
  </summary>
      <returns>The friends of this local gamer.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.SignedInGamer.IsFriend(Microsoft.Xna.Framework.GamerServices.Gamer)">
      <summary>Queries whether the specified gamer is a friend of this local gamer.</summary>
      <param name="gamer">The gamer to query.</param>
      <returns>true if the specified gamer is a friend of the local gamer; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamer.GameDefaults">
      <summary>Describes a gamer's preferred settings.</summary>
      <returns>The gamer's preferred settings.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamer.IsGuest">
      <summary>Determines whether the gamer is the guest of an Xbox LIVE–enabled profile.</summary>
      <returns>true if the gamer is a guest; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamer.IsSignedInToLive">
      <summary>Determines whether the gamer has an Xbox LIVE–enabled profile.</summary>
      <returns>true if the gamer is able to sign in to Xbox LIVE; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamer.PlayerIndex">
      <summary>Gets the index of the gamer.</summary>
      <returns>Index of the gamer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamer.Presence">
      <summary>Gets an object that may be used to set the rich presence state for this gamer. Reference page contains links to related code samples.</summary>
      <returns>An object that may be used to set the rich presence state for this gamer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamer.Privileges">
      <summary>Describes what operations a gamer is allowed to perform.</summary>
      <returns>The operations a gamer is allowed to perform.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.SignedInGamer">
      <summary>Represents a gamer (a profile that has an associated gamertag) on the local system.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedInGamerCollection.Item(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Gets a specific local gamer based on that player's Framework.PlayerIndex on the local system.</summary>
      <param name="index">The Framework.PlayerIndex of the local gamer to retrieve.</param>
      <returns>
        The local gamer at the specified Framework.PlayerIndex.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.SignedInGamerCollection">
      <summary>Represents a collection of gamers on the local system.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs.#ctor(Microsoft.Xna.Framework.GamerServices.SignedInGamer)">
      <summary>
    Creates a new instance of SignedOutEventArgs.
  </summary>
      <param name="gamer">The gamer that just signed out.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs.Gamer">
      <summary>Gets the gamer that just signed out.</summary>
      <returns>The gamer that just signed out.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs">
      <summary>Represents the arguments passed to a SignedInGamer.SignedOut event.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.ControllerSensitivity">
      <summary>Indicates how sensitive this gamer prefers controller input to be.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.ControllerSensitivity.High" documentation_ignore="1">
      <summary>Highly sensitive controller input is preferred.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.ControllerSensitivity.Low" documentation_ignore="1">
      <summary>Below average sensitivity is preferred.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.ControllerSensitivity.Medium" documentation_ignore="1">
      <summary>Average controller sensitivity is preferred.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GameDifficulty">
      <summary>Indicates how difficult this gamer likes things to be.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GameDifficulty.Easy" documentation_ignore="1">
      <summary>Below-average difficulty.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GameDifficulty.Hard" documentation_ignore="1">
      <summary>Above-average difficulty.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GameDifficulty.Normal" documentation_ignore="1">
      <summary>Average difficulty.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode">
      <summary>
    Settings defining the status string that will appear when you view a friend through the Xbox LIVE Guide or on Xbox.com. This option is set using the GamerPresence.PresenceMode property.
  </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.ArcadeMode" documentation_ignore="1">
      <summary>Arcade Mode</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.AtMenu" documentation_ignore="1">
      <summary>At Menu</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.BattlingBoss" documentation_ignore="1">
      <summary>Battling Boss</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.CampaignMode" documentation_ignore="1">
      <summary>Campaign Mode</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.ChallengeMode" documentation_ignore="1">
      <summary>Challenge Mode</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.ConfiguringSettings" documentation_ignore="1">
      <summary>Configuring Settings</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.CoOpLevel" documentation_ignore="1">
      <summary>Co-Op: Level. Includes a numeric value specified with GamerPresence.PresenceValue.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.CoOpStage" documentation_ignore="1">
      <summary>Co-Op: Stage. Includes a numeric value specified with GamerPresence.PresenceValue.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.CornflowerBlue" documentation_ignore="1">
      <summary>Cornflower Blue</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.CustomizingPlayer" documentation_ignore="1">
      <summary>Customizing Player</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.DifficultyEasy" documentation_ignore="1">
      <summary>Difficulty: Easy</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.DifficultyExtreme" documentation_ignore="1">
      <summary>Difficulty: Extreme</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.DifficultyHard" documentation_ignore="1">
      <summary>Difficulty: Hard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.DifficultyMedium" documentation_ignore="1">
      <summary>Difficulty: Medium</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.EditingLevel" documentation_ignore="1">
      <summary>Editing Level</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.ExplorationMode" documentation_ignore="1">
      <summary>Exploration Mode</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.FoundSecret" documentation_ignore="1">
      <summary>Found Secret</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.FreePlay" documentation_ignore="1">
      <summary>Free Play</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.GameOver" documentation_ignore="1">
      <summary>Game Over</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.InCombat" documentation_ignore="1">
      <summary>In Combat</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.InGameStore" documentation_ignore="1">
      <summary>In Game Store</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.Level" documentation_ignore="1">
      <summary>Level. Includes a numeric value specified with GamerPresence.PresenceValue.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.LocalCoOp" documentation_ignore="1">
      <summary>Local Co-Op</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.LocalVersus" documentation_ignore="1">
      <summary>Local Versus</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.LookingForGames" documentation_ignore="1">
      <summary>Looking For Games</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.Losing" documentation_ignore="1">
      <summary>Losing</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.Multiplayer" documentation_ignore="1">
      <summary>Multiplayer</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.NearlyFinished" documentation_ignore="1">
      <summary>Nearly Finished</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.None" documentation_ignore="1">
      <summary>No Presence String Displayed</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.OnARoll" documentation_ignore="1">
      <summary>On a Roll</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.OnlineCoOp" documentation_ignore="1">
      <summary>Online Co-Op</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.OnlineVersus" documentation_ignore="1">
      <summary>Online Versus</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.Outnumbered" documentation_ignore="1">
      <summary>Outnumbered</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.Paused" documentation_ignore="1">
      <summary>Paused</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.PlayingMinigame" documentation_ignore="1">
      <summary>Playing Minigame</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.PlayingWithFriends" documentation_ignore="1">
      <summary>Playing With Friends</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.PracticeMode" documentation_ignore="1">
      <summary>Practice Mode</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.PuzzleMode" documentation_ignore="1">
      <summary>Puzzle Mode</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.ScenarioMode" documentation_ignore="1">
      <summary>Scenario Mode</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.Score" documentation_ignore="1">
      <summary>Score. Includes a numeric value specified with GamerPresence.PresenceValue.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.ScoreIsTied" documentation_ignore="1">
      <summary>Score is Tied</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.SettingUpMatch" documentation_ignore="1">
      <summary>Setting Up Match</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.SinglePlayer" documentation_ignore="1">
      <summary>Single Player</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.Stage" documentation_ignore="1">
      <summary>Stage.  Includes a numeric value specified with GamerPresence.PresenceValue.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.StartingGame" documentation_ignore="1">
      <summary>Starting Game</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.StoryMode" documentation_ignore="1">
      <summary>Story Mode</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.StuckOnAHardBit" documentation_ignore="1">
      <summary>Stuck on a Hard Bit</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.SurvivalMode" documentation_ignore="1">
      <summary>Survival Mode</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.TimeAttack" documentation_ignore="1">
      <summary>Time Attack</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.TryingForRecord" documentation_ignore="1">
      <summary>Trying For Record</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.TutorialMode" documentation_ignore="1">
      <summary>Tutorial Mode</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.VersusComputer" documentation_ignore="1">
      <summary>Versus Computer</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.VersusScore" documentation_ignore="1">
      <summary>Versus: Score. Includes a numeric value specified with GamerPresence.PresenceValue.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.WaitingForPlayers" documentation_ignore="1">
      <summary>Waiting For Players</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.WaitingInLobby" documentation_ignore="1">
      <summary>Waiting In Lobby</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.WastingTime" documentation_ignore="1">
      <summary>Wasting Time</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.WatchingCredits" documentation_ignore="1">
      <summary>Watching Credits</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.WatchingCutscene" documentation_ignore="1">
      <summary>Watching Cutscene</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.Winning" documentation_ignore="1">
      <summary>Winning</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPresenceMode.WonTheGame" documentation_ignore="1">
      <summary>Won the Game</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting">
      <summary>Describes the conditions in which a privilege is available.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting.Blocked" documentation_ignore="1">
      <summary>This privilege is not available for the current gamer profile.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting.Everyone" documentation_ignore="1">
      <summary>This privilege is available for the current gamer profile.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting.FriendsOnly" documentation_ignore="1">
      <summary>This privilege is only available for friends of the current gamer profile. Use the SignedInGamer.IsFriend method to check which gamers are friends.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.GamerZone">
      <summary>This style of social gaming preferred by this Xbox Live member.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerZone.Family" documentation_ignore="1">
      <summary>Family-friendly game play.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerZone.Pro" documentation_ignore="1">
      <summary>Competitive game play.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerZone.Recreation" documentation_ignore="1">
      <summary>Non-competitive game play.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerZone.Underground" documentation_ignore="1">
      <summary>Alternative approach to game play.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.GamerZone.Unknown" documentation_ignore="1">
      <summary>Unknown.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.MessageBoxIcon">
      <summary>Defines the different icons for a message box.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.MessageBoxIcon.Alert" documentation_ignore="1">
      <summary>Displays the Alert icon.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.MessageBoxIcon.Error" documentation_ignore="1">
      <summary>Displays the Error icon.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.MessageBoxIcon.None" documentation_ignore="1">
      <summary>No icon is displayed.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.MessageBoxIcon.Warning" documentation_ignore="1">
      <summary>Displays the Warning icon.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.NotificationPosition">
      <summary>Determines where notifications appear on the screen.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.NotificationPosition.BottomCenter" documentation_ignore="1">
      <summary>Positions the message box at the bottom of the screen and centered.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.NotificationPosition.BottomLeft" documentation_ignore="1">
      <summary>Positions the message box at the bottom-left of the screen.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.NotificationPosition.BottomRight" documentation_ignore="1">
      <summary>Positions the message box at the bottom-right of the screen.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.NotificationPosition.Center" documentation_ignore="1">
      <summary>Positions the message box at the center of the screen.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.NotificationPosition.CenterLeft" documentation_ignore="1">
      <summary>Positions the message box at the center of the screen and left-aligned.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.NotificationPosition.CenterRight" documentation_ignore="1">
      <summary>Positions the message box at the center of the screen and right-aligned.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.NotificationPosition.TopCenter" documentation_ignore="1">
      <summary>Positions the message box at the top of the screen and centered.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.NotificationPosition.TopLeft" documentation_ignore="1">
      <summary>Positions the message box at the top-left of the screen.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.NotificationPosition.TopRight" documentation_ignore="1">
      <summary>Positions the message box at the top-right of the screen.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GamerServices.RacingCameraAngle">
      <summary>Indicates which camera angle this gamer prefers to use in racing games.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.RacingCameraAngle.Back" documentation_ignore="1">
      <summary>Traditional third-person camera view from behind the car.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.RacingCameraAngle.Front" documentation_ignore="1">
      <summary>Camera view from in front of the car.  The car itself is not visible.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.GamerServices.RacingCameraAngle.Inside" documentation_ignore="1">
      <summary>Camera view from inside the car, looking through the windscreen.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(Microsoft.Xna.Framework.Graphics.Color,System.Byte)">
      <summary>
	  Initializes a new instance of Color.
  </summary>
      <param name="rgb">A Color specifying the red, green, and blue components of a color.</param>
      <param name="a">The alpha component of a color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
		Initializes a new instance of Color.
	</summary>
      <param name="r">The red component of a color, between 0 and 1.0.</param>
      <param name="g">The green component of a color, between 0 and 1.0.</param>
      <param name="b">The blue component of a color, between 0 and 1.0.</param>
      <param name="a">The alpha component of a color, between 0 and 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="vector">A Framework.Vector4 containing the Red, Green, Blue, and Alpha values defining a color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(Microsoft.Xna.Framework.Graphics.Color,System.Single)">
      <summary>
	  Initializes a new instance of Color.
  </summary>
      <param name="rgb">A Color specifying the red, green, and blue components of a color.</param>
      <param name="a">The alpha component of a color, between 0 and 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="r">The red component of a color, between 0 and 1.0.</param>
      <param name="g">The green component of a color, between 0 and 1.0.</param>
      <param name="b">The blue component of a color, between 0 and 1.0.</param>
      <param name="a">The alpha component of a color, between 0 and 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="r">The red component of a color, between 0 and 1.0.</param>
      <param name="g">The green component of a color, between 0 and 1.0.</param>
      <param name="b">The blue component of a color, between 0 and 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(System.Single,System.Single,System.Single)">
      <summary>
	  Initializes a new instance of Color.
  </summary>
      <param name="r">The red component of a color, between 0 and 1.0.</param>
      <param name="g">The green component of a color, between 0 and 1.0.</param>
      <param name="b">The blue component of a color, between 0 and 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="vector">A Framework.Vector3 containing the Red, Green, and Blue values defining a color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.op_Equality(Microsoft.Xna.Framework.Graphics.Color,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.Equals(Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The Color to compare with the current Color.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The System.Object to compare with the current Color.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.op_Inequality(Microsoft.Xna.Framework.Graphics.Color,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.Lerp(Microsoft.Xna.Framework.Graphics.Color,Microsoft.Xna.Framework.Graphics.Color,System.Single)">
      <summary>Linearly interpolates between two colors.</summary>
      <param name="value1">Source Color.</param>
      <param name="value2">Source Color.</param>
      <param name="amount">A value between 0 and 1.0 indicating the weight of value2.</param>
      <returns>The interpolated Color.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Returns the packed value of the current color as a Framework.Vector4.</summary>
      <param name="vector">The packed value of the current color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.ToString">
      <summary>Gets a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.ToVector3">
      <summary>
    Returns the current color as a Framework.Vector3.
  </summary>
      <returns>The current color represented as a Framework.Vector3.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.ToVector4">
      <summary>Returns the current color as a Framework.Vector4.</summary>
      <returns>The current color.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.AliceBlue">
      <summary>Gets a system-defined color with the value R:240 G:248 B:255 A:255.</summary>
      <returns>A system-defined color with the value R:240 G:248 B:255 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.AntiqueWhite">
      <summary>Gets a system-defined color with the value R:250 G:235 B:215 A:255.</summary>
      <returns>A system-defined color with the value R:250 G:235 B:215 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Aquamarine">
      <summary>Gets a system-defined color with the value R:127 G:255 B:212 A:255.</summary>
      <returns>A system-defined color with the value R:127 G:255 B:212 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Aqua">
      <summary>Gets a system-defined color with the value R:0 G:255 B:255 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:255 B:255 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Azure">
      <summary>Gets a system-defined color with the value R:240 G:255 B:255 A:255.</summary>
      <returns>A system-defined color with the value R:240 G:255 B:255 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.A">
      <summary>Gets or sets the alpha component value. </summary>
      <returns>The alpha component value of this Color.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Beige">
      <summary>Gets a system-defined color with the value R:245 G:245 B:220 A:255.</summary>
      <returns>A system-defined color with the value R:245 G:245 B:220 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Bisque">
      <summary>Gets a system-defined color with the value R:255 G:228 B:196 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:228 B:196 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Black">
      <summary>Gets a system-defined color with the value R:0 G:0 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:0 B:0 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.BlanchedAlmond">
      <summary>Gets a system-defined color with the value R:255 G:235 B:205 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:235 B:205 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.BlueViolet">
      <summary>Gets a system-defined color with the value R:138 G:43 B:226 A:255.</summary>
      <returns>A system-defined color with the value R:138 G:43 B:226 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Blue">
      <summary>Gets a system-defined color with the value R:0 G:0 B:255 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:0 B:255 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Brown">
      <summary>Gets a system-defined color with the value R:165 G:42 B:42 A:255.</summary>
      <returns>A system-defined color with the value R:165 G:42 B:42 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.BurlyWood">
      <summary>Gets a system-defined color with the value R:222 G:184 B:135 A:255.</summary>
      <returns>A system-defined color with the value R:222 G:184 B:135 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.B">
      <summary>
    Gets or sets the blue component value of this Color.
  </summary>
      <returns>
        The blue component value of this Color.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.CadetBlue">
      <summary>Gets a system-defined color with the value R:95 G:158 B:160 A:255.</summary>
      <returns>A system-defined color with the value R:95 G:158 B:160 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Chartreuse">
      <summary>Gets a system-defined color with the value R:127 G:255 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:127 G:255 B:0 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Chocolate">
      <summary>Gets a system-defined color with the value R:210 G:105 B:30 A:255.</summary>
      <returns>A system-defined color with the value R:210 G:105 B:30 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Coral">
      <summary>Gets a system-defined color with the value R:255 G:127 B:80 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:127 B:80 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.CornflowerBlue">
      <summary>Gets a system-defined color with the value R:100 G:149 B:237 A:255.</summary>
      <returns>A system-defined color with the value R:100 G:149 B:237 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Cornsilk">
      <summary>Gets a system-defined color with the value R:255 G:248 B:220 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:248 B:220 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Crimson">
      <summary>Gets a system-defined color with the value R:220 G:20 B:60 A:255.</summary>
      <returns>A system-defined color with the value R:220 G:20 B:60 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Cyan">
      <summary>Gets a system-defined color with the value R:0 G:255 B:255 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:255 B:255 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkBlue">
      <summary>Gets a system-defined color with the value R:0 G:0 B:139 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:0 B:139 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkCyan">
      <summary>Gets a system-defined color with the value R:0 G:139 B:139 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:139 B:139 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkGoldenrod">
      <summary>Gets a system-defined color with the value R:184 G:134 B:11 A:255.</summary>
      <returns>A system-defined color with the value R:184 G:134 B:11 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkGray">
      <summary>Gets a system-defined color with the value R:169 G:169 B:169 A:255.</summary>
      <returns>A system-defined color with the value R:169 G:169 B:169 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkGreen">
      <summary>Gets a system-defined color with the value R:0 G:100 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:100 B:0 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkKhaki">
      <summary>Gets a system-defined color with the value R:189 G:183 B:107 A:255.</summary>
      <returns>A system-defined color with the value R:189 G:183 B:107 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkMagenta">
      <summary>Gets a system-defined color with the value R:139 G:0 B:139 A:255.</summary>
      <returns>A system-defined color with the value R:139 G:0 B:139 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkOliveGreen">
      <summary>Gets a system-defined color with the value R:85 G:107 B:47 A:255.</summary>
      <returns>A system-defined color with the value R:85 G:107 B:47 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkOrange">
      <summary>Gets a system-defined color with the value R:255 G:140 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:140 B:0 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkOrchid">
      <summary>Gets a system-defined color with the value R:153 G:50 B:204 A:255.</summary>
      <returns>A system-defined color with the value R:153 G:50 B:204 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkRed">
      <summary>Gets a system-defined color with the value R:139 G:0 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:139 G:0 B:0 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkSalmon">
      <summary>Gets a system-defined color with the value R:233 G:150 B:122 A:255.</summary>
      <returns>A system-defined color with the value R:233 G:150 B:122 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkSeaGreen">
      <summary>Gets a system-defined color with the value R:143 G:188 B:139 A:255.</summary>
      <returns>A system-defined color with the value R:143 G:188 B:139 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkSlateBlue">
      <summary>Gets a system-defined color with the value R:72 G:61 B:139 A:255.</summary>
      <returns>A system-defined color with the value R:72 G:61 B:139 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkSlateGray">
      <summary>Gets a system-defined color with the value R:47 G:79 B:79 A:255.</summary>
      <returns>A system-defined color with the value R:47 G:79 B:79 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkTurquoise">
      <summary>Gets a system-defined color with the value R:0 G:206 B:209 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:206 B:209 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkViolet">
      <summary>Gets a system-defined color with the value R:148 G:0 B:211 A:255.</summary>
      <returns>A system-defined color with the value R:148 G:0 B:211 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DeepPink">
      <summary>Gets a system-defined color with the value R:255 G:20 B:147 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:20 B:147 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DeepSkyBlue">
      <summary>Gets a system-defined color with the value R:0 G:191 B:255 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:191 B:255 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DimGray">
      <summary>Gets a system-defined color with the value R:105 G:105 B:105 A:255.</summary>
      <returns>A system-defined color with the value R:105 G:105 B:105 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DodgerBlue">
      <summary>Gets a system-defined color with the value R:30 G:144 B:255 A:255.</summary>
      <returns>A system-defined color with the value R:30 G:144 B:255 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Firebrick">
      <summary>Gets a system-defined color with the value R:178 G:34 B:34 A:255.</summary>
      <returns>A system-defined color with the value R:178 G:34 B:34 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.FloralWhite">
      <summary>Gets a system-defined color with the value R:255 G:250 B:240 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:250 B:240 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.ForestGreen">
      <summary>Gets a system-defined color with the value R:34 G:139 B:34 A:255.</summary>
      <returns>A system-defined color with the value R:34 G:139 B:34 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Fuchsia">
      <summary>Gets a system-defined color with the value R:255 G:0 B:255 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:0 B:255 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Gainsboro">
      <summary>Gets a system-defined color with the value R:220 G:220 B:220 A:255.</summary>
      <returns>A system-defined color with the value R:220 G:220 B:220 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.GhostWhite">
      <summary>Gets a system-defined color with the value R:248 G:248 B:255 A:255.</summary>
      <returns>A system-defined color with the value R:248 G:248 B:255 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Goldenrod">
      <summary>Gets a system-defined color with the value R:218 G:165 B:32 A:255.</summary>
      <returns>A system-defined color with the value R:218 G:165 B:32 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Gold">
      <summary>Gets a system-defined color with the value R:255 G:215 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:215 B:0 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Gray">
      <summary>Gets a system-defined color with the value R:128 G:128 B:128 A:255.</summary>
      <returns>A system-defined color with the value R:128 G:128 B:128 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.GreenYellow">
      <summary>Gets a system-defined color with the value R:173 G:255 B:47 A:255.</summary>
      <returns>A system-defined color with the value R:173 G:255 B:47 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Green">
      <summary>Gets a system-defined color with the value R:0 G:128 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:128 B:0 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.G">
      <summary>Gets or sets the green component value of this Color. </summary>
      <returns>The green component value of this Color.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Honeydew">
      <summary>Gets a system-defined color with the value R:240 G:255 B:240 A:255.</summary>
      <returns>A system-defined color with the value R:240 G:255 B:240 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.HotPink">
      <summary>Gets a system-defined color with the value R:255 G:105 B:180 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:105 B:180 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.IndianRed">
      <summary>Gets a system-defined color with the value R:205 G:92 B:92 A:255.</summary>
      <returns>A system-defined color with the value R:205 G:92 B:92 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Indigo">
      <summary>Gets a system-defined color with the value R:75 G:0 B:130 A:255.</summary>
      <returns>A system-defined color with the value R:75 G:0 B:130 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Ivory">
      <summary>Gets a system-defined color with the value R:255 G:255 B:240 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:255 B:240 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Khaki">
      <summary>Gets a system-defined color with the value R:240 G:230 B:140 A:255.</summary>
      <returns>A system-defined color with the value R:240 G:230 B:140 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LavenderBlush">
      <summary>Gets a system-defined color with the value R:255 G:240 B:245 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:240 B:245 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Lavender">
      <summary>Gets a system-defined color with the value R:230 G:230 B:250 A:255.</summary>
      <returns>A system-defined color with the value R:230 G:230 B:250 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LawnGreen">
      <summary>Gets a system-defined color with the value R:124 G:252 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:124 G:252 B:0 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LemonChiffon">
      <summary>Gets a system-defined color with the value R:255 G:250 B:205 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:250 B:205 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightBlue">
      <summary>Gets a system-defined color with the value R:173 G:216 B:230 A:255.</summary>
      <returns>A system-defined color with the value R:173 G:216 B:230 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightCoral">
      <summary>Gets a system-defined color with the value R:240 G:128 B:128 A:255.</summary>
      <returns>A system-defined color with the value R:240 G:128 B:128 A:255.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightCyan">
      <summary>Gets a system-defined color with the value R:224 G:255 B:255 A:255.</summary>
      <returns>A system-defined color with the value R:224 G:255 B:255 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightGoldenrodYellow">
      <summary>Gets a system-defined color with the value R:250 G:250 B:210 A:255.</summary>
      <returns>A system-defined color with the value R:250 G:250 B:210 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightGray">
      <summary>Gets a system-defined color with the value R:211 G:211 B:211 A:255.</summary>
      <returns>A system-defined color with the value R:211 G:211 B:211 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightGreen">
      <summary>Gets a system-defined color with the value R:144 G:238 B:144 A:255.</summary>
      <returns>A system-defined color with the value R:144 G:238 B:144 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightPink">
      <summary>Gets a system-defined color with the value R:255 G:182 B:193 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:182 B:193 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSalmon">
      <summary>Gets a system-defined color with the value R:255 G:160 B:122 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:160 B:122 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSeaGreen">
      <summary>Gets a system-defined color with the value R:32 G:178 B:170 A:255.</summary>
      <returns>A system-defined color with the value R:32 G:178 B:170 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSkyBlue">
      <summary>Gets a system-defined color with the value R:135 G:206 B:250 A:255.</summary>
      <returns>A system-defined color with the value R:135 G:206 B:250 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSlateGray">
      <summary>Gets a system-defined color with the value R:119 G:136 B:153 A:255.</summary>
      <returns>A system-defined color with the value R:119 G:136 B:153 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSteelBlue">
      <summary>Gets a system-defined color with the value R:176 G:196 B:222 A:255.</summary>
      <returns>A system-defined color with the value R:176 G:196 B:222 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightYellow">
      <summary>Gets a system-defined color with the value R:255 G:255 B:224 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:255 B:224 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LimeGreen">
      <summary>Gets a system-defined color with the value R:50 G:205 B:50 A:255.</summary>
      <returns>A system-defined color with the value R:50 G:205 B:50 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Lime">
      <summary>Gets a system-defined color with the value R:0 G:255 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:255 B:0 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Linen">
      <summary>Gets a system-defined color with the value R:250 G:240 B:230 A:255.</summary>
      <returns>A system-defined color with the value R:250 G:240 B:230 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Magenta">
      <summary>Gets a system-defined color with the value R:255 G:0 B:255 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:0 B:255 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Maroon">
      <summary>Gets a system-defined color with the value R:128 G:0 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:128 G:0 B:0 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumAquamarine">
      <summary>Gets a system-defined color with the value R:102 G:205 B:170 A:255.</summary>
      <returns>A system-defined color with the value R:102 G:205 B:170 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumBlue">
      <summary>Gets a system-defined color with the value R:0 G:0 B:205 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:0 B:205 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumOrchid">
      <summary>Gets a system-defined color with the value R:186 G:85 B:211 A:255.</summary>
      <returns>A system-defined color with the value R:186 G:85 B:211 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumPurple">
      <summary>Gets a system-defined color with the value R:147 G:112 B:219 A:255.</summary>
      <returns>A system-defined color with the value R:147 G:112 B:219 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumSeaGreen">
      <summary>Gets a system-defined color with the value R:60 G:179 B:113 A:255.</summary>
      <returns>A system-defined color with the value R:60 G:179 B:113 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumSlateBlue">
      <summary>Gets a system-defined color with the value R:123 G:104 B:238 A:255.</summary>
      <returns>A system-defined color with the value R:123 G:104 B:238 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumSpringGreen">
      <summary>Gets a system-defined color with the value R:0 G:250 B:154 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:250 B:154 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumTurquoise">
      <summary>Gets a system-defined color with the value R:72 G:209 B:204 A:255.</summary>
      <returns>A system-defined color with the value R:72 G:209 B:204 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumVioletRed">
      <summary>Gets a system-defined color with the value R:199 G:21 B:133 A:255.</summary>
      <returns>A system-defined color with the value R:199 G:21 B:133 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MidnightBlue">
      <summary>Gets a system-defined color with the value R:25 G:25 B:112 A:255.</summary>
      <returns>A system-defined color with the value R:25 G:25 B:112 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MintCream">
      <summary>Gets a system-defined color with the value R:245 G:255 B:250 A:255.</summary>
      <returns>A system-defined color with the value R:245 G:255 B:250 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MistyRose">
      <summary>Gets a system-defined color with the value R:255 G:228 B:225 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:228 B:225 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Moccasin">
      <summary>Gets a system-defined color with the value R:255 G:228 B:181 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:228 B:181 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.NavajoWhite">
      <summary>Gets a system-defined color with the value R:255 G:222 B:173 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:222 B:173 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Navy">
      <summary>Gets a system-defined color R:0 G:0 B:128 A:255.</summary>
      <returns>A system-defined color R:0 G:0 B:128 A:255.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.OldLace">
      <summary>Gets a system-defined color with the value R:253 G:245 B:230 A:255.</summary>
      <returns>A system-defined color with the value R:253 G:245 B:230 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.OliveDrab">
      <summary>Gets a system-defined color with the value R:107 G:142 B:35 A:255.</summary>
      <returns>A system-defined color with the value R:107 G:142 B:35 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Olive">
      <summary>Gets a system-defined color with the value R:128 G:128 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:128 G:128 B:0 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.OrangeRed">
      <summary>Gets a system-defined color with the value R:255 G:69 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:69 B:0 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Orange">
      <summary>Gets a system-defined color with the value R:255 G:165 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:165 B:0 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Orchid">
      <summary>Gets a system-defined color with the value R:218 G:112 B:214 A:255.</summary>
      <returns>A system-defined color with the value R:218 G:112 B:214 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PackedValue">
      <summary>Gets the current color as a packed value.</summary>
      <returns>The current color.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PaleGoldenrod">
      <summary>Gets a system-defined color with the value R:238 G:232 B:170 A:255.</summary>
      <returns>A system-defined color with the value R:238 G:232 B:170 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PaleGreen">
      <summary>Gets a system-defined color with the value R:152 G:251 B:152 A:255.</summary>
      <returns>A system-defined color with the value R:152 G:251 B:152 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PaleTurquoise">
      <summary>Gets a system-defined color with the value R:175 G:238 B:238 A:255.</summary>
      <returns>A system-defined color with the value R:175 G:238 B:238 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PaleVioletRed">
      <summary>Gets a system-defined color with the value R:219 G:112 B:147 A:255.</summary>
      <returns>A system-defined color with the value R:219 G:112 B:147 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PapayaWhip">
      <summary>Gets a system-defined color with the value R:255 G:239 B:213 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:239 B:213 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PeachPuff">
      <summary>Gets a system-defined color with the value R:255 G:218 B:185 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:218 B:185 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Peru">
      <summary>Gets a system-defined color with the value R:205 G:133 B:63 A:255.</summary>
      <returns>A system-defined color with the value R:205 G:133 B:63 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Pink">
      <summary>Gets a system-defined color with the value R:255 G:192 B:203 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:192 B:203 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Plum">
      <summary>Gets a system-defined color with the value R:221 G:160 B:221 A:255.</summary>
      <returns>A system-defined color with the value R:221 G:160 B:221 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PowderBlue">
      <summary>Gets a system-defined color with the value R:176 G:224 B:230 A:255.</summary>
      <returns>A system-defined color with the value R:176 G:224 B:230 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Purple">
      <summary>Gets a system-defined color with the value R:128 G:0 B:128 A:255.</summary>
      <returns>A system-defined color with the value R:128 G:0 B:128 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Red">
      <summary>Gets a system-defined color with the value R:255 G:0 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:0 B:0 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.RosyBrown">
      <summary>Gets a system-defined color with the value R:188 G:143 B:143 A:255.</summary>
      <returns>A system-defined color with the value R:188 G:143 B:143 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.RoyalBlue">
      <summary>Gets a system-defined color with the value R:65 G:105 B:225 A:255.</summary>
      <returns>A system-defined color with the value R:65 G:105 B:225 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.R">
      <summary>Gets or sets the red component value of this Color. </summary>
      <returns>The red component value of this Color.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SaddleBrown">
      <summary>Gets a system-defined color with the value R:139 G:69 B:19 A:255.</summary>
      <returns>A system-defined color with the value R:139 G:69 B:19 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Salmon">
      <summary>Gets a system-defined color with the value R:250 G:128 B:114 A:255.</summary>
      <returns>A system-defined color with the value R:250 G:128 B:114 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SandyBrown">
      <summary>Gets a system-defined color with the value R:244 G:164 B:96 A:255.</summary>
      <returns>A system-defined color with the value R:244 G:164 B:96 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SeaGreen">
      <summary>Gets a system-defined color with the value R:46 G:139 B:87 A:255.</summary>
      <returns>A system-defined color with the value R:46 G:139 B:87 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SeaShell">
      <summary>Gets a system-defined color with the value R:255 G:245 B:238 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:245 B:238 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Sienna">
      <summary>Gets a system-defined color with the value R:160 G:82 B:45 A:255.</summary>
      <returns>A system-defined color with the value R:160 G:82 B:45 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Silver">
      <summary>Gets a system-defined color with the value R:192 G:192 B:192 A:255.</summary>
      <returns>A system-defined color with the value R:192 G:192 B:192 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SkyBlue">
      <summary>Gets a system-defined color with the value R:135 G:206 B:235 A:255.</summary>
      <returns>A system-defined color with the value R:135 G:206 B:235 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SlateBlue">
      <summary>Gets a system-defined color with the value R:106 G:90 B:205 A:255.</summary>
      <returns>A system-defined color with the value R:106 G:90 B:205 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SlateGray">
      <summary>Gets a system-defined color with the value R:112 G:128 B:144 A:255.</summary>
      <returns>A system-defined color with the value R:112 G:128 B:144 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Snow">
      <summary>Gets a system-defined color with the value R:255 G:250 B:250 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:250 B:250 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SpringGreen">
      <summary>Gets a system-defined color with the value R:0 G:255 B:127 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:255 B:127 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SteelBlue">
      <summary>Gets a system-defined color with the value R:70 G:130 B:180 A:255.</summary>
      <returns>A system-defined color with the value R:70 G:130 B:180 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Tan">
      <summary>Gets a system-defined color with the value R:210 G:180 B:140 A:255.</summary>
      <returns>A system-defined color with the value R:210 G:180 B:140 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Teal">
      <summary>Gets a system-defined color with the value R:0 G:128 B:128 A:255.</summary>
      <returns>A system-defined color with the value R:0 G:128 B:128 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Thistle">
      <summary>Gets a system-defined color with the value R:216 G:191 B:216 A:255.</summary>
      <returns>A system-defined color with the value R:216 G:191 B:216 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Tomato">
      <summary>Gets a system-defined color with the value R:255 G:99 B:71 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:99 B:71 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.TransparentBlack">
      <summary>Gets a system-defined color with the value R:0 G:0 B:0 A:0.</summary>
      <returns>A system-defined color with the value R:0 G:0 B:0 A:0. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.TransparentWhite">
      <summary>Gets a system-defined color with the value R:255 G:255 B:255 A:0.</summary>
      <returns>A system-defined color with the value R:255 G:255 B:255 A:0. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Turquoise">
      <summary>Gets a system-defined color with the value R:64 G:224 B:208 A:255.</summary>
      <returns>A system-defined color with the value R:64 G:224 B:208 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Violet">
      <summary>Gets a system-defined color with the value R:238 G:130 B:238 A:255.</summary>
      <returns>A system-defined color with the value R:238 G:130 B:238 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Wheat">
      <summary>Gets a system-defined color with the value R:245 G:222 B:179 A:255.</summary>
      <returns>A system-defined color with the value R:245 G:222 B:179 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.WhiteSmoke">
      <summary>Gets a system-defined color with the value R:245 G:245 B:245 A:255.</summary>
      <returns>A system-defined color with the value R:245 G:245 B:245 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.White">
      <summary>Gets a system-defined color with the value R:255 G:255 B:255 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:255 B:255 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.YellowGreen">
      <summary>Gets a system-defined color with the value R:154 G:205 B:50 A:255.</summary>
      <returns>A system-defined color with the value R:154 G:205 B:50 A:255. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Yellow">
      <summary>Gets a system-defined color with the value R:255 G:255 B:0 A:255.</summary>
      <returns>A system-defined color with the value R:255 G:255 B:0 A:255. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Color">
      <summary>Represents a color using Red, Green, Blue, and Alpha values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceLostException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceLostException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceLostException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceLostException">
      <summary>The exception that is thrown when the device has been lost but cannot be reset at this time. Therefore, rendering is not possible. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotResetException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotResetException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotResetException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceNotResetException">
      <summary>The exception that is thrown when the device has been lost but can be reset at this time. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
    Initializes a new instance of the DeviceNotSupportedException class with a specified error message and a reference to the inner exception that is the cause of this exception.
  </summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException.#ctor(System.String)">
      <summary>
    Initializes a new instance of the DeviceNotSupportedException class with a specified error message.
  </summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException.#ctor">
      <summary>
    Initializes a new instance of the DeviceNotSupportedException class.
  </summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException">
      <summary>The exception that is thrown when the graphics device does not support the requested capabilities. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException">
      <summary>The error that is thrown when the device is still drawing.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.op_Equality(Microsoft.Xna.Framework.Graphics.DisplayMode,Microsoft.Xna.Framework.Graphics.DisplayMode)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The System.Object to compare with the current DisplayMode.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.op_Inequality(Microsoft.Xna.Framework.Graphics.DisplayMode,Microsoft.Xna.Framework.Graphics.DisplayMode)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">The object to the left of the inequality operator.</param>
      <param name="right">The object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.AspectRatio">
      <summary>Gets the aspect ratio used by the graphics device.</summary>
      <returns>Aspect ratio of the viewport.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.Format">
      <summary>Gets a value indicating the surface format of the display mode. </summary>
      <returns>The surface format of the display mode. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.Height">
      <summary>Gets a value indicating the screen height, in pixels.  Reference page contains links to related conceptual articles.</summary>
      <returns>Screen height, in pixels. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.RefreshRate">
      <summary>Gets a value indicating the refresh rate. The value of 0 indicates an adapter default. </summary>
      <returns>Refresh rate. The value of 0 indicates an adapter default. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.TitleSafeArea">
      <summary>Returns the title safe area of the display.</summary>
      <returns>The title safe area.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.Width">
      <summary>Gets a value indicating the screen width, in pixels.  Reference page contains links to related conceptual articles.</summary>
      <returns>Screen width, in pixels. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DisplayMode">
      <summary>Describes the display mode. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.op_Equality(Microsoft.Xna.Framework.Graphics.DisplayModeCollection,Microsoft.Xna.Framework.Graphics.DisplayModeCollection)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The System.Object to compare with the current DisplayModeCollection.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.GetEnumerator">
      <summary>Gets an enumerator that can iterate through the DisplayModeCollection.</summary>
      <returns>Enumerator that can iterate through the DisplayModeCollection.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.op_Inequality(Microsoft.Xna.Framework.Graphics.DisplayModeCollection,Microsoft.Xna.Framework.Graphics.DisplayModeCollection)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">The object to the left of the inequality operator.</param>
      <param name="right">The object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Item(Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Retrieves the DisplayMode structure with the specified format.
</summary>
      <param name="format">The format of the DisplayMode to retrieve.</param>
      <returns>The DisplayMode.
    </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DisplayModeCollection">
      <summary>Manipulates a collection of DisplayMode structures.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DriverInternalErrorException">
      <summary>The exception that is thrown when an internal driver error occurs. Applications should destroy and recreate the device when receiving this error. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDepthStencilMatch(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>Tests whether a depth stencil format is compatible with a render target format in a particular display mode. Reference page contains code sample.</summary>
      <param name="deviceType">The device type.</param>
      <param name="adapterFormat">The format of the display mode into which the adapter will be placed.</param>
      <param name="renderTargetFormat">The format of the render-target surface to be tested.</param>
      <param name="depthStencilFormat">The format of the depth stencil surface to be tested.</param>
      <returns>true if the format is compatible; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceFormatConversion(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Tests a device to determine whether it supports conversion from one display format to another.</summary>
      <param name="deviceType">Type of device to check.</param>
      <param name="sourceFormat">Source adapter format.</param>
      <param name="targetFormat">Target adapter format.</param>
      <returns>true if the method succeeds; false if it fails.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceFormat(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.QueryUsages,Microsoft.Xna.Framework.Graphics.ResourceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Verifies whether a surface buffer format is available as a specified resource type and can be used as a texture, depth-stencil buffer, render target, or any combination of the three on a device representing the current adapter. Reference page contains code sample.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="adapterFormat">The format of the display mode into which the adapter will be placed.</param>
      <param name="usage">A set of options identifying the behaviors of this surface resource.</param>
      <param name="queryUsages">The type of query to issue.</param>
      <param name="resourceType">A resource type requested for use with the queried format.</param>
      <param name="checkFormat">The format of the surface identified by usage.</param>
      <returns>true if the surface format is available as the specified resource and format type; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceFormat(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.QueryUsages,Microsoft.Xna.Framework.Graphics.ResourceType,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>Verifies whether a depth buffer format is available as a specified resource type and can be used as a texture, depth-stencil buffer, render target, or any combination of the three, on a device representing the current adapter. Reference page contains code sample.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="adapterFormat">The format of the display mode into which the adapter will be placed.</param>
      <param name="usage">A set of options identifying the behaviors of this surface resource.</param>
      <param name="queryUsages">The type of query to issue.</param>
      <param name="resourceType">A resource type requested for use with the queried format.</param>
      <param name="checkFormat">The format of the depth buffer surface identified by usage.</param>
      <returns>true if the surface format is available as the specified resource and format type; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceMultiSampleType(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Boolean,Microsoft.Xna.Framework.Graphics.MultiSampleType,System.Int32@)">
      <summary>Verifies whether a multisample technique is available on a specified game machine, optionally returning the number of quality stops available for the specified technique. Reference page contains code sample.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="surfaceFormat">The format of the surface to be multisampled.</param>
      <param name="isFullScreen">true to inquire about windowed multisampling; false to inquire about full-screen multisampling.</param>
      <param name="sampleType">The multisampling technique to test.</param>
      <param name="qualityLevels">Number of quality stops available for a given multisample type; can be null if it is not necessary to return the values.</param>
      <returns>true if the technique is available; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceMultiSampleType(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Boolean,Microsoft.Xna.Framework.Graphics.MultiSampleType)">
      <summary>Verifies whether a multisample technique is available on a specified game machine. Reference page contains code sample.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="surfaceFormat">The format of the surface to be multisampled.</param>
      <param name="isFullScreen">true to inquire about windowed multisampling; false to inquire about full-screen multisampling.</param>
      <param name="sampleType">The multisampling technique to test.</param>
      <returns>true if the technique is available; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceType(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Boolean)">
      <summary>Determines whether a hardware-accelerated device type can be used on the current adapter.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="displayFormat">The format of the adapter display mode for which the device type is being checked. For example, some devices operate only in modes of 16 bits per pixel.</param>
      <param name="backBufferFormat">Format of the back buffer.  This value must be one of the render target formats. GraphicsDevice.DisplayMode can be used to obtain the current format.For windowed applications, the back-buffer format does not need to match the display-mode format if the hardware supports color conversion. The set of possible back-buffer formats is constrained, but the runtime allows any valid back-buffer format to be presented to any desktop format. Additionally, the device must be operable in desktop mode because devices typically do not operate in modes of 8 bits per pixel.Full-screen applications cannot perform color conversion.SurfaceFormat.Unknown is allowed for windowed mode.</param>
      <param name="isFullScreen">true if the device type will be used in windowed mode; false if the device type will be used in full-screen mode.</param>
      <returns>true if the method succeeds and the device can be used on this adapter; false if the method fails. If the method fails, you may check the result code returned by Manager.CheckDeviceTypeResult to determine the specific reason.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Dispose">
      <summary>
    Releases all resources used by the GraphicsAdapter class.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsAdapter,Microsoft.Xna.Framework.Graphics.GraphicsAdapter)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">The object to the left of the equality operator.</param>
      <param name="right">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Equals(System.Object)">
      <summary>
    Determines whether the specified System.Object is equal to the GraphicsAdapter.
  </summary>
      <param name="obj">The System.Object to compare with the current GraphicsAdapter.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.GetCapabilities(Microsoft.Xna.Framework.Graphics.DeviceType)">
      <summary>Returns the capabilities of a device. Reference page contains links to related code samples.</summary>
      <param name="deviceType">The device to query.</param>
      <returns>The capabilities of the specified device.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsAdapter,Microsoft.Xna.Framework.Graphics.GraphicsAdapter)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">The object to the left of the inequality operator.</param>
      <param name="right">The object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.IsDeviceTypeAvailable(Microsoft.Xna.Framework.Graphics.DeviceType)">
      <summary>Determines whether a requested device type is available.</summary>
      <param name="deviceType">The device type to request.</param>
      <returns>true if the requested device type is available; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Adapters">
      <summary>Collection of available adapters on the system.  Reference page contains links to related code samples.</summary>
      <returns>The collection of adapters.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CurrentDisplayMode">
      <summary>Gets the current display mode.</summary>
      <returns>The current display mode.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DefaultAdapter">
      <summary>Gets the default adapter. </summary>
      <returns>The default adapter.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Description">
      <summary>Retrieves a string used for presentation to the user.</summary>
      <returns>
        Description of the adapter.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DeviceIdentifier">
      <summary>Retrieves a globally unique identifier (GUID) object that can be used to check changes in the driver and chip set.</summary>
      <returns>A unique identifier for the driver and chip set pair.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DeviceId">
      <summary>
    Retrieves a value that is used to help identify a particular chip set.

  </summary>
      <returns>Value that helps identify the chip set.  The returned value may be zero if it is unknown.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DeviceName">
      <summary>Retrieves a string that contains the device name for a Microsoft Windows Graphics Device Interface (GDI).</summary>
      <returns>The name of the device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DriverDll">
      <summary>Retrieves a string that is used to present the driver name to the user.</summary>
      <returns>The driver name</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DriverVersion">
      <summary>Retrieves a value that identifies the version of the Microsoft Direct3D driver.</summary>
      <returns>The driver version.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.IsDefaultAdapter">
      <summary>Determines if this instance of GraphicsAdapter is the default adapter.</summary>
      <returns>true if this instance of GraphicsAdapter is the default adapter, false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.IsWideScreen">
      <summary>Determines if the graphics adapter is in widescreen mode.</summary>
      <returns>true if the graphics adapter is in widescreen mode; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.MonitorHandle">
      <summary>Retrieves the handle of the monitor associated with the Microsoft Direct3D object.</summary>
      <returns>The handle of the monitor.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Revision">
      <summary>Retrieves a value used to help identify the revision level of a particular chip set.</summary>
      <returns>Value used to help identify the revision level of the chip set.  This value may be zero if it is unknown.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.SubSystemId">
      <summary>Retrieves a value used to identify the subsystem.</summary>
      <returns>Value used to identify the subsystem, typically the particular board.  This value may be zero if it is unknown.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.SupportedDisplayModes">
      <summary>Returns a collection of supported display modes for the current adapter.</summary>
      <returns>
        The supported display modes for the adapter.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.VendorId">
      <summary>Retrieves a value used to identify the manufacturer.</summary>
      <returns>
        Value used to identify the manufacturer.  This value may be zero if it is unknown.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsAdapter">
      <summary>Provides methods to retrieve and manipulate graphics adapters.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsAdapter,Microsoft.Xna.Framework.Graphics.DeviceType,System.IntPtr,Microsoft.Xna.Framework.Graphics.PresentationParameters)">
      <summary>Creates a new instance of GraphicsDevice</summary>
      <param name="adapter">The display adapter.</param>
      <param name="deviceType">The desired device type.</param>
      <param name="renderWindowHandle">The focus window.</param>
      <param name="presentationParameters">The presentation parameters for the device to be created.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DeviceLost">
      <summary>Occurs when a GraphicsDevice is about to be lost (for example, immediately before a reset). Reference page contains code sample.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DeviceResetting">
      <summary>Occurs when a GraphicsDevice is resetting, allowing the application to cancel the default handling of the reset. Reference page contains code sample.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DeviceReset">
      <summary>Occurs after a GraphicsDevice is reset, allowing an application to recreate all resources.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Disposing">
      <summary>
        Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.
       Reference page contains code sample.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ResourceCreated">
      <summary>Occurs when a resource is created. </summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ResourceDestroyed">
      <summary>Occurs when a resource is destroyed. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Graphics.Color,System.Single,System.Int32,Microsoft.Xna.Framework.Rectangle[])">
      <summary>Clears a set of regions to a specified color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="options">Flags that indicate which surfaces to clear.</param>
      <param name="color">Color value to which the render target surface is cleared.</param>
      <param name="depth">New depth value to store in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2n−1, where n is the bit depth of the stencil buffer.</param>
      <param name="regions">The regions to clear.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Vector4,System.Single,System.Int32,Microsoft.Xna.Framework.Rectangle[])">
      <summary>Clears a set of regions to a specified color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="options">The surfaces to clear.</param>
      <param name="color">Color value to which the render target surface is cleared.</param>
      <param name="depth">New z value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2n−1, where n is the bit depth of the stencil buffer.</param>
      <param name="regions">The regions to clear.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Clears the viewport to a specified color.</summary>
      <param name="color">Color value to which the render target surface is cleared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Graphics.Color,System.Single,System.Int32)">
      <summary>Clears the viewport to a specified color, clears the depth buffer, and erases the stencil buffer. </summary>
      <param name="options">Flags indicating which surfaces to clear.</param>
      <param name="color">Color value to which the render target surface is cleared.</param>
      <param name="depth">New depth value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2n−1, where n is the bit depth of the stencil buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Vector4,System.Single,System.Int32)">
      <summary>Clears the viewport to a specified color, clears the depth buffer, and erases the stencil buffer. </summary>
      <param name="options">The surfaces to clear.</param>
      <param name="color">Color value to which the render target surface is cleared.</param>
      <param name="depth">New z value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2n−1, where n is the bit depth of the stencil buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.EvictManagedResources">
      <summary>Evicts all managed resources, including Microsoft Direct3D resources and those that are driver managed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetRenderTarget(System.Int32)">
      <summary>Gets a render target surface.</summary>
      <param name="renderTargetIndex">Index of the render target.</param>
      <returns>
        The render target surface of the current graphics device.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present(System.IntPtr)">
      <summary>Specifies the window target for a presentation and presents the display with the contents of the next buffer in the sequence of back buffers owned by the GraphicsDevice. Reference page contains code sample.</summary>
      <param name="overrideWindowHandle">Destination window containing the client area that is the target for this presentation.  If not specified, this is PresentationParameters.DeviceWindowHandle.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present(System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Rectangle},System.IntPtr)">
      <summary>
    Specifies the window target for a presentation and presents the display with the contents of the next buffer in the sequence of back buffers owned by the GraphicsDevice.
   Reference page contains code sample.</summary>
      <param name="sourceRectangle">The source rectangle. If null, the entire source surface is presented. If the rectangle exceeds the source surface, the rectangle is clipped to the source surface.  This parameter must be null unless the swap chain was created with SwapEffect.Copy.</param>
      <param name="destinationRectangle">The destination rectangle, in window client coordinates. If null, the entire client area is filled. If the rectangle exceeds the destination client area, the rectangle is clipped to the destination client area.  This parameter must be null unless the swap chain was created with SwapEffect.Copy.</param>
      <param name="overrideWindowHandle">Destination window containing the client area that is the target for this presentation.  If not specified, this is PresentationParameters.DeviceWindowHandle.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the GraphicsDevice. Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset(Microsoft.Xna.Framework.Graphics.PresentationParameters)">
      <summary>Resets the current GraphicsDevice with the specified PresentationParameters.</summary>
      <param name="presentationParameters">Describes the new presentation parameters. This value cannot be null.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset(Microsoft.Xna.Framework.Graphics.PresentationParameters,Microsoft.Xna.Framework.Graphics.GraphicsAdapter)">
      <summary>Resets the specified Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset(Microsoft.Xna.Framework.Graphics.PresentationParameters,Microsoft.Xna.Framework.Graphics.GraphicsAdapter) with the specified presentation parameters.</summary>
      <param name="presentationParameters">Describes the new presentation parameters. This value cannot be null.</param>
      <param name="graphicsAdapter">The graphics device being reset.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset">
      <summary>Resets the presentation parameters for the current GraphicsDevice.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ResolveBackBuffer(Microsoft.Xna.Framework.Graphics.ResolveTexture2D)">
      <summary>Copies the current back buffer contents to a texture. Reference page contains code sample.</summary>
      <param name="resolveTarget">Texture to update with the resolved back buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ResolveBackBuffer(Microsoft.Xna.Framework.Graphics.ResolveTexture2D,System.Int32)">
      <summary>Copies the contents of the back buffer at the specified index to a texture. Reference page contains code sample.</summary>
      <param name="resolveTarget">Texture to update with the resolved back buffer.</param>
      <param name="backBufferIndex">Index of the back buffer to resolve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTarget(System.Int32,Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
      <summary>Sets a new render target for this GraphicsDevice. Reference page contains code sample.</summary>
      <param name="renderTargetIndex">Index of the render target. The number of render targets supported by a GraphicsDevice is contained in GraphicsDeviceCapabilities.MaxSimultaneousRenderTargets.</param>
      <param name="renderTarget">A new render target for the device, or null to set the device render target to the back buffer of the device.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.CreationParameters">
      <summary>Retrieves the creation parameters of the GraphicsDevice.</summary>
      <returns>
        The creation parameters.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DisplayMode">
      <summary>
    Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.
   Reference page contains code sample.</summary>
      <returns>
       Data describing the display mode of the adapter (as opposed to the display mode of the GraphicsDevice, which might not be active if the GraphicsDevice does not own full-screen mode).
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GraphicsDeviceCapabilities">
      <summary>Gets the capabilities of the graphics device.</summary>
      <returns>The capabilities.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GraphicsDeviceStatus">
      <summary>Retrieves the status of the device</summary>
      <returns>The status of the device</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.PresentationParameters">
      <summary>Gets the presentation parameters associated with this graphics device.</summary>
      <returns>The presentation parameters associated with this graphics device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ScissorRectangle">
      <summary>Gets or sets the rectangle used for scissor testing.</summary>
      <returns>Defines the rendering area within the render target, if scissor testing is enabled.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Viewport">
      <summary>Gets or sets a viewport identifying the portion of the render target to receive draw calls. Reference page contains code sample.</summary>
      <returns>
        The viewport to set or get.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice">
      <summary>Performs primitive-based rendering, creates resources, handles system-level variables, adjusts gamma ramp levels, and creates shaders.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.Dispose">
      <summary>
    Releases all resources used by the GraphicsDeviceCapabilities class.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The System.Object to compare with the current GraphicsDeviceCapabilities.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AdapterOrdinalInGroup">
      <summary>
    Gets the number indicating the order in which heads are referenced by the API. 
  </summary>
      <returns>The number indicating the order in which heads are referenced by the API.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AlphaCompareCapabilities">
      <summary>Gets the alpha-test comparison capabilities.</summary>
      <returns>A GraphicsDeviceCapabilities.CompareCaps representing the alpha-test comparison capabilities of a device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CubeTextureFilterCapabilities">
      <summary>Gets texture-filtering capabilities for a cube texture.</summary>
      <returns>
        A GraphicsDeviceCapabilities.FilterCaps representing the texture-filtering capabilities for a cube texture of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCapabilities">
      <summary>Gets hardware cursor capabilties.</summary>
      <returns>
        A GraphicsDeviceCapabilities.CursorCaps representing the hardware cursor capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCapabilities">
      <summary>Gets vertex data type capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.DeclarationTypeCaps representing the vertex data type capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DepthBufferCompareCapabilities">
      <summary>Gets depth buffer comparision capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.CompareCaps representing the z-buffer comparison capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DestinationBlendCapabilities">
      <summary>Gets destination-blending capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.BlendCaps representing the destination-blending capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilities">
      <summary>Gets graphics device capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.DeviceCaps representing the graphics capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceType">
      <summary>Returns the type of the current GraphicsDevice.</summary>
      <returns>
        The type of the current GraphicsDevice.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCapabilities">
      <summary>Gets device driver capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.DriverCaps representing the driver capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ExtentsAdjust">
      <summary>
    Gets the number of pixels to adjust the extents rectangle outward to accommodate antialiasing kernels.
  </summary>
      <returns>Size of adjustment, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GuardBandBottom">
      <summary>Gets the bottom screen-space coordinate of the guard-band clipping region. </summary>
      <returns>The bottom coordinate of the guard-band clipping region.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GuardBandLeft">
      <summary>Gets the left screen-space coordinate of the guard-band clipping region. </summary>
      <returns>The left coordinate of the guard-band clipping region.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GuardBandRight">
      <summary>Gets the right coordinate of the guard-band clipping region.</summary>
      <returns>The right coordinate of the guard-band clipping region.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GuardBandTop">
      <summary>Gets the top screen-space coordinate of the guard-band clipping region.</summary>
      <returns>The top coordinate of the guard-band clipping region.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCapabilities">
      <summary>Gets line-drawing primitives capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.LineCaps representing the line-drawing primitives capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MasterAdapterOrdinal">
      <summary>Gets the master device for this subordinate.</summary>
      <returns>Number indicating the master device.  This number is taken from the same space as the adapter values.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxAnisotropy">
      <summary>
    Gets the maximum valid value for the SamplerState.MaxAnisotropy texture-stage state.
  </summary>
      <returns>
        The maximum valid value for SamplerState.MaxAnisotropy.
    </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxPixelShaderProfile">
      <summary>Returns the maximum pixel shader profile for this GraphicsDevice.
   Reference page contains links to related code samples.</summary>
      <returns>
        The maximum pixel shader profile for this GraphicsDevice.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVertexShaderProfile">
      <summary>
    Returns the maximum vertex shader profile for this GraphicsDevice.
  </summary>
      <returns>
        The maximum vertex shader profile for this GraphicsDevice.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxPixelShader30InstructionSlots">
      <summary>Gets the maximum number of pixel shader instruction slots supported.</summary>
      <returns>The maximum number of pixel shader instruction slots supported.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxPointSize">
      <summary>Gets the maximum size of a point primitive.</summary>
      <returns>
        The maximum size of a point primitive. The range is greater than or equal to 1.0f.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxPrimitiveCount">
      <summary>Gets the maximum number of primitives for each GraphicsDevice.DrawPrimitives call. </summary>
      <returns>The maximum number of primitives. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxSimultaneousRenderTargets">
      <summary>Gets the maximum number of simultaneous render targets.</summary>
      <returns>The maximum number of simultaneous render targets supported by the device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxSimultaneousTextures">
      <summary>Gets the maximum number of textures that can be simultaneously bound to the fixed-function pipeline sampler stages.</summary>
      <returns>The maximum number of textures that can be simultaneously bound to the fixed-function pipeline sampler stages.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxStreamStride">
      <summary>Gets the maximum stride.</summary>
      <returns>
        The maximum stride.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxStreams">
      <summary>Gets the maximum number of concurrent data streams.
</summary>
      <returns>The maximum number of concurrent data streams. The valid range is 1 to 16.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxTextureAspectRatio">
      <summary>Gets the maximum texture aspect ratio supported by the hardware. </summary>
      <returns>The maximum texture aspect ratio supported by the hardware, typically a power of 2.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxTextureHeight">
      <summary>Gets the maximum texture height for this device. </summary>
      <returns>The maximum texture height for this device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxTextureRepeat">
      <summary>Gets the maximum range of the integer bits of the post-normalized texture coordinates. </summary>
      <returns>The maximum range of the integer bits of the post-normalized texture coordinates.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxTextureWidth">
      <summary>Gets the maximum texture width for this device. </summary>
      <returns>The maximum texture width for this device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxUserClipPlanes">
      <summary>Gets the maximum number of user-defined clipping planes supported.</summary>
      <returns>The maximum number of user-defined clipping planes supported. This number can be 0.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVertexIndex">
      <summary>Gets the maximum size of indices supported for hardware vertex processing.</summary>
      <returns>The maximum size of indices supported for hardware vertex processing.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVertexShader30InstructionSlots">
      <summary>Gets the maximum number of vertex shader instruction slots supported.</summary>
      <returns>The maximum number of vertex shader instruction slots supported.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVertexShaderConstants">
      <summary>Gets the number of vertex shader registers that are reserved for constants.</summary>
      <returns>The number of vertex shader registers that are reserved for constants.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVertexW">
      <summary>Gets the maximum W-based depth value that the device supports. </summary>
      <returns>The maximum W-based depth value that the device supports.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVolumeExtent">
      <summary>Gets the maximum value for any of the three dimensions (width, height, and depth) of a volume texture. </summary>
      <returns>The maximum value for any of the three dimensions (width, height, and depth) of a volume texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.NumberOfAdaptersInGroup">
      <summary>Gets the number of adapters in this adapter group (only if master).</summary>
      <returns>The number of adapters in this adapter group (only if master).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader1xMaxValue">
      <summary>Gets the maximum value of pixel shader arithmetic component.</summary>
      <returns>The maximum value of pixel shader arithmetic component.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCapabilities">
      <summary>Gets the pixel shader 2.0 capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.PixelShaderCaps representing the pixel shader 2.0 capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderVersion">
      <summary>Gets the pixel shader main and sub versions. </summary>
      <returns>The pixel shader main and sub versions.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PresentInterval">
      <summary>Gets the rate at which the swap chain's back buffers are presented to the front buffer.</summary>
      <returns>
        The rate at which the swap chain's back buffers are presented to the front buffer.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities">
      <summary>Gets driver primitive capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.PrimitiveCaps representing the primitive capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities">
      <summary>Gets information on raster-drawing capabilities. </summary>
      <returns>
        A GraphicsDeviceCapabilities.RasterCaps representing the raster capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCapabilities">
      <summary>Gets shading operations capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.ShadingCaps representing the shading capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.SourceBlendCapabilities">
      <summary>Gets source-blending capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.BlendCaps representing the source-blending capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCapabilities">
      <summary>Gets the supported stencil-buffer operations.</summary>
      <returns>
        A GraphicsDeviceCapabilities.StencilCaps representing the stencil-buffer capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureAddressCapabilities">
      <summary>Gets texture-addressing capabilities for texture objects. </summary>
      <returns>
        A GraphicsDeviceCapabilities.AddressCaps representing the texture-addressing capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities">
      <summary>Gets miscellaneous texture-mapping capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.TextureCaps representing the texture-mapping capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureFilterCapabilities">
      <summary>Gets texture-filtering capabilities for a texture.</summary>
      <returns>
        A GraphicsDeviceCapabilities.FilterCaps representing the texture-filtering capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCapabilities">
      <summary>Gets flexible vertex format capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.VertexFormatCaps representing the flexible vertex format capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCapabilities">
      <summary>Gets vertex processing capabilities.</summary>
      <returns>A GraphicsDeviceCapabilities.VertexProcessingCaps representing the vertex processing capabilities of a device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCapabilities">
      <summary>Gets vertex shader version 2.0 extended capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.VertexShaderCaps representing the vertex shader 2.0 capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderVersion">
      <summary>Gets the vertex shader main and sub versions.</summary>
      <returns>The vertex shader main and sub versions.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexTextureFilterCapabilities">
      <summary>Gets vertex shader texture filter capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.FilterCaps representing the vertex shader filter capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VolumeTextureAddressCapabilities">
      <summary>Gets texture-addressing capabilities for a volume texture</summary>
      <returns>
        A GraphicsDeviceCapabilities.AddressCaps representing the texture-addressing capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VolumeTextureFilterCapabilities">
      <summary>Gets texture-filtering capabilities for a volume texture.</summary>
      <returns>
        A GraphicsDeviceCapabilities.FilterCaps representing the texture-filtering capabilities of a device.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities">
      <summary>Represents the capabilities of the hardware. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.AddressCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.AddressCaps object this instance is being compared to .</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.SupportsBorder">
      <summary>Gets a value indicating whether the device supports the setting of coordinates outside the range [0.0, 1.0] to the border color.</summary>
      <returns>true if the device supports the setting of coordinates outside the range to the border color; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.SupportsClamp">
      <summary>Gets a value indicating whether the device supports the clamping of textures to addresses. </summary>
      <returns>true if the device supports clamping textures to addresses; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.SupportsIndependentUV">
      <summary>
    Gets a value indicating whether the device can separate the texture-addressing modes of the texture's u and v coordinates.
  </summary>
      <returns>true if the device supports separating the texture-addressing modes of the u and v coordinates; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.SupportsMirrorOnce">
      <summary>
    Gets a value indicating whether a device can take the absolute value of the texture coordinate (thus, mirroring around 0) and then clamp to the maximum value.
  </summary>
      <returns>true if the device can mirror once; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.SupportsMirror">
      <summary>Gets a value indicating whether a device can mirror textures to addresses. </summary>
      <returns>true if the device supports mirroring textures to addresses; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.SupportsWrap">
      <summary>Gets a value indicating whether a device can wrap textures to addresses. </summary>
      <returns>true if the device can wrap textures to addresses; false otherwise. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps">
      <summary>Represents the texture addressing capabilities for Texture structures. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.BlendCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.BlendCaps to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsBlendFactor">
      <summary>
    Gets a value indicating that the driver supports the Blend.BlendFactor blend mode.
  </summary>
      <returns>true if the driver supports the Blend.BlendFactor blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsBothInverseSourceAlpha">
      <summary>
    Gets a value indicating that the driver supports the Blend.BothInverseSourceAlpha blend mode.
  </summary>
      <returns>true if the driver supports the Blend.BothInverseSourceAlpha blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsBothSourceAlpha">
      <summary>
    Gets a value indicating that the driver supports the Blend.BothSourceAlpha blend mode.
  </summary>
      <returns>true if the driver supports the Blend.BothSourceAlpha blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsDestinationAlpha">
      <summary>
    Gets a value indicating that the driver supports the Blend.DestinationAlpha blend mode. 
  </summary>
      <returns>true if the driver supports the Blend.DestinationAlpha blend mode; false otherwise. 
        </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsDestinationColor">
      <summary>
    Gets a value indicating that the driver supports the Blend.DestinationColor blend mode.
  </summary>
      <returns>true if the driver supports the Blend.DestinationColor blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsInverseDestinationAlpha">
      <summary>
    Gets a value indicating that the driver supports the Blend.InverseDestinationAlpha blend mode.
  </summary>
      <returns>true if the driver supports the Blend.InverseDestinationAlpha blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsInverseDestinationColor">
      <summary>
    Gets a value indicating that the driver supports the Blend.InverseDestinationColor blend mode.
  </summary>
      <returns>true if the driver supports the Blend.InverseDestinationColor blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsInverseSourceAlpha">
      <summary>
    Gets a value indicating that the driver supports the Blend.InverseSourceAlpha blend mode.
  </summary>
      <returns>true if the driver supports the Blend.InverseSourceAlpha blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsInverseSourceColor">
      <summary>
    Gets a value indicating that the driver supports the Blend.InverseSourceColor blend mode.
  </summary>
      <returns>true if the driver supports the Blend.InverseSourceColor blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsOne">
      <summary>
    Gets a value indicating that the driver supports the Blend.One blend mode.
  </summary>
      <returns>true if the driver supports the Blend.One blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsSourceAlphaSat">
      <summary>
    Gets a value indicating that the driver supports the Blend.SourceAlphaSat blend mode.
  </summary>
      <returns>true if the driver supports the Blend.SourceAlphaSat blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsSourceAlpha">
      <summary>
    Gets a value indicating that the driver supports the Blend.SourceAlpha blend mode.
  </summary>
      <returns>true if the driver supports the Blend.SourceAlpha blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsSourceColor">
      <summary>
    Gets a value indicating that the driver supports the Blend.SourceColor blend mode.
  </summary>
      <returns>true if the driver supports the Blend.SourceColor blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.SupportsZero">
      <summary>
    Gets a value indicating that the driver supports the Blend.Zero blend mode.
  </summary>
      <returns>true if the driver supports the Blend.Zero blend mode; false otherwise.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps">
      <summary>Represents the supported blend capabilities. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.CompareCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.CompareCaps object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsAlways">
      <summary>Gets a value indicating whether always passing the comparison test is supported.</summary>
      <returns>true if always passing the comparison test is supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsEqual">
      <summary>Gets a value indicating whether comparison tests in which the new value equals the current value are supported.</summary>
      <returns>true if comparison tests in which the new value equals the current value are supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsGreaterEqual">
      <summary>Gets a value indicating whether comparison tests in which the new value is greater than or equal to the current value are supported.</summary>
      <returns>true if comparison tests in which the new value is greater than or equal to the current value are supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsGreater">
      <summary>Gets a value indicating whether comparison tests in which the new value is greater than the current value are supported.</summary>
      <returns>true if comparison tests in which the new value is greater than the current value are supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsLessEqual">
      <summary>Gets a value indicating whether comparison tests in which the new value is less than or equal to the current value are supported.</summary>
      <returns>true if comparison tests in which the new value is less than or equal to the current value are supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsLess">
      <summary>Gets a value indicating whether comparison tests in which the new value is less than the current value are supported.</summary>
      <returns>true if comparison tests in which the new value is less than the current value are supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsNever">
      <summary>Gets a value indicating whether never passing the comparison test is supported.</summary>
      <returns>true if never passing the comparison test is supported; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.SupportsNotEqual">
      <summary>Gets a value indicating whether comparison tests in which the new value does not equal the current value are supported.</summary>
      <returns>true if comparison tests in which the new value does not equal the current value are supported; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps">
      <summary>Represents comparison capabilities. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.CursorCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.CursorCaps to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.SupportsColor">
      <summary>Gets a value indicating whether a full-color cursor is supported in hardware in high-resolution modes.</summary>
      <returns>true if the hardware supports a full-color cursor in high resolution; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.SupportsLowResolution">
      <summary>Gets a value indicating whether a full-color cursor is supported in hardware in low-resolution modes.</summary>
      <returns>true if the hardware supports a full-color cursor in low resolution; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps">
      <summary>Represents hardware support for cursors. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.DeclarationTypeCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.DeclarationTypeCaps object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsByte4">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.Byte4.
  </summary>
      <returns>
        true if vertex declarations support VertexElementFormat.Byte4; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsHalfVector2">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.HalfVector2</summary>
      <returns>
        true if vertex declarations support VertexElementFormat.HalfVector2; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsHalfVector4">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.HalfVector4.
  </summary>
      <returns>
        true if vertex declarations support VertexElementFormat.HalfVector4; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsNormalized101010">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.Normalized101010.
</summary>
      <returns>
      true if vertex declarations support VertexElementFormat.Normalized101010; otherwise false.
        </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsNormalizedShort2">
      <summary>
    Gets a value indicating whether vertex declarations support  VertexElementFormat.NormalizedShort2.
  </summary>
      <returns>
        true if vertex declarations support VertexElementFormat.NormalizedShort2; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsNormalizedShort4">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.NormalizedShort4.
  </summary>
      <returns>
        true if vertex declarations support VertexElementFormat.NormalizedShort4; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsRg32">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.Rg32.
  </summary>
      <returns>
        true if vertex declarations support VertexElementFormat.Rg32; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsRgba32">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.Rgba32.
  </summary>
      <returns>
        true if vertex declarations support VertexElementFormat.Rgba32; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsRgba64">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.Rgba64.
</summary>
      <returns>
      true if vertex declarations support VertexElementFormat.Rgba64; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.SupportsUInt101010">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.UInt101010.
  </summary>
      <returns>
        true if vertex declarations support VertexElementFormat.UInt101010; otherwise false.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps">
      <summary>Represents data types contained in a vertex declaration.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.DeviceCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.DeviceCaps to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.CanDrawSystemToNonLocal">
      <summary>
    Gets a value indicating whether the device supports blits from system-memory textures to non-local video-memory textures.
  </summary>
      <returns>true if the device supports blits from system-memory textures to non-local video-memory textures; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.CanRenderAfterFlip">
      <summary>
    Gets a value indicating whether the device can queue rendering commands after a page flip.
  </summary>
      <returns>true if the device can queue rendering commands after a page flip; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.IsDirect3D9Driver">
      <summary>Gets a value indicating if the device supports copying the contents of a source rectangle to a destination rectangle using a texture as the source.</summary>
      <returns>true if the device supports copying the contents of a source rectangle to a destination rectangle using a texture as the source; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsDrawPrimitives2Ex">
      <summary>
    Gets a value indicating whether the device can support at least a DirectX 7–compliant driver.
  </summary>
      <returns>true if the device can support at least a DirectX 7–compliant driver; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsDrawPrimitives2">
      <summary>
    Gets a value indicating whether the device can support at least a DirectX 5–compliant driver.
  </summary>
      <returns>true if the device can support at least a DirectX 5–compliant driver; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsDrawPrimitivesTransformedVertex">
      <summary>Gets a value indicating whether the device exports a GraphicsDevice.DrawPrimitives-aware hardware abstraction layer (HAL).</summary>
      <returns>true if the device exports an GraphicsDevice.DrawPrimitives-aware HAL; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsExecuteSystemMemory">
      <summary>Gets a value indicating whether the device can use execute buffers from video memory.</summary>
      <returns>true if the device can use execute buffers from video memory; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsExecuteVideoMemory">
      <summary>Gets a value indicating whether the device can use execute buffers from video memory.</summary>
      <returns>true if the device can use execute buffers from video memory; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsHardwareRasterization">
      <summary>Gets a value indicating whether the device has hardware acceleration for scene rasterization.</summary>
      <returns>true if the device has hardware acceleration for scene rasterization; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsHardwareTransformAndLight">
      <summary>Gets a value indicating whether the device can support transformation and lighting in hardware.</summary>
      <returns>true if the device can support transformation and lighting in hardware; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsSeparateTextureMemories">
      <summary>Gets a value indicating whether the device is texturing from separate memory pools.</summary>
      <returns>true if the device is texturing from separate memory pools; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsStreamOffset">
      <summary>Gets a value indicating whether the device supports stream offsets.</summary>
      <returns>true if the device supports stream offsets; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsTextureNonLocalVideoMemory">
      <summary>Gets a value indicating whether the device can retrieve textures from non-local video memory.</summary>
      <returns>true if the device can retrieve textures from non-local video memory; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsTextureSystemMemory">
      <summary>Gets a value indicating whether the device can retrieve textures from system memory.</summary>
      <returns>true if the device can retrieve textures from system memory; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsTextureVideoMemory">
      <summary>Gets a value indicating whether the device can retrieve textures from device memory.</summary>
      <returns>true if the device can retrieve textures from device memory; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsTransformedVertexSystemMemory">
      <summary>Gets a value indicating whether the device can use buffers from system memory for transformed and lit vertices.</summary>
      <returns>true if the device can use buffers from system memory for transformed and lit vertices; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.SupportsTransformedVertexVideoMemory">
      <summary>Gets a value indicating whether the device can use buffers from video memory for transformed and lit vertices.</summary>
      <returns>true if the device can use buffers from video memory for transformed and lit vertices; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.VertexElementScanSharesStreamOffset">
      <summary>Gets a value indicating whether the device allows multiple vertex elements to share the same offset in a stream.</summary>
      <returns>true if the device allows multiple vertex elements to share the same offset in a stream; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps">
      <summary>Represents device-specific capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.DriverCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.DriverCaps object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.GetHashCode">
      <summary>gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.CanAutoGenerateMipMap">
      <summary>Gets a value indicating whether the driver is capable of automatically generating mipmaps.</summary>
      <returns>true if the driver is capable of automatically generating mipmaps; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.CanCalibrateGamma">
      <summary>Gets a value indicating whether the system has a calibrator installed that can automatically adjust the gamma ramp.</summary>
      <returns>true if the system has a calibrator installed that can automatically adjust the gamma ramp; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.CanManageResource">
      <summary>Gets a value indicating whether the driver is capable of managing resources.</summary>
      <returns>true if the driver is capable of managing resources; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.ReadScanLine">
      <summary>Gets a value indicating whether the display hardware is capable of returning the current scan line.</summary>
      <returns>true if the driver display hardware is capable of returning the current scan line; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.SupportsAlphaFullScreenFlipOrDiscard">
      <summary>Gets a value indicating whether the device can respect the RenderState.AlphaBlendEnable render state in full-screen mode while using the FLIP or DISCARD swap effect.</summary>
      <returns>true if the driver the device can respect the RenderState.AlphaBlendEnable render state in full-screen mode while using the FLIP or DISCARD swap effect; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.SupportsCopyToSystemMemory">
      <summary>Gets a value indicating whether the device can accelerate a memory copy from local video memory to system memory.</summary>
      <returns>true if the device can accelerate a memory copy from local video memory to system memory; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.SupportsCopyToVideoMemory">
      <summary>Gets a value indicating whether the device can accelerate a memory copy from system memory to local video memory.</summary>
      <returns>true if the device can accelerate a memory copy from system memory to local video memory; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.SupportsDynamicTextures">
      <summary>Gets a value indicating whether the driver supports dynamic textures.</summary>
      <returns>true if the driver supports dynamic textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.SupportsFullScreenGamma">
      <summary>Gets a value indicating whether the driver supports dynamic gamma ramp adjustment in full-screen mode.</summary>
      <returns>true if the driver supports dynamic gamma ramp adjustment in full-screen mode; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.SupportsLinearToSrgbPresentation">
      <summary>Gets a value indicating whether the device can perform gamma correction from a windowed back buffer (containing linear content) to an sRGB desktop.</summary>
      <returns>true if the device can perform gamma correction from a windowed back buffer to an sRGB desktop; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps">
      <summary>Represents driver-specific capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.FilterCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.FilterCaps to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMagnifyAnisotropic">
      <summary>Gets a value that indicates that the device supports per-stage anisotropic filtering for magnifying textures.</summary>
      <returns>true if the device supports per-stage anisotropic filtering for magnifying textures; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMagnifyGaussianQuad">
      <summary>Gets a value indicating whether the device supports per-stage Gaussian quad filtering for magnifying textures.</summary>
      <returns>true if the device supports per-stage Gaussian quad filtering for magnifying textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMagnifyLinear">
      <summary>Gets a value that indicates that the device supports per-stage bilinear interpolation filtering for magnifying textures. </summary>
      <returns>true if the device supports per-stage bilinear interpolation filtering for magnifying textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMagnifyPoint">
      <summary>Gets a value that indicates that the device supports per-stage point-sample filtering for magnifying textures.</summary>
      <returns>true if the device supports per-stage point-sample filtering for magnifying textures; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMagnifyPyramidalQuad">
      <summary>Gets a value that indicates that the device supports per-stage pyramidal sample filtering for magnifying textures.</summary>
      <returns>true if the device supports per-stage pyramidal sample filtering for magnifying textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMinifyAnisotropic">
      <summary>Gets a value that indicates that the device supports per-stage anisotropic filtering for minifying textures. </summary>
      <returns>true if the device supports per-stage anisotropic filtering for minifying textures; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMinifyGaussianQuad">
      <summary>Gets a value indicating whether the device supports per-stage Gaussian quad filtering for minifying textures.</summary>
      <returns>true if the device supports per-stage Gaussian quad filtering for magnifying textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMinifyLinear">
      <summary>Gets a value that indicates that the device supports per-stage bilinear interpolation filtering for minifying textures. </summary>
      <returns>true if the device supports per-stage bilinear interpolation filtering for minifying textures; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMinifyPoint">
      <summary>Gets a value that indicates whether the device supports per-stage point-sample filtering for minifying textures.</summary>
      <returns>true if the device supports per-stage point-sample filtering for minifying textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMinifyPyramidalQuad">
      <summary>Gets a value that indicates that the device supports per-stage pyramidal sample filtering for minifying textures.</summary>
      <returns>true if the device supports per-stage pyramidal sample filtering for minifying textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMipMapLinear">
      <summary>Gets a value that indicates that the device supports per-stage trilinear interpolation filtering for mipmaps.</summary>
      <returns>true if the device supports per-stage trilinear interpolation filtering for mipmaps; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.SupportsMipMapPoint">
      <summary>Gets a value that indicates that the device supports per-stage point-sample filtering for mipmaps. </summary>
      <returns>true if the device supports per-stage point-sample filtering for mipmaps; false otherwise. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps">
      <summary>Represents texture filter capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.LineCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.LineCaps object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.SupportsAlphaCompare">
      <summary>Gets a value indicating whether the device supports alpha-test comparisons.</summary>
      <returns>true if the device supports alpha-test comparisons; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.SupportsAntiAlias">
      <summary>Gets a value indicating whether the device supports antialiased lines.</summary>
      <returns>true if the device supports antialiased lines; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.SupportsBlend">
      <summary>Gets a value indicating whether the device supports source blending.</summary>
      <returns>true if the device supports source blending; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.SupportsDepthBufferTest">
      <summary>Gets a value indicating whether the device supports depth buffer comparisons.</summary>
      <returns>true if the device supports depth buffer comparisons; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.SupportsFog">
      <summary>Gets a value indicating whether the device supports fog.</summary>
      <returns>true if the device supports fog; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.SupportsTextureMapping">
      <summary>Gets a value indicating whether the device supports texture mapping.</summary>
      <returns>true if the device supports texture mapping; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps">
      <summary>Represents the capabilities for line-drawing primitives.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MaxDynamicFlowControlDepth">
      <summary>Specifies the maximum level of nesting of dynamic flow control instructions (break - vs, break_comp - vs, breakp - vs, if_comp - vs, if_comp - vs, if pred - vs).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MaxNumberInstructionSlots">
      <summary>Specifies the maximum number of instruction slots supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MaxNumberTemps">
      <summary>Specifies the maximum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MaxStaticFlowControlDepth">
      <summary>Specifies the depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MinDynamicFlowControlDepth">
      <summary>Specifies the minimum level of nesting of dynamic flow control instructions (break - vs, break_comp - vs, breakp - vs, if_comp - vs, if_comp - vs, if pred - vs).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MinNumberInstructionSlots">
      <summary>Specifies the minimum number of instruction slots supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MinNumberTemps">
      <summary>Specifies the minimum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.MinStaticFlowControlDepth">
      <summary>Specifies the minimum depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.Equals(System.Object)">
      <summary>
    Determines whether two GraphicsDeviceCapabilities.PixelShaderCaps instances are equal.
  </summary>
      <param name="obj">The GraphicsDeviceCapabilities.PixelShaderCaps object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.DynamicFlowControlDepth">
      <summary>Gets a value specifying the dynamic flow control depth.</summary>
      <returns>The dynamic flow control depth.  Must be 0 or 24.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.NumberInstructionSlots">
      <summary>Gets a value specifying the number of instruction slots supported.</summary>
      <returns>The number of instruction slots supported.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.NumberTemps">
      <summary>Gets a value specifying the number of temporary registers supported.</summary>
      <returns>The number of temporary registers supported.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.StaticFlowControlDepth">
      <summary>Gets a value specifying the depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
      <returns>The static flow control depth.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.SupportsArbitrarySwizzle">
      <summary>Gets a value indicating whether arbitrary swizzling is supported.</summary>
      <returns>true if arbitrary swizzling is supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.SupportsGradientInstructions">
      <summary>Gets a value indicating whether gradient instructions are supported.</summary>
      <returns>true if gradient instructions are supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.SupportsNoDependentReadLimit">
      <summary>Gets a value indicating whether there is a limit on the number of dependent reads per instruction.</summary>
      <returns>true if there is no dependent read limit; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.SupportsNoTextureInstructionLimit">
      <summary>Gets a value indicating whether there is a limit on the number of texture instructions.</summary>
      <returns>true if there is no limit on the number of texture instructions; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.SupportsPredication">
      <summary>Gets a value indicating whether instruction predication is supported.</summary>
      <returns>true if instruction predication is supported; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps">
      <summary>Represents pixel shader capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.PrimitiveCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.PrimitiveCaps object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.HasFogVertexClamped">
      <summary>Gets a value indicating whether the device clamps fog blend factor per vertex.</summary>
      <returns>true if the device clamps fog blend factor per vertex; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.IsNullReference">
      <summary>Gets a value indicating whether the device is a null reference device that does not render.</summary>
      <returns>true if the device is a null reference device; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsBlendOperation">
      <summary>Gets a value indicating whether the device supports blending operations other than BlendFunction.Add.</summary>
      <returns>true if the driver supports other blend operations; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsClipTransformedVertices">
      <summary>Gets a value indicating whether the device clips post-transformed vertex primitives. </summary>
      <returns>true if the device clips post-transformed vertex primitives; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsColorWrite">
      <summary>Gets a value indicating whether the device supports per-channel writes for the render-target color buffer through the RenderState.ColorWriteChannels state.</summary>
      <returns>true if the device supports per-channel writes; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsCullClockwiseFace">
      <summary>Gets a value indicating whether the driver supports clockwise triangle culling through the RenderState.CullMode state.</summary>
      <returns>true if the driver supports clockwise triangle culling; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsCullCounterClockwiseFace">
      <summary>
    Gets a value indicating whether the driver supports counterclockwise triangle culling through the RenderState.CullMode state.
  </summary>
      <returns>true if the driver supports counterclockwise triangle culling; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsCullNone">
      <summary>Gets a value indicating whether the driver does not perform triangle culling.</summary>
      <returns>true if the driver does not perform triangle culling; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsFogAndSpecularAlpha">
      <summary>Gets a value indicating whether the driver supports separate fog and specular alpha. </summary>
      <returns>true if the driver supports separate fog and specular alpha; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsIndependentWriteMasks">
      <summary>Gets a value indicating whether the device supports independent write masks for multiple element textures or multiple render targets.</summary>
      <returns>true if the device supports independent write masks; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsMaskZ">
      <summary>Gets a value indicating whether the device can enable and disable modification of the depth buffer on pixel operations.</summary>
      <returns>true if the device can enable and disable modification of the depth buffer; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsMultipleRenderTargetsIndependentBitDepths">
      <summary>Gets a value indicating whether the device supports different bit depths for multiple render targets.</summary>
      <returns>true if the device supports different bit depths for multiple render targets; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsMultipleRenderTargetsPostPixelShaderBlending">
      <summary>Gets a value indicating whether the device supports post-pixel shader operations for multiple render targets.</summary>
      <returns>true if the device supports post-pixel shader operations for multiple render targets; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.SupportsSeparateAlphaBlend">
      <summary>Gets a value indicating whether the device supports separate blend settings for the alpha channel.</summary>
      <returns>true if the device supports separate blend settings for the alpha channel; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps">
      <summary>Represents driver primitive capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.Equals(System.Object)">
      <summary>
    Determines whether two GraphicsDeviceCapabilities.RasterCaps instances are equal.
  </summary>
      <param name="obj">The GraphicsDeviceCapabilities.RasterCaps object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsAnisotropy">
      <summary>Gets a value indicating whether the device supports anisotropic filtering.</summary>
      <returns>true if the device supports anisotropic filtering; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsColorPerspective">
      <summary>
    Gets a value indicating whether the device iterates colors perspective correctly.
  </summary>
      <returns>true if the device iterates colors perspective correctly; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsDepthBias">
      <summary>Gets a value indicating whether the device supports legacy depth bias.</summary>
      <returns>true if the device supports legacy depth bias; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsDepthBufferLessHsr">
      <summary>Gets a value indicating whether the device can perform hidden-surface removal (HSR) without requiring the application to sort polygons and without requiring the allocation of a depth buffer.</summary>
      <returns>true if the device can perform hidden-surface removal (HSR) without requiring the application to sort polygons and without requiring the allocation of a depth buffer; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsDepthBufferTest">
      <summary>Gets a value indicating whether the device can perform depth-test operations.</summary>
      <returns>true if the device can perform depth-test operations; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsDepthFog">
      <summary>Gets a value indicating whether the device supports depth-based fog.</summary>
      <returns>true if the device supports depth-based fog; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsFogRange">
      <summary>Gets a value indicating whether the device supports range-based fog.</summary>
      <returns>true if the device supports range-based fog; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsFogTable">
      <summary>Gets a value indicating whether the device calculates the fog value by referring to a lookup table containing fog values that are indexed to the depth of a given pixel.</summary>
      <returns>true if the device calculates the fog value by referring to a lookup table; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsFogVertex">
      <summary>
    Gets a value indicating whether the device calculates the fog value during the lighting operation and interpolates the fog value during rasterization.
  </summary>
      <returns>true if the device calculates the fog value during the lighting operation and interpolates the fog value during rasterization; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsMipMapLevelOfDetailBias">
      <summary>Gets a value indicating whether the device supports level-of-detail bias adjustments.</summary>
      <returns>true if the device supports level-of-detail bias adjustments; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsMultisampleToggle">
      <summary>Gets a value indicating whether the device supports toggling multisampling on and off.</summary>
      <returns>true if the device supports toggling multisampling on and off; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsScissorTest">
      <summary>Gets a value indicating whether the device supports scissor test.</summary>
      <returns>true if the device supports scissor test; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsSlopeScaleDepthBias">
      <summary>Gets a value indicating whether the device performs true slope-scale based depth bias.</summary>
      <returns>true if the device performs true slope-scale based depth bias; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.SupportsWFog">
      <summary>Gets a value indicating whether the device supports w-based fog. </summary>
      <returns>true if the device supports w-based fog; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps">
      <summary>Represents raster-drawing capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.ShadingCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.ShadingCaps object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.SupportsAlphaGouraudBlend">
      <summary>Gets a value indicating whether the device can support an alpha component for Gouraud-blended transparency.</summary>
      <returns>true if can support an alpha component for Gouraud-blended transparency; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.SupportsColorGouraudRgb">
      <summary>Gets a value indicating whether the device can support colored Gouraud shading.</summary>
      <returns>true if the device can support colored Gouraud shading; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.SupportsFogGouraud">
      <summary>Gets a value indicating whether the device can support fog in the Gouraud shading mode.</summary>
      <returns>true if the device can support fog in the Gouraud shading mode; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.SupportsSpecularGouraudRgb">
      <summary>Gets a value indicating whether the device supports Gouraud shading of specular highlights.</summary>
      <returns>true if the device supports Gouraud shading of specular highlights; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps">
      <summary>Represents shading operations capabilities</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.StencilCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.StencilCaps object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsDecrementSaturation">
      <summary>Gets a value indicating whether the device supports decrementing the stencil-buffer entry, clamping to zero.</summary>
      <returns>true if the device supports the stencil-buffer entry, clamping to zero; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsDecrement">
      <summary>Gets a value indicating whether the device supports decrementing the stencil-buffer entry, wrapping to the maximum value if the new value is less than zero.</summary>
      <returns>true if the device supports decrementing the stencil-buffer entry; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsIncrementSaturation">
      <summary>Gets a value indicating whether the device supports incrementing the stencil-buffer entry, clamping to the maximum value. </summary>
      <returns>true if the device supports incrementing the stencil-buffer entry, clamping to the maximum value; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsIncrement">
      <summary>Gets a value indicating whether the device supports incrementing the stencil-buffer entry, wrapping to zero if the new value exceeds the maximum value. </summary>
      <returns>true if the device supports incrementing the stencil-buffer entry, wrapping to zero if the new value exceeds the maximum value; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsInvert">
      <summary>Gets a value indicating whether the device supports inverting the bits in the stencil-buffer entry.</summary>
      <returns>true if the device supports inverting the bits in the stencil-buffer entry; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsKeep">
      <summary>Gets a value indicating whether the device does not update the entry in the stencil buffer.</summary>
      <returns>true if the device does not update the entry in the stencil buffer; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsReplace">
      <summary>Gets a value indicating whether the device supports replacing the stencil-buffer entry with a reference value.</summary>
      <returns>true if the device supports replacing the stencil-buffer entry with a reference value; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsTwoSided">
      <summary>Gets a value indicating whether the device supports two-sided stencil.</summary>
      <returns>true if the device supports two-sided stencil; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.SupportsZero">
      <summary>Gets a value indicating whether the device supports setting the stencil-buffer entry to 0.</summary>
      <returns>true if the device supports setting the stencil-buffer entry to 0; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps">
      <summary>Represents driver stencil capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.TextureCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.TextureCaps object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.RequiresCubeMapPower2">
      <summary>
    Gets a value indicating whether the device requires that cube texture maps have dimensions specified as powers of two.
  </summary>
      <returns>true if the device requires that cube texture maps have dimensions specified as powers of two; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.RequiresPower2">
      <summary>Gets a value indicating whether the device only supports textures that are powers of two.</summary>
      <returns>true if the device only supports textures that are powers of two; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.RequiresSquareOnly">
      <summary>Gets a value indicating whether the device requires all textures to be square.</summary>
      <returns>true if the device requires all textures to be square; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.RequiresVolumeMapPower2">
      <summary>
    Gets a value indicating whether the device requires that volume texture maps have dimensions specified as powers of two.
  </summary>
      <returns>true if the device requires that volume texture maps have dimensions specified as powers of two; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsAlpha">
      <summary>Gets a value indicating whether the device supports alpha in texture pixels.</summary>
      <returns>true if the device supports alpha in texture pixels; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsCubeMap">
      <summary>Gets a value indicating whether the device supports cube textures</summary>
      <returns>true if the device supports cube textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsMipCubeMap">
      <summary>Gets a value indicating whether the device supports mipmapped cube textures.</summary>
      <returns>true if the device supports mipmapped cube textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsMipMap">
      <summary>Gets a value indicating whether the device supports mipmapped textures.</summary>
      <returns>true if the device supports mipmapped textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsMipVolumeMap">
      <summary>Gets a value indicating whether the device supports mipmapped volume textures.</summary>
      <returns>true if the device supports mipmapped volume textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsNonPower2Conditional">
      <summary>Gets a value indicating whether the device supports the use of 2D textures with dimensions that are not powers of two, under certain conditions.</summary>
      <returns>true if the device supports the use of 2D textures with dimensions that are not powers of two, under certain conditions; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsNoProjectedBumpEnvironment">
      <summary>
    Gets a value indicating whether the device does not support a projected bump-environment lookup operation in programmable and fixed-function shaders.
  </summary>
      <returns>true if the device does not support a projected bump-environment lookup operation in programmable and fixed-function shaders; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsPerspective">
      <summary>Gets a value indicating whether the device supports perspective correction texturing </summary>
      <returns>true if the device supports perspective correction texturing; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsProjected">
      <summary>Gets a value indicating whether the device supports per pixel projective divide.</summary>
      <returns>true if the device supports supports per pixel projective divide; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsTextureRepeatNotScaledBySize">
      <summary>Gets a value indicating whether the device does not scale texture indices by the texture size prior to interpolation.</summary>
      <returns>true if the device does not scale texture indices by the texture size prior to interpolation; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.SupportsVolumeMap">
      <summary>Gets a value indicating whether the device supports volume textures.</summary>
      <returns>true if the device supports volume textures; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps">
      <summary>Represents miscellaneous texture-mapping capabilities</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.VertexFormatCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.VertexFormatCaps object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.NumberSimultaneousTextureCoordinates">
      <summary>Gets the total number of texture coordinate sets that the device can simultaneously use for multiple texture blending. </summary>
      <returns>The total number of texture coordinate sets that the device can simultaneously use for multiple texture blending. (You can use up to eight texture coordinate sets for any vertex, but the device can blend using only the specified number of texture coordinate sets.) </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.SupportsDoNotStripElements">
      <summary>Gets a value indicating whether vertex elements should not be stripped.</summary>
      <returns>true if vertex elements should not be stripped; otherwise false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.SupportsPointSize">
      <summary>Gets a value indicating whether point size comes from point size data in the vertex declaration.</summary>
      <returns>true if point size comes from point size data in the vertex declaration; otherwise false.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps">
      <summary>Represents flexible vertex format capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.VertexProcessingCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.VertexProcessingCaps object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.SupportsLocalViewer">
      <summary>Gets a value indicating whether the device can do local viewer.</summary>
      <returns>true if the device can do local viewer; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.SupportsNoTextureGenerationNonLocalViewer">
      <summary>Gets a value indicating whether the device supports texture generation in non-local viewer mode.</summary>
      <returns>true if the device does not support texture generation in non-local viewer mode; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.SupportsTextureGenerationSphereMap">
      <summary>
    Gets a value indicating whether the device supports use of the specified texture coordinates for sphere mapping.
  </summary>
      <returns>true if the device supports use of the specified texture coordinates for sphere mapping; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.SupportsTextureGeneration">
      <summary>Gets a value indicating whether the device can do texture generation.</summary>
      <returns>true if the device can do texture generation; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps">
      <summary>Represents vertex processing capabilities.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.MaxDynamicFlowControlDepth">
      <summary>Specifies the maximum level of nesting of dynamic flow control instructions (break - vs, break_comp - vs, breakp - vs, if_comp - vs, if_comp - vs, if pred - vs).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.MaxNumberTemps">
      <summary>Specifies the maximum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.MaxStaticFlowControlDepth">
      <summary>Specifies the maximum depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.MinDynamicFlowControlDepth">
      <summary>Specifies the minimum level of nesting of dynamic flow control instructions (break - vs, break_comp - vs, breakp - vs, if_comp - vs, if_comp - vs, if pred - vs).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.MinNumberTemps">
      <summary>Specifies the minimum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.MinStaticFlowControlDepth">
      <summary>Specifies the minimum depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.Equals(System.Object)">
      <summary>Determines whether two GraphicsDeviceCapabilities.VertexShaderCaps instances are equal.</summary>
      <param name="obj">The GraphicsDeviceCapabilities.VertexShaderCaps object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.DynamicFlowControlDepth">
      <summary>Gets a value specifying the depth of the dynamic flow control instruction nesting.</summary>
      <returns>The depth of the dynamic flow control instruction nesting; either 0 or 24.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.NumberTemps">
      <summary>Gets a value specifying the number of temporary registers supported.</summary>
      <returns>The number of temporary registers supported.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.StaticFlowControlDepth">
      <summary>Gets a value specifying the depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
      <returns>The depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.SupportsPredication">
      <summary>Gets a value indicating whether instruction predication is supported.</summary>
      <returns>true if instruction predication is supported; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps">
      <summary>Represents vertex shader version 2_0 extended capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsAdapter,Microsoft.Xna.Framework.Graphics.DeviceType,System.IntPtr)">
      <summary>
    Initializes a new instance of the GraphicsDeviceCreationParameters class.
  </summary>
      <param name="graphicsAdapter">The display adapter.</param>
      <param name="deviceType">The emulated functionality for this device.</param>
      <param name="windowHandle">Window handle to which focus belongs for this Direct3D device.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.Adapter">
      <summary>Gets the graphics adapter.</summary>
      <returns>The graphics adapter.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.DeviceType">
      <summary>Gets a information describing the amount of emulated functionality for the device.</summary>
      <returns>The amount of emulated functionality for the device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.FocusWindowHandle">
      <summary>Gets a pointer to the window to which focus belongs for the current device.</summary>
      <returns>Value that points to the window to which focus belongs for the device.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters">
      <summary>
    Describes the creation parameters for a device.
  </summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsResource.Disposing">
      <summary>
        Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDevice">
      <summary>Gets the GraphicsDevice associated with this GraphicsResource.</summary>
      <returns>The GraphicsDevice associated with this GraphicsResource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Name">
      <summary>Gets the name of the resource.</summary>
      <returns>The name of the resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Priority">
      <summary>Gets or sets the resource-management priority for this resource.</summary>
      <returns>The new resource-management priority for this resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.ResourceType">
      <summary>Gets the type of this resource.</summary>
      <returns>The resource type.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Tag">
      <summary>Gets the resource tags for this resource.</summary>
      <returns>The resource tags.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsResource">
      <summary>Queries and prepares resources.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceCreated">
      <summary>The event that occurs when a graphics device is created.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceDisposing">
      <summary>The event that occurs when a graphics device is disposing.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceResetting">
      <summary>The event that occurs when a graphics device is in the process of resetting.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceReset">
      <summary>The event that occurs when a graphics device is reset.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.GraphicsDevice">
      <summary>Retrieves a graphcs device.</summary>
      <returns>A graphics device.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService">
      <summary>
    Defines a mechanism for retrieving GraphicsDevice objects.
   Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException">
      <summary>The exception that is thrown when Direct3D does not have enough display memory to perform the operation. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentationParameters.DefaultPresentRate">
      <summary>The default presentation rate.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Clear">
      <summary>Resets all of the PresentationParameters values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Clone">
      <summary>Creates a copy of this PresentationParameters object.</summary>
      <returns>
        A copy of this PresentationParameters object.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.op_Equality(Microsoft.Xna.Framework.Graphics.PresentationParameters,Microsoft.Xna.Framework.Graphics.PresentationParameters)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The System.Object to compare with the current PresentationParameters.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.op_Inequality(Microsoft.Xna.Framework.Graphics.PresentationParameters,Microsoft.Xna.Framework.Graphics.PresentationParameters)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.AutoDepthStencilFormat">
      <summary>Gets or sets a value specifying the format of the depth-stencil surface that the device will automatically create.  Reference page contains links to related conceptual articles.</summary>
      <returns>The format of the depth-stencil surface that the device will automatically create.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferCount">
      <summary>Gets or sets a value specifying how many back buffers to create.</summary>
      <returns>The number of back buffers to create.  Can be 0, 1, 2, or 3.  0 is considered 1.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferFormat">
      <summary>Gets or sets the format of the back buffer. Reference page contains links to related conceptual articles.</summary>
      <returns>The format of the back buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferHeight">
      <summary>Gets or sets a value indicating the height of the new swap chain's back buffer. Reference page contains links to related conceptual articles.</summary>
      <returns>The height of the back buffer, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferWidth">
      <summary>Gets or sets a value indicating the width of the new swap chain's back buffer. Reference page contains links to related conceptual articles.</summary>
      <returns>The width of the back buffer, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.DeviceWindowHandle">
      <summary>Gets or sets the handle to the device window. </summary>
      <returns>The handle to the device window.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.EnableAutoDepthStencil">
      <summary>Gets or sets a value indicating whether Direct3D will manage depth buffers for the application. Reference page contains links to related conceptual articles.</summary>
      <returns>true if Direct3D will manage depth buffers for the application; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.FullScreenRefreshRateInHz">
      <summary>Gets or sets a value indicating the rate at which the display adapter will refresh the screen.</summary>
      <returns>The refresh rate in hertz, or 0 in windowed mode.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.IsFullScreen">
      <summary>Gets or sets a value indicating whether the application is in full screen mode.</summary>
      <returns>true if the application is running full screen; false if the application is running in a window.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.MultiSampleQuality">
      <summary>Gets or sets a value indicating the multisample quality level. Reference page contains code sample.</summary>
      <returns>The multisample quality level. The valid range is from 0 to one less than the value returned by GraphicsAdapter.CheckDeviceMultiSampleType.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.MultiSampleType">
      <summary>Gets or sets the multisample type. Reference page contains code sample.</summary>
      <returns>The multisample type. Must be MultiSampleType.None unless PresentationParameters.SwapEffect has been set to SwapEffect.Discard. Multisampling is supported only if PresentationParameters.SwapEffect is SwapEffect.Discard.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.PresentationInterval">
      <summary>Gets or sets the maximum rate at which the swap chain's back buffers can be presented to the front buffer.</summary>
      <returns>The maximum rate at which the swap chain's back buffers can be presented to the front buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.PresentOptions">
      <summary>Gets or sets miscellaneous presentation flags.</summary>
      <returns>Presentation flags.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.SwapEffect">
      <summary>Gets or sets the swap effect.</summary>
      <returns>The swap effect to use.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PresentationParameters">
      <summary>Contains presentation parameters. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.RenderTarget.ContentLost">
      <summary>Occurs when resources are lost (for example, when the current device is lost). </summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.RenderTarget.Disposing">
      <summary>
    Occurs when Microsoft.Xna.Framework.Graphics.RenderTarget.Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.
   Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the RenderTarget and optionally releases the managed resources. </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object. </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.Format">
      <summary>Gets the format of the render target.</summary>
      <returns>The format of the render target.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.GraphicsDevice">
      <summary>Gets the graphics device associated with this render target resource.</summary>
      <returns>The graphics device associated with this render target resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.Height">
      <summary>Gets the height, in pixels, of this render target.</summary>
      <returns>The height, in pixels, of this render target.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.IsContentLost">
      <summary>Gets the current state of the content on a device.</summary>
      <returns>true if content was lost due to device lost or similar event; otherwise false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed. </summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.MultiSampleQuality">
      <summary>Gets the number of quality stops available for a given multisample type.</summary>
      <returns>The number of quality stops available for a given multisample type.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.MultiSampleType">
      <summary>Gets the levels of full-scene multisampling that the device can apply.</summary>
      <returns>The levels of full-scene multisampling that the device can apply.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.Name">
      <summary>Gets the name of this render-target resource. </summary>
      <returns>The name of this render-target resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.RenderTargetUsage">
      <summary>Gets or sets render target usage flags.</summary>
      <returns>Usage flags for the render target.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.Tag">
      <summary>Gets the resource tags for this render target.</summary>
      <returns>The resource tags for this render target.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget.Width">
      <summary>Gets the width, in pixels, of this render target.</summary>
      <returns>The width, in pixels, of this render target.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTarget">
      <summary>Represents a resource that will be written to at the end of a render pass.  This is the base class for RenderTarget2D and RenderTargetCube. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Initializes a new instance of this class. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="width">Width, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferWidth to get the current screen width.</param>
      <param name="height">Height, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferHeight to get the current screen height.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture.  These smaller versions of the texture, known as mip levels, are used when the texture is minified to fit a smaller area than the original texture size.  The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain.
          If this is zero, all texture sublevels down to 1×1 pixels will be generated for hardware that supports mipmapped textures.</param>
      <param name="format">Surface format of the render target.  Use GraphicsAdapter.CheckDeviceFormat to determine if a particular surface format is usable in a render target.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.MultiSampleType,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.Graphics.RenderTarget2D(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.MultiSampleType,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage) with the specified values. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="width">Width, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferWidth to get the current screen width.</param>
      <param name="height">Height, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferHeight to get the current screen height.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture. These smaller versions of the texture, known as mipmap levels, are used when the texture is minified to fit a smaller area than the original texture size.  The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain.If this is zero, all texture sublevels down to 1×1 pixels will be generated for hardware that supports mipmapped textures.</param>
      <param name="format">Surface format of the render target.  Use GraphicsAdapter.CheckDeviceFormat to determine if a particular surface format is usable in a render target.</param>
      <param name="multiSampleType">The levels of full-scene multisampling that the device can apply. You can use graphicsDevice.PresentationParameters.MultiSampleType to get the MultiSampleType of the back buffer.</param>
      <param name="multiSampleQuality">The number of quality stops available for a given multisample type. You can use graphicsDevice.PresentationParameters.MultiSampleQuality to get the multisample quality of the back buffer.</param>
      <param name="usage">Options identifying the behaviors of this render target resource.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.MultiSampleType,System.Int32)">
      <summary>Initializes a new instance of this class.  Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="width">Width, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferWidth to get the current screen width.</param>
      <param name="height">Height, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferHeight to get the current screen height.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture.  These smaller versions of the texture, known as mip levels, are used when the texture is minified to fit a smaller area than the original texture size.  The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain.
          If this is zero, all texture sublevels down to 1×1 pixels will be generated for hardware that supports mipmapped textures.</param>
      <param name="format">Surface format of the render target.  Use GraphicsAdapter.CheckDeviceFormat to determine if a particular surface format is usable in a render target.</param>
      <param name="multiSampleType">The levels of full-scene multisampling that the device can apply. You can use graphicsDevice.PresentationParameters.MultiSampleType to get the MultiSampleType of the back buffer.</param>
      <param name="multiSampleQuality">The number of quality stops available for a given multisample type. You can use graphicsDevice.PresentationParameters.MultiSampleQuality to get the multisample quality of the back buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.Graphics.RenderTarget2D(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.RenderTargetUsage) with the specified values. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="width">Width, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferWidth to get the current screen width.</param>
      <param name="height">Height, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferHeight to get the current screen height.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture. These smaller versions of the texture, known as mipmap levels, are used when the texture is minified to fit a smaller area than the original texture size.  The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain.If this is zero, all texture sublevels down to 1×1 pixels will be generated for hardware that supports mipmapped textures.</param>
      <param name="format">Surface format of the render target.  Use GraphicsAdapter.CheckDeviceFormat to determine if a particular surface format is usable in a render target.</param>
      <param name="usage">Options identifying the behaviors of this render target resource.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.GetTexture">
      <summary>Gets the 2D texture associated with this render target. Reference page contains code sample.</summary>
      <returns>The 2D texture associated with this render target.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D">
      <summary>Represents a 2D texture resource that will be written to at the end of a render pass. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ResolveTexture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Initializes an empty instance of Microsoft.Xna.Framework.Graphics.ResolveTexture2D(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat).</summary>
      <param name="graphicsDevice">The GraphicsDevice used to display the texture.</param>
      <param name="width">The width of the texture, in pixels. This value must be a power of two if the GraphicsDeviceCapabilities.TextureCaps.RequiresPower2 property of graphicsDevice is true. If this value is 0, width is set to 1.</param>
      <param name="height">The height of the texture, in pixels. This value must be a power of two if the GraphicsDeviceCapabilities.TextureCaps.RequiresPower2 property of graphicsDevice is true. If this value is 0, height is set to 1.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture. These smaller versions of the texture, known as mip levels, are used when the texture is minified to fit a smaller area than the original texture size.  The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain.If numberLevels is zero, all texture sublevels down to 1×1 pixels will be generated for hardware that supports mipmapped textures. Use Texture.LevelCount to see the number of levels generated.</param>
      <param name="format">A SurfaceFormat value specifying the requested pixel format for the texture. The returned texture may be of a different format if the device does not support the requested format. Applications should check the format of the returned texture to ensure that it matches the requested format.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.ResolveTexture2D.ContentLost">
      <summary>Occurs when the render target data is lost due to a lost device event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ResolveTexture2D.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ResolveTexture2D.IsContentLost">
      <summary>Determines if the render target data has been lost due to a lost device event.</summary>
      <returns>true if the content was lost; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResolveTexture2D">
      <summary>Represents a 2D grid of texels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs.Resource">
      <summary>The object raising the event.</summary>
      <returns>The object raising the event.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs">
      <summary>Contains event data.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.Name">
      <summary>Gets the name of the destroyed resource.</summary>
      <returns>The name of the destroyed resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.Tag">
      <summary>Gets the resource manager tag of the destroyed resource.</summary>
      <returns>The resource manager tag of the destroyed resource.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs">
      <summary>Arguments for a GraphicsDevice.ResourceDestroyed event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Initializes a new instance of the class, which enables a group of sprites to be drawn using the same settings. Reference page contains links to related code samples.</summary>
      <param name="graphicsDevice">The graphics device where sprites will be drawn.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.SpriteBatch.Disposing">
      <summary>
        Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteBlendMode,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.SaveStateMode,Microsoft.Xna.Framework.Matrix)">
      <summary>Prepares the graphics device for drawing sprites with specified blending, sorting, and render state options, and a global transform matrix. Reference page contains links to related code samples.</summary>
      <param name="blendMode">Blending options to use when rendering.</param>
      <param name="sortMode">Sorting options to use when rendering.</param>
      <param name="stateMode">Rendering state options.</param>
      <param name="transformMatrix">A matrix to apply to position, rotation, scale, and depth data passed to SpriteBatch.Draw.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteBlendMode)">
      <summary>Prepares the graphics device for drawing sprites with specified blending options. Reference page contains links to related code samples.</summary>
      <param name="blendMode">Blending options to use when rendering.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteBlendMode,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.SaveStateMode)">
      <summary>Prepares the graphics device for drawing sprites with specified blending, sorting, and render state options. Reference page contains links to related code samples.</summary>
      <param name="blendMode">Blending options to use when rendering.</param>
      <param name="sortMode">Sorting options to use when rendering.</param>
      <param name="stateMode">Rendering state options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin">
      <summary>Prepares the graphics device for drawing sprites. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a sprite string to the batch of sprites to be rendered, specifying the font, output text, screen position, and color tint. Reference page contains links to related code samples.</summary>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The string to draw.</param>
      <param name="position">The location, in screen coordinates, where the text will be drawn.</param>
      <param name="color">The desired color of the text.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite string to the batch of sprites to be rendered, specifying the font, output text, screen position, color tint, rotation, origin, scale, and effects. Reference page contains links to related code samples.</summary>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The string to draw.</param>
      <param name="position">The location, in screen coordinates, where the text will be drawn.</param>
      <param name="color">The desired color of the text.</param>
      <param name="rotation">The angle, in radians, to rotate the text around the origin.</param>
      <param name="origin">The origin of the string.  Specify (0,0) for the upper-left corner.</param>
      <param name="scale">Uniform multiple by which to scale the sprite width and height.</param>
      <param name="effects">Rotations to apply prior to rendering.</param>
      <param name="layerDepth">The sorting depth of the sprite, between 0 (front) and 1 (back).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite string to the batch of sprites to be rendered, specifying the font, output text, screen position, color tint, rotation, origin, scale, effects, and depth. Reference page contains links to related code samples.</summary>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The string to draw.</param>
      <param name="position">The location, in screen coordinates, where the text will be drawn.</param>
      <param name="color">The desired color of the text.</param>
      <param name="rotation">The angle, in radians, to rotate the text around the origin.</param>
      <param name="origin">The origin of the string.  Specify (0,0) for the upper-left corner.</param>
      <param name="scale">Vector containing separate scalar multiples for the x- and y-axes of the sprite.</param>
      <param name="effects">Rotations to apply prior to rendering.</param>
      <param name="layerDepth">The sorting depth of the sprite, between 0 (front) and 1 (back).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a mutable sprite string to the batch of sprites to be rendered, specifying the font, output text, screen position, and color tint. Reference page contains links to related code samples.</summary>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The mutable (read/write) string to draw.</param>
      <param name="position">The location, in screen coordinates, where the text will be drawn.</param>
      <param name="color">The desired color of the text.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a mutable sprite string to the batch of sprites to be rendered, specifying the font, output text, screen position, color tint, rotation, origin, scale, and effects. Reference page contains links to related code samples.</summary>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The mutable (read/write) string to draw.</param>
      <param name="position">The location, in screen coordinates, where the text will be drawn.</param>
      <param name="color">The desired color of the text.</param>
      <param name="rotation">The angle, in radians, to rotate the text around the origin.</param>
      <param name="origin">The origin of the string.  Specify (0,0) for the upper-left corner.</param>
      <param name="scale">Uniform multiple by which to scale the sprite width and height.</param>
      <param name="effects">Rotations to apply prior to rendering.</param>
      <param name="layerDepth">The sorting depth of the sprite, between 0 (front) and 1 (back).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a mutable sprite string to the batch of sprites to be rendered, specifying the font, output text, screen position, color tint, rotation, origin, scale, effects, and depth. Reference page contains links to related code samples.</summary>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The mutable (read/write) string to draw.</param>
      <param name="position">The location, in screen coordinates, where the text will be drawn.</param>
      <param name="color">The desired color of the text.</param>
      <param name="rotation">The angle, in radians, to rotate the text around the origin.</param>
      <param name="origin">The origin of the string.  Specify (0,0) for the upper-left corner.</param>
      <param name="scale">Vector containing separate scalar multiples for the x- and y-axes of the sprite.</param>
      <param name="effects">Rotations to apply prior to rendering.</param>
      <param name="layerDepth">The sorting depth of the sprite, between 0 (front) and 1 (back).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, destination, and source rectangles, color tint, rotation, origin, effects, and sort depth. Reference page contains links to related code samples.</summary>
      <param name="texture">The sprite texture.</param>
      <param name="destinationRectangle">A rectangle specifying, in screen coordinates, where the sprite will be drawn. If this rectangle is not the same size as sourceRectangle, the sprite is scaled to fit.</param>
      <param name="sourceRectangle">A rectangle specifying, in texels, which section of the rectangle to draw. Use null to draw the entire texture.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.</param>
      <param name="rotation">The angle, in radians, to rotate the sprite around the origin.</param>
      <param name="origin">The origin of the sprite. Specify (0,0) for the upper-left corner.</param>
      <param name="effects">Rotations to apply prior to rendering.</param>
      <param name="layerDepth">The sorting depth of the sprite, between 0 (front) and 1 (back).You must specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for this parameter to affect sprite drawing.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, destination rectangle, and color tint. Reference page contains links to related code samples.</summary>
      <param name="texture">The sprite texture.</param>
      <param name="destinationRectangle">A rectangle specifying, in screen coordinates, where the sprite will be drawn. If this rectangle is not the same size as sourcerectangle, the sprite is scaled to fit.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, screen position, and color tint. Reference page contains links to related code samples.</summary>
      <param name="texture">The sprite texture.</param>
      <param name="position">The location, in screen coordinates, where the sprite will be drawn.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, screen position, optional source rectangle, color tint, rotation, origin, scale, effects, and sort depth. Reference page contains links to related code samples.</summary>
      <param name="texture">The sprite texture.</param>
      <param name="position">The location, in screen coordinates, where the sprite will be drawn.</param>
      <param name="sourceRectangle">A rectangle specifying, in texels, which section of the rectangle to draw. Use null to draw the entire texture.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.</param>
      <param name="rotation">The angle, in radians, to rotate the sprite around the origin.</param>
      <param name="origin">The origin of the sprite. Specify (0,0) for the upper-left corner.</param>
      <param name="scale">Uniform multiple by which to scale the sprite width and height.</param>
      <param name="effects">Rotations to apply prior to rendering.</param>
      <param name="layerDepth">The sorting depth of the sprite, between 0 (front) and 1 (back).You must specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for this parameter to affect sprite drawing.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, screen position, source rectangle, and color tint. Reference page contains links to related code samples.</summary>
      <param name="texture">The sprite texture.</param>
      <param name="position">The location, in screen coordinates, where the sprite will be drawn.</param>
      <param name="sourceRectangle">A rectangle specifying, in texels, which section of the rectangle to draw. Use null to draw the entire texture.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, destination and source rectangles, and color tint. Reference page contains links to related code samples.</summary>
      <param name="texture">The sprite texture.</param>
      <param name="destinationRectangle">A rectangle specifying, in screen coordinates, where the sprite will be drawn. If this rectangle is not the same size as sourcerectangle the sprite will be scaled to fit.</param>
      <param name="sourceRectangle">A rectangle specifying, in texels, which section of the rectangle to draw. Use null to draw the entire texture.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, screen position, source rectangle, color tint, rotation, origin, scale, effects, and sort depth. Reference page contains links to related code samples.</summary>
      <param name="texture">The sprite texture.</param>
      <param name="position">The location, in screen coordinates, where the sprite will be drawn.</param>
      <param name="sourceRectangle">A rectangle specifying, in texels, which section of the rectangle to draw. Use null to draw the entire texture.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.</param>
      <param name="rotation">The angle, in radians, to rotate the sprite around the origin.</param>
      <param name="origin">The origin of the sprite. Specify (0,0) for the upper-left corner.</param>
      <param name="scale">Vector containing separate scalar multiples for the x- and y-axes of the sprite.</param>
      <param name="effects">Rotations to apply before rendering.</param>
      <param name="layerDepth">The sorting depth of the sprite, between 0 (front) and 1 (back).You must specify either SpriteSortMode.FrontToBack or SpriteSortMode.BackToFront for this parameter to affect sprite drawing.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End">
      <summary>Flushes the sprite batch and restores the device state to how it was before SpriteBatch.Begin was called. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteBatch.GraphicsDevice">
      <summary>Gets the graphics device associated with this SpriteBatch.</summary>
      <returns>
        The graphics device associated with this SpriteBatch.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteBatch.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteBatch.Name">
      <summary>Gets or sets the name of this sprite batch.</summary>
      <returns>The name of this sprite batch.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteBatch.Tag">
      <summary>Gets or sets an object that uniquely identifies this sprite batch.</summary>
      <returns>An object that uniquely identifies this sprite batch.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteBatch">
      <summary>Enables a group of sprites to be drawn using the same settings. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteFont.MeasureString(System.String)">
      <summary>Returns the height and width of a given string as a Framework.Vector2.</summary>
      <param name="text">The string to measure.</param>
      <returns>The height and width, in pixels, of text, when it is rendered.
    </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder)">
      <summary>Returns the height and width of a mutable string as a Framework.Vector2.</summary>
      <param name="text">The mutable (read/write) string to measure.</param>
      <returns>The height and width, in pixels, of text, when it is rendered.
    </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.Characters">
      <summary>Gets a collection of all the characters that are included in the font.</summary>
      <returns>The collection of all characters included in this font.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.DefaultCharacter">
      <summary>Gets or sets the default character for the font.</summary>
      <returns>The default character for this font.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.LineSpacing">
      <summary>The line spacing, in pixels, of this font.</summary>
      <returns>The height of one line, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.Spacing">
      <summary>Gets or sets the spacing of the font characters.</summary>
      <returns>The spacing, in pixels, of the font characters.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteFont">
      <summary>Represents a font texture. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object and optionally releases the managed resources. </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture.LevelCount">
      <summary>Gets the number of texture levels in a multilevel texture.</summary>
      <returns>The number of texture levels in the multilevel texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture.LevelOfDetail">
      <summary>Gets or sets the highest level-of-detail mipmap stored for a managed texture.</summary>
      <returns>The highest level-of-detail mipmap stored for a managed texture. The default value is 0, causing loading of all mipmapped textures.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Texture">
      <summary>Represents a texture resource. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
      <summary>
		Creates an uninitialized Texture2D resource of the specified dimensions. To initialize a Texture2D from an existing file, see the static method Framework.Content.ContentManager.Load``1(System.String) or Texture2D.FromFile.
	 Reference page contains code sample.</summary>
      <param name="graphicsDevice">The GraphicsDevice used to display the texture.</param>
      <param name="width">The width of the texture, in pixels. This value must be a power of two if the GraphicsDeviceCapabilities.TextureCaps.RequiresPower2 property of graphicsDevice is true. If this value is 0, a value of 1 is used.</param>
      <param name="height">The height of the texture, in pixels. This value must be a power of two if the GraphicsDeviceCapabilities.TextureCaps.RequiresPower2 property of graphicsDevice is true. If this value is 0, a value of 1 is used.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>
		Creates an uninitialized Texture2D resource of the specified dimensions. To initialize a Texture2D from an existing file, see the static method Framework.Content.ContentManager.Load``1(System.String) or Texture2D.FromFile.
	 Reference page contains code sample.</summary>
      <param name="graphicsDevice">The GraphicsDevice used to display the texture.</param>
      <param name="width">The width of the texture, in pixels. This value must be a power of two if the GraphicsDeviceCapabilities.TextureCaps.RequiresPower2 property of graphicsDevice is true. If this value is 0, a value of 1 is used.</param>
      <param name="height">The height of the texture, in pixels. This value must be a power of two if the GraphicsDeviceCapabilities.TextureCaps.RequiresPower2 property of graphicsDevice is true. If this value is 0, a value of 1 is used.</param>
      <param name="numberLevels">The number of downsampled surfaces to create when preprocessing the texture. These smaller versions of the texture, known as mipmap levels, are used when the texture is minified to fit a smaller area than the original texture size.  The chain of downsampled surfaces associated with a texture is sometimes called a mipmap chain.
				If numberLevels is zero, all texture sublevels down to 1×1 pixels will be generated for hardware that supports mipmapped textures. Use Texture.LevelCount to see the number of levels generated.</param>
      <param name="usage">Options identifying the behaviors of this texture resource.</param>
      <param name="format">A SurfaceFormat value specifying the requested pixel format for the texture. The returned texture may be of a different format if the device does not support the requested format. Applications should check the format of the returned texture to ensure that it matches the requested format.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the Texture2D and optionally releases the managed resources.
  </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
      <summary>Copies texture data into an array. Reference page contains code sample.</summary>
      <param name="level">The mipmap level to copy from.</param>
      <param name="rect">The section of the texture to copy.  null indicates the data will be copied from the entire texture.</param>
      <param name="data">The array to receive texture data.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(``0[])">
      <summary>Copies texture data into an array. Reference page contains code sample.</summary>
      <param name="data">The array to receive texture data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(``0[],System.Int32,System.Int32)">
      <summary>Copies texture data into an array. Reference page contains code sample.</summary>
      <param name="data">The array to receive texture data.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture. Reference page contains code sample.</summary>
      <param name="level">The mipmap level where the data will be placed.</param>
      <param name="rect">The section of the texture where the data will be placed.  null indicates the data will be copied over the entire texture.</param>
      <param name="data">The array of data to copy. If rect is null, the number of elements in the array must be equal to the size of the texture, which is Texture2D.Width×Texture2D.Height; otherwise, the number of elements in the array should equal the size of the rectangle specified.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
      <param name="options">Option that specifies whether existing data in the buffer will be kept after this operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(``0[])">
      <summary>Copies array data to the texture at mipmap level 0. Reference page contains links to related conceptual articles.</summary>
      <param name="data">The array of data to copy. The number of elements in the array must be equal to the size of the texture, which is Texture2D.Width×Texture2D.Height.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture at mipmap level 0. Reference page contains links to related conceptual articles.</summary>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy. This must be equal to the size of the texture, which is Texture2D.Width×Texture2D.Height.</param>
      <param name="options">Option that specifies whether existing data in the buffer will be kept after this operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Format">
      <summary>Gets the pixel format of this texture resource.</summary>
      <returns>The pixel format of this texture resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Height">
      <summary>Gets the height of this texture resource, in pixels.</summary>
      <returns>The height of this texture resource, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.TextureUsage">
      <summary>Gets the state of the related TextureUsage enumeration.</summary>
      <returns>Indicates how the application uses the texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Width">
      <summary>Gets the width of this texture resource, in pixels.</summary>
      <returns>The width of this texture resource, in pixels.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Texture2D">
      <summary>Represents a 2D grid of texels. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.Project(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Projects a 3D vector from object space into screen space.
   Reference page contains links to related code samples.</summary>
      <param name="source">The vector to project.</param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <param name="world">The world matrix.</param>
      <returns>The vector in screen space.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.Unproject(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Projects a vector from screen space into object space.
  </summary>
      <param name="source">The vector to project.</param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <param name="world">The world matrix.</param>
      <returns>The vector in object space.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.AspectRatio">
      <summary>Gets the aspect ratio used by the viewport</summary>
      <returns>The aspect ratio of the viewport.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Height">
      <summary>Gets or sets the height dimension of the viewport on the render-target surface, in pixels.</summary>
      <returns>The height, in pixels, of the viewport to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth">
      <summary>Gets or sets the maximum depth of the clip volume.</summary>
      <returns>The maximum depth of the clipping volume.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth">
      <summary>Gets or sets the minimum depth of the clip volume.</summary>
      <returns>The minimum depth of the clipping volume.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.TitleSafeArea">
      <summary>Returns the title safe area of the current viewport.</summary>
      <returns>The title safe area.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Width">
      <summary>Gets or sets the width dimension of the viewport on the render-target surface, in pixels.</summary>
      <returns>The width, in pixels, of the viewport to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.X">
      <summary>Gets or sets the pixel coordinate of the upper-left corner of the viewport on the render-target surface.</summary>
      <returns>The upper-left corner of the viewport to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Y">
      <summary>Gets or sets the pixel coordinate of the upper-left corner of the viewport on the render-target surface.</summary>
      <returns>The upper-left corner of the viewport to set or get.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Viewport">
      <summary>Defines the window dimensions of a render-target surface onto which a 3D volume projects. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ClearOptions">
      <summary>Specifies the buffer to use when calling GraphicsDevice.Clear.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.DepthBuffer" documentation_ignore="1">
      <summary>A depth buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.Stencil" documentation_ignore="1">
      <summary>A stencil buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.Target" documentation_ignore="1">
      <summary>A render target.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CubeMapFace">
      <summary>Defines the faces of a cube map in the TextureCube class type.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeX" documentation_ignore="1">
      <summary>Negative x-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeY" documentation_ignore="1">
      <summary>Negative y-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeZ" documentation_ignore="1">
      <summary>Negative z-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveX" documentation_ignore="1">
      <summary>Positive x-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveY" documentation_ignore="1">
      <summary>Positive y-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveZ" documentation_ignore="1">
      <summary>Positive z-face of the cube map.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DepthFormat">
      <summary>Defines the format of data in a depth buffer. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth15Stencil1" documentation_ignore="1">
      <summary>A 16-bit depth-buffer bit depth in which 15 bits are reserved for the depth channel and 1 bit is reserved for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth16" documentation_ignore="1">
      <summary>A 16-bit depth-buffer bit depth.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24" documentation_ignore="1">
      <summary>A 32-bit depth-buffer bit depth that uses 24 bits for the depth channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24Stencil4" documentation_ignore="1">
      <summary>A 32-bit depth-buffer bit depth that uses 24 bits for the depth channel and 4 bits for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24Stencil8" documentation_ignore="1">
      <summary>A non-lockable format that contains 24 bits of depth (in a 24-bit floating-point format − 20E4) and 8 bits of stencil.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24Stencil8Single" documentation_ignore="1">
      <summary>A 32-bit depth-buffer bit depth that uses 24 bits for the depth channel and 8 bits for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth32" documentation_ignore="1">
      <summary>a 32-bit depth-buffer bit depth.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Unknown" documentation_ignore="1">
      <summary>Format is unknown.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceType">
      <summary>Specifies the type of device driver.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DeviceType.Hardware" documentation_ignore="1">
      <summary>A hardware device. Using the flag to get direct access to the video hardware.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DeviceType.NullReference" documentation_ignore="1">
      <summary>A null device. This is a reference device that can do everything except render a scene.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DeviceType.Reference" documentation_ignore="1">
      <summary>A reference device. Use this flag to create a software emulated device.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus">
      <summary>Describes the status of the device.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus.Lost" documentation_ignore="1">
      <summary>The device has been lost.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus.Normal" documentation_ignore="1">
      <summary>The device is normal.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus.NotReset" documentation_ignore="1">
      <summary>The device has not been reset.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.MultiSampleType">
      <summary>Defines the levels of full-scene multisampling that the game machine can apply. Reference page contains code sample.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.SixteenSamples" documentation_ignore="1">
      <summary>Enables 16 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.FifteenSamples" documentation_ignore="1">
      <summary>Enables 15 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.FourteenSamples" documentation_ignore="1">
      <summary>Enables 14 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.ThirteenSamples" documentation_ignore="1">
      <summary>Enables 13 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.TwelveSamples" documentation_ignore="1">
      <summary>Enables 12 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.ElevenSamples" documentation_ignore="1">
      <summary>Enables 11 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.TenSamples" documentation_ignore="1">
      <summary>Enables 10 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.NineSamples" documentation_ignore="1">
      <summary>Enables 9 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.EightSamples" documentation_ignore="1">
      <summary>Enables 8 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.SevenSamples" documentation_ignore="1">
      <summary>Enables 7 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.SixSamples" documentation_ignore="1">
      <summary>Enables 6 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.FiveSamples" documentation_ignore="1">
      <summary>Enables 5 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.FourSamples" documentation_ignore="1">
      <summary>Enables 4 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.ThreeSamples" documentation_ignore="1">
      <summary>Enables 3 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.TwoSamples" documentation_ignore="1">
      <summary>Enables 2 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.NonMaskable" documentation_ignore="1">
      <summary>Enables the multisample quality value.  For a quality of 1, the video card determines the best multisampling mode.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.MultiSampleType.None" documentation_ignore="1">
      <summary>Specifies no full-scene multisampling, and enables swap effects other than  SwapEffect.Discard.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PresentInterval">
      <summary>Defines flags that describe the relationship between the adapter refresh rate and the rate at which GraphicsDevice.Present operations are completed.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.Default" documentation_ignore="1">
      <summary>Equivalent to setting One.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.One" documentation_ignore="1">
      <summary>The driver waits for the vertical retrace period (the runtime will beam trace to prevent tearing). GraphicsDevice.Present operations are not affected more frequently than the screen refresh rate; the runtime completes one GraphicsDevice.Present operation per adapter refresh period, at most. This option is always available for both windowed and full-screen swap chains.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.Two" documentation_ignore="1">
      <summary>The driver waits for the vertical retrace period. GraphicsDevice.Present operations are not affected more frequently than every second screen refresh. Check the GraphicsDeviceCapabilities.PresentInterval property to determine whether the driver supports this option.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.Three" documentation_ignore="1">
      <summary>The driver waits for the vertical retrace period. GraphicsDevice.Present operations are not affected more frequently than every third screen refresh. Check the GraphicsDeviceCapabilities.PresentInterval property to determine whether the driver supports this option.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.Four" documentation_ignore="1">
      <summary>The driver waits for the vertical retrace period. GraphicsDevice.Present operations are not affected more frequently than every fourth screen refresh. Check the GraphicsDeviceCapabilities.PresentInterval property to determine whether the driver supports this option.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.Immediate" documentation_ignore="1">
      <summary>The runtime updates the window client area immediately, and might do so more than once during the adapter refresh period. GraphicsDevice.Present operations might be affected immediately. This option is always available for both windowed and full-screen swap chains.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PresentOptions">
      <summary>Defines flags that control the behavior of the back buffer and depth buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentOptions.DeviceClip" documentation_ignore="1">
      <summary>Clips a windowed GraphicsDevice.Present blit into the window client area, within the monitor screen area of the video adapter that created the Microsoft Direct3D device. This flag works only on Microsoft Windows 2000 and Windows XP.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentOptions.DiscardDepthStencil" documentation_ignore="1">
      <summary>Enables depth-buffer discarding if set when the device or swap chain is created. When this flag is set, the contents of the depth stencil buffer are invalid after either GraphicsDevice.Present or GraphicsDevice.DepthStencilBuffer is called.Discarding depth-buffer data can increase performance and is dependent on the driver. The debug runtime enforces discarding by clearing the depth-buffer to some constant value after calling either GraphicsDevice.Present or GraphicsDevice.DepthStencilBuffer with a different depth surface.Discarding depth-buffer data is illegal for all lockable formats, DepthFormat.Depth16Lockable, and DepthFormat.D32Lockable. Using the GraphicsDevice constructor to specify a lockable format and depth-buffer discarding will result in failure.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentOptions.None" documentation_ignore="1">
      <summary>Use no presentation flags.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentOptions.Video" documentation_ignore="1">
      <summary>Informs the driver that the back buffers contain video data.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.QueryUsages">
      <summary>Defines options for querying device resource formats. Reference page contains links to related code samples.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.QueryUsages.Filter" documentation_ignore="1">
      <summary>Query the resource format to see if it supports texture filter types other than TextureFilter.Point (which is always supported).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.QueryUsages.None" documentation_ignore="1">
      <summary>No option specified.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.QueryUsages.PostPixelShaderBlending" documentation_ignore="1">
      <summary>Query the resource to verify support for post pixel shader blending support, including alpha test, pixel fog, render-target blending, color write enable, and dithering.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.QueryUsages.SrgbRead" documentation_ignore="1">
      <summary>Query the resource to verify if a texture supports gamma correction during a read operation.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.QueryUsages.SrgbWrite" documentation_ignore="1">
      <summary>Query the resource to verify if a texture supports gamma correction during a write operation.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.QueryUsages.VertexTexture" documentation_ignore="1">
      <summary>Query the resource to verify support for vertex shader texture sampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.QueryUsages.WrapAndMip" documentation_ignore="1">
      <summary>Query the resource to verify support for texture wrapping and mipmapping.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTargetUsage">
      <summary>Determines how render target data is used once a new render target is set. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.DiscardContents" documentation_ignore="1">
      <summary>Always clears the render target data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.PlatformContents" documentation_ignore="1">
      <summary>Either clears or keeps the data, depending on the current platform.  On Xbox 360, the render target will discard contents.  On PC, the render target will discard if multisampling is enabled, and preserve the contents if not.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.PreserveContents" documentation_ignore="1">
      <summary>Always keeps the render target data.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResourceType">
      <summary>Defines resource types.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ResourceType.DepthStencilBuffer" documentation_ignore="1">
      <summary>A depth stencil buffer resource.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ResourceType.IndexBuffer" documentation_ignore="1">
      <summary>An index buffer resource.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ResourceType.RenderTarget" documentation_ignore="1">
      <summary>A render target resource.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ResourceType.Texture2D" documentation_ignore="1">
      <summary>A 2-dimensional texture resource.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ResourceType.Texture3D" documentation_ignore="1">
      <summary>A 3-dimensional texture resource.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ResourceType.Texture3DVolume" documentation_ignore="1">
      <summary>A 3-D volume texture resource.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ResourceType.TextureCube" documentation_ignore="1">
      <summary>A cube texture resource.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ResourceType.VertexBuffer" documentation_ignore="1">
      <summary>A vertex buffer resource.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SaveStateMode">
      <summary>Defines options for saving the graphics device state before and after an effect technique is applied.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SaveStateMode.None" documentation_ignore="1">
      <summary>No device state is saved when calling Effect.Begin or restored when calling Effect.End.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SaveStateMode.SaveState" documentation_ignore="1">
      <summary>Save all device state when calling Effect.Begin and restore device state when calling Effect.End.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SetDataOptions">
      <summary>Describes whether existing buffer data will be overwritten or discarded during a SetData operation.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.Discard" documentation_ignore="1">
      <summary>The SetData operation will discard all existing buffer data.The operation will overwrite (with a write-only operation) every location within the locked surface. This is a valid option when using dynamic textures, dynamic vertex buffers, and dynamic index buffers. You may not use this option to update a portion of a surface.For vertex and index buffers, the SetData operation will discard the entire buffer. A pointer to a new memory area is returned so that the direct memory access (DMA) and rendering from the previous area do not stall.For textures, the SetData operation will overwrite (with a write-only operation) every location within the region being locked.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.None" documentation_ignore="1">
      <summary>Portions of existing data in the buffer may be overwritten during this operation.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.NoOverwrite" documentation_ignore="1">
      <summary>The SetData operation will not overwrite existing data in the vertex and index buffers. Specifying this option allows the driver to return immediately from a SetData operation and continue rendering.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderProfile">
      <summary>Defines vertex and pixel shader versions. Reference page contains links to related code samples.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.PS_1_1" documentation_ignore="1">
      <summary>Pixel shader version ps_1_1.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.PS_1_2" documentation_ignore="1">
      <summary>Pixel shader version ps_1_2.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.PS_1_3" documentation_ignore="1">
      <summary>Pixel shader version ps_1_3.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.PS_1_4" documentation_ignore="1">
      <summary>Pixel shader version ps_1_4.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.PS_2_0" documentation_ignore="1">
      <summary>Pixel shader version ps_2_0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.PS_2_A" documentation_ignore="1">
      <summary>Pixel shader version ps_2_a.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.PS_2_B" documentation_ignore="1">
      <summary>Pixel shader version ps_2_b.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.PS_2_SW" documentation_ignore="1">
      <summary>Pixel software shader version ps_2_sw.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.PS_3_0" documentation_ignore="1">
      <summary>Pixel shader version ps_3_0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.Unknown" documentation_ignore="1">
      <summary>Unknown pixel shader version.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.VS_1_1" documentation_ignore="1">
      <summary>Vertex shader version v_1_1.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.VS_2_0" documentation_ignore="1">
      <summary>Vertex shader version v_2_0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.VS_2_A" documentation_ignore="1">
      <summary>Vertex shader version v_2_a.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.VS_2_SW" documentation_ignore="1">
      <summary>Vertex software shader version v_2_sw.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.VS_3_0" documentation_ignore="1">
      <summary>Vertex shader version vs_3_0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.XPS_3_0" documentation_ignore="1">
      <summary>Xbox microcode assembly pixel shader version xps_3_0.  Microcode assembly language supports a superset of the ps_3_0 and vs_3_0 specifications defined by Direct3D 9.0 for Windows. It does not support earlier Direct3D vertex and pixel shader specifications.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ShaderProfile.XVS_3_0" documentation_ignore="1">
      <summary>Xbox microcode assembly vertex shader version xvs_3_0.  Microcode assembly language supports a superset of the ps_3_0 and vs_3_0 specifications defined by Direct3D 9.0 for Windows. It does not support earlier Direct3D vertex and pixel shader specifications.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteBlendMode">
      <summary>
    The following flags are used to specify sprite blending rendering options to the flags parameter in SpriteBatch.Begin:
   Reference page contains links to related code samples.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteBlendMode.Additive" documentation_ignore="1">
      <summary>Enable additive blending.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteBlendMode.AlphaBlend" documentation_ignore="1">
      <summary>Enable alpha blending.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteBlendMode.None" documentation_ignore="1">
      <summary>No blending specified.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteEffects">
      <summary>Defines sprite mirroring options.
  </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally" documentation_ignore="1">
      <summary>Rotate 180 degrees about the Y axis before rendering.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically" documentation_ignore="1">
      <summary>Rotate 180 degrees about the X axis before rendering.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.None" documentation_ignore="1">
      <summary>No rotations specified.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteSortMode">
      <summary>Defines sprite sort-rendering options.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.BackToFront" documentation_ignore="1">
      <summary>Same as Deferred mode, except sprites are sorted by depth in back-to-front order prior to drawing. This procedure is recommended when drawing transparent sprites of varying depths.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred" documentation_ignore="1">
      <summary>Sprites are not drawn until SpriteBatch.End is called.  SpriteBatch.End will apply graphics device settings and draw all the sprites in one batch, in the same order calls to SpriteBatch.Draw were received. This mode allows SpriteBatch.Draw calls to two or more instances of SpriteBatch without introducing conflicting graphics device settings. SpriteBatch defaults to Deferred mode.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.FrontToBack" documentation_ignore="1">
      <summary>Same as Deferred mode, except sprites are sorted by depth in front-to-back order prior to drawing. This procedure is recommended when drawing opaque sprites of varying depths.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Immediate" documentation_ignore="1">
      <summary>SpriteBatch.Begin will apply new graphics device settings, and sprites will be drawn within each SpriteBatch.Draw call. In Immediate mode there can only be one active SpriteBatch instance without introducing conflicting device settings. Immediate mode is faster than Deferred mode.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Texture" documentation_ignore="1">
      <summary>Same as Deferred mode, except sprites are sorted by texture prior to drawing. This can improve performance when drawing non-overlapping sprites of uniform depth.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SurfaceFormat">
      <summary>Defines various types of surface formats. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Alpha8" documentation_ignore="1">
      <summary>(Unsigned format) 8-bit alpha only.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr233" documentation_ignore="1">
      <summary>(Unsigned format) 8-bit BGR texture format using 2 bits for blue, 3 bits for green, and 3 bits for red.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr24" documentation_ignore="1">
      <summary>(Unsigned format) 24-bit BGR pixel format with 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr32" documentation_ignore="1">
      <summary>(Unsigned format) 32-bit BGR pixel format, where 8 bits are reserved for each color.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr444" documentation_ignore="1">
      <summary>(Unsigned format) 16-bit BGR pixel format where 4 bits are reserved for each color.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr555" documentation_ignore="1">
      <summary>(Unsigned format) 16-bit BGR pixel format where 5 bits are reserved for each color.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr565" documentation_ignore="1">
      <summary>(Unsigned format) 16-bit BGR pixel format with 5 bits for blue, 6 bits for green, and 5 bits for red.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra1010102" documentation_ignore="1">
      <summary>(Unsigned format) 32-bit pixel format using 10 bits each for blue, green, and red; and 2 bits for alpha.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra2338" documentation_ignore="1">
      <summary>(Unsigned format) 16-bit BGRA format using 2 bits for blue, 3 bits each for red and green; and 8 bits for alpha.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra4444" documentation_ignore="1">
      <summary>(Unsigned format) 16-bit BGRA pixel format with 4 bits for each channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra5551" documentation_ignore="1">
      <summary>(Unsigned format) 16-bit BGRA pixel format where 5 bits are reserved for each color and 1 bit is reserved for alpha.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Color" documentation_ignore="1">
      <summary>(Unsigned format) 32-bit ARGB pixel format with alpha, using 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Depth15Stencil1" documentation_ignore="1">
      <summary>(Buffer format) 16-bit depth-buffer bit depth where 15 bits are reserved for the depth channel and 1 bit is reserved for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Depth16" documentation_ignore="1">
      <summary>(Buffer format) 16-bit depth-buffer bit depth.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Depth24" documentation_ignore="1">
      <summary>(Buffer format) 32-bit depth-buffer bit depth using 24 bits for the depth channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Depth24Stencil4" documentation_ignore="1">
      <summary>(Buffer format) 32-bit depth-buffer bit depth using 24 bits for the depth channel and 4 bits for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Depth24Stencil8" documentation_ignore="1">
      <summary>(Buffer format) 32-bit depth-buffer bit depth using 24 bits for the depth channel and 8 bits for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Depth24Stencil8Single" documentation_ignore="1">
      <summary>(Buffer format) A non-lockable format that contains 24 bits of depth (in a 24-bit floating-point format − 20e4) and 8 bits of stencil.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Depth32" documentation_ignore="1">
      <summary>(Buffer format) 32-bit depth-buffer bit depth.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt1" documentation_ignore="1">
      <summary>DXT1 compression texture format. The runtime will not allow an application to create a surface using a DXTn format unless the surface dimensions are multiples of 4. This applies to offscreen-plain surfaces, render targets, 2D textures, cube textures, and volume textures.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt2" documentation_ignore="1">
      <summary>DXT2 compression texture format. The runtime will not allow an application to create a surface using a DXTn format unless the surface dimensions are multiples of 4. This applies to offscreen-plain surfaces, render targets, 2D textures, cube textures, and volume textures.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt3" documentation_ignore="1">
      <summary>DXT3 compression texture format. The runtime will not allow an application to create a surface using a DXTn format unless the surface dimensions are multiples of 4. This applies to offscreen-plain surfaces, render targets, 2D textures, cube textures, and volume textures.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt4" documentation_ignore="1">
      <summary>DXT4 compression texture format. The runtime will not allow an application to create a surface using a DXTn format unless the surface dimensions are multiples of 4. This applies to offscreen-plain surfaces, render targets, 2D textures, cube textures, and volume textures.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt5" documentation_ignore="1">
      <summary>DXT5 compression texture format. The runtime will not allow an application to create a surface using a DXTn format unless the surface dimensions are multiples of 4. This applies to offscreen-plain surfaces, render targets, 2D textures, cube textures, and volume textures.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfSingle" documentation_ignore="1">
      <summary>(Floating-point format) 16-bit float format using 16 bits for the red channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector2" documentation_ignore="1">
      <summary>(Floating-point format) 32-bit float format using 16 bits for the red channel and 16 bits for the green channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector4" documentation_ignore="1">
      <summary>(Floating-point format) 64-bit float format using 16 bits for each channel (alpha, blue, green, red).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Luminance16" documentation_ignore="1">
      <summary>(Unsigned format) 16-bit luminance only.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Luminance8" documentation_ignore="1">
      <summary>(Unsigned format) 8-bit luminance only.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.LuminanceAlpha16" documentation_ignore="1">
      <summary>(Unsigned format) 16-bit using 8 bits each for alpha and luminance.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.LuminanceAlpha8" documentation_ignore="1">
      <summary>(Unsigned format) 8-bit using 4 bits each for alpha and luminance.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Multi2Bgra32" documentation_ignore="1">
      <summary>MultiElement texture (not compressed)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedAlpha1010102" documentation_ignore="1">
      <summary>(Mixed format) 32-bit bump-map format using 2 bits for alpha and 10 bits each for w, v, and u.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedByte2" documentation_ignore="1">
      <summary>(Signed format) 16-bit bump-map format using 8 bits each for u and v data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedByte2Computed" documentation_ignore="1">
      <summary>(Signed format) 16-bit normal compression format. The texture sampler computes the C channel from: C = sqrt(1 − U2− V2).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedByte4" documentation_ignore="1">
      <summary>(Signed format) 32-bit bump-map format using 8 bits for each channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedLuminance16" documentation_ignore="1">
      <summary>(Mixed format) 16-bit bump-map format with luminance using 6 bits for luminance, and 5 bits each for v and u.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedLuminance32" documentation_ignore="1">
      <summary>(Mixed format) 32-bit bump-map format with luminance using 8 bits for each channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedShort2" documentation_ignore="1">
      <summary>(Signed format) 32-bit bump-map format using 16 bits for each channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedShort4" documentation_ignore="1">
      <summary>(Signed format) 64-bit bump-map format using 16 bits for each component.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Palette8" documentation_ignore="1">
      <summary>(Unsigned format) 8-bit color indexed.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.PaletteAlpha16" documentation_ignore="1">
      <summary>(Unsigned format) 8-bit color indexed with 8 bits of alpha.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rg32" documentation_ignore="1">
      <summary>(Unsigned format) 32-bit pixel format using 16 bits each for red and green.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgb32" documentation_ignore="1">
      <summary>(Unsigned format) 32-bit RGB pixel format, where 8 bits are reserved for each color.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgba1010102" documentation_ignore="1">
      <summary>(Unsigned format) 32-bit RGBA pixel format using 10 bits for each color and 2 bits for alpha.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgba32" documentation_ignore="1">
      <summary>(Unsigned format) 32-bit RGBA pixel format with alpha, using 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgba64" documentation_ignore="1">
      <summary>(Unsigned format) 64-bit RGBA pixel format using 16 bits for each component.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Single" documentation_ignore="1">
      <summary>(IEEE format) 32-bit float format using 32 bits for the red channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Unknown" documentation_ignore="1">
      <summary>Surface format is unknown.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Vector2" documentation_ignore="1">
      <summary>(IEEE format) 64-bit float format using 32 bits for the red channel and 32 bits for the green channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Vector4" documentation_ignore="1">
      <summary>(IEEE format) 128-bit float format using 32 bits for each channel (alpha, blue, green, red).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.VideoGrGb" documentation_ignore="1">
      <summary>A 16-bit packed RGB format analogous to VideoYuYv (U0Y0, V0Y1, U2Y2, and so on). It requires a pixel pair to properly represent the color value. The first pixel in the pair contains 8 bits of green (in the low 8 bits) and 8 bits of red (in the high 8 bits). The second pixel contains 8 bits of green (in the low 8 bits) and 8 bits of blue (in the high 8 bits). Together, the two pixels share the red and blue components, while each has a unique green component (R0G0, B0G1, R2G2, and so on). The texture sampler does not normalize the colors when looking up into a pixel shader; they remain in the range of 0.0f to 255.0f. This is true for all programmable pixel shader models. For the fixed-function pixel shader, the hardware should normalize to the 0.f to 1.f range and essentially treat it as the VideoUyVy texture. Hardware that exposes this format must have GraphicsDeviceCapabilities.PixelShader1xMaxValue set to a value capable of handling that range.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.VideoRgBg" documentation_ignore="1">
      <summary>A 16-bit packed RGB format analogous to VideoUyVy (Y0U0, Y1V0, Y2U2, and so on). It requires a pixel pair to properly represent the color value. The first pixel in the pair contains 8 bits of green (in the high 8 bits) and 8 bits of red (in the low 8 bits). The second pixel contains 8 bits of green (in the high 8 bits) and 8 bits of blue (in the low 8 bits). Together, the two pixels share the red and blue components, while each has a unique green component (G0R0, G1B0, G2R2, and so on). The texture sampler does not normalize the colors when looking up into a pixel shader; they remain in the range of 0.0f to 255.0f. This is true for all programmable pixel shader models. For the fixed-function pixel shader, the hardware should normalize to the 0.f to 1.f range and essentially treat it as the VideoUyVy texture. Hardware that exposes this format must have GraphicsDeviceCapabilities.PixelShader1xMaxValue set to a value capable of handling that range.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.VideoUyVy" documentation_ignore="1">
      <summary>YUY2 format (PC98 compliance)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.VideoYuYv" documentation_ignore="1">
      <summary>VideoYuYv format (PC98 compliance)</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SwapEffect">
      <summary>Defines how the device front buffer and back buffer are to be swapped when GraphicsDevice.Present is called.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SwapEffect.Copy" documentation_ignore="1">
      <summary>This swap effect can be specified only for a swap chain that comprises a single back buffer.Whether the swap chain is windowed or full-screen, the runtime guarantees the semantics implied by a copy-based GraphicsDevice.Present operation; specifically, that the operation leaves the content of the back buffer unchanged, instead of replacing it with the content of the front buffer as a flip-based GraphicsDevice.Present operation would.For a windowed swap chain, a GraphicsDevice.Present operation causes the back buffer content to be copied immediately to the client area of the target window. No attempt is made to synchronize the copy with the vertical retrace period of the display adapter, so tearing effects may be observed.For a full-screen swap chain, the runtime uses a combination of flip and copy operations, which are supported by hidden back buffers if necessary, to accomplish the GraphicsDevice.Present operation. Accordingly, the presentation is synchronized with the display adapter's vertical retrace and its rate is constrained by the chosen presentation interval. A swap chain specified with the PresentInterval.Immediate flag is the only exception. (For more information, see PresentationParameters.PresentationInterval.) In this case, a GraphicsDevice.Present operation copies the back buffer content directly to the front buffer without waiting for the vertical retrace.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SwapEffect.Default" documentation_ignore="1">
      <summary>The default swap effect is Discard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SwapEffect.Discard" documentation_ignore="1">
      <summary>When a swap chain is created with a swap effect of Flip or Copy, the runtime guarantees that a GraphicsDevice.Present operation will not affect the content of any of the back buffers. However, meeting this guarantee can involve substantial video memory or processing overheads, especially when implementing flip semantics for a windowed swap chain or copy semantics for a full-screen swap chain.An application can use the Discard swap effect to avoid these overheads and to enable the display driver to choose the most efficient presentation technique for the swap chain.Discard is also the only swap effect that can be used when specifying a value other than None for PresentationParameters.MultiSampleType. Like a swap chain that uses Flip, a swap chain that uses Discard might include more than one back buffer.The swap chain is essentially a queue where 0 always indexes the back buffer that will be displayed by the next GraphicsDevice.Present operation and from which buffers are discarded once they have been displayed. An application that uses this swap effect should update an entire back buffer before invoking a GraphicsDevice.Present operation that displays it.The debug version of the runtime overwrites the contents of discarded back buffers with random data, to enable developers to verify that their applications are updating the entire back buffer surface correctly.For a full-screen swap chain, the presentation rate is determined by the value assigned to PresentationParameters.PresentationInterval when the device or swap chain is created. Unless this value is PresentInterval.Immediate, the presentation is synchronized with the vertical sync of the monitor. For a windowed swap chain, the presentation is implemented by means of copy operations, and always occurs immediately.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SwapEffect.Flip" documentation_ignore="1">
      <summary>The swap chain might include multiple back buffers and is essentially a circular queue that includes the front buffer. Within this queue, the back buffers are always numbered sequentially from 0 to (n - 1), where n is the number of back buffers, so that 0 denotes the least recently presented buffer.
      When GraphicsDevice.Present is invoked, the queue is rotated so that the front buffer becomes the back buffer (n - 1), while the back buffer 0 becomes the new front buffer.For a full-screen swap chain, the presentation rate is determined by the value assigned to the PresentationParameters.PresentationInterval when the device or swap chain is created. Unless this value is PresentInterval.Immediate, the presentation is synchronized with the vertical sync of the monitor.For a windowed swap chain, the flipping is implemented by means of copy operations, and the presentation always occurs immediately.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureUsage">
      <summary>Specifies special usage of the texture data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureUsage.AutoGenerateMipMap" documentation_ignore="1">
      <summary>The resource automatically generates mipmaps. Automatic generation of mipmaps is not supported for volume textures and depth stencil surfaces/textures.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureUsage.Linear" documentation_ignore="1">
      <summary>(Xbox 360 only) Linear texture memory format. Linear formats are arranged in memory using a left-to-right and top-to-bottom layout (with pixels contiguous in memory for each row, and rows contiguous except for possible alignment padding). Use this format when doing dynamic CPU updates to textures where:You do not want the overhead of translating tile addresses using the CPU.Textures are not often referenced during the frame.Less efficient GPU performance is not a problem.This flag is valid only for texture creation on Xbox 360. It is ignored if used elsewhere. On Xbox, most formats are created as Tiled if it is applicable.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureUsage.None" documentation_ignore="1">
      <summary>None.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureUsage.Tiled" documentation_ignore="1">
      <summary>(Xbox 360 only) Tiled texture memory format. Tiled formats are arranged using a memory layout designed to maximize the cache coherency of texture fetches and balance the access workload of the memory controllers. The exact pixel arrangement of tiled formats varies based on the bit depth of the format; however, pixels that are close to one another spatially are located close to one another in memory. For example, two pixels adjacent to one another in a vertical column would be separated in memory by an entire row of pixels for a linear format, but could be separated by only a few bytes for a tiled format. The tiled texture format is usually more efficient than the linear texture format.This flag is valid only when used for texture creation on Xbox 360, and will be ignored if used elsewhere. On Xbox, most formats are created as Tiled if it is applicable.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetCapabilities(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Retrieves the capabilities of an Xbox 360 Controller.</summary>
      <param name="playerIndex">Index of the controller to query.</param>
      <returns>The capabilities of the controller.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.GamePadDeadZone)">
      <summary>Gets the current state of a game pad controller, using a specified dead zone on analog stick positions. Reference page contains links to related code samples.</summary>
      <param name="playerIndex">Player index for the controller you want to query.</param>
      <param name="deadZoneMode">Enumerated value that specifies what dead zone type to use.</param>
      <returns>The current state of the controller.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Gets the current state of a game pad controller. Reference page contains links to related code samples.</summary>
      <param name="playerIndex">Player index for the controller you want to query.</param>
      <returns>The current state of the controller.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.SetVibration(Microsoft.Xna.Framework.PlayerIndex,System.Single,System.Single)">
      <summary>Sets the vibration motor speeds on an Xbox 360 Controller. Reference page contains links to related code samples.</summary>
      <param name="playerIndex">Player index that identifies the controller to set.</param>
      <param name="leftMotor">The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor.</param>
      <param name="rightMotor">The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
      <returns>true if the vibration motors were successfully set; false if the controller was unable to process the request.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePad">
      <summary>Allows retrieval of user interaction with an Xbox 360 Controller and setting of controller vibration motors. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.#ctor(Microsoft.Xna.Framework.Input.Buttons)">
      <summary>Initializes a new instance of the GamePadButtons class, setting the specified buttons to pressed.</summary>
      <param name="buttons">Buttons to initialize as pressed.  Specify a single button, or combine multiple buttons using a bitwise OR operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.op_Equality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)">
      <summary>Determines whether two GamePadButtons instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.op_Inequality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)">
      <summary>Determines whether two GamePadButtons instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.A">
      <summary>Identifies whether the A button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.Back">
      <summary>Identifies whether the BACK button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.BigButton">
      <summary>
    Identifies whether the BigButton button is pressed.</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.B">
      <summary>Identifies whether the B button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.LeftShoulder">
      <summary>Identifies whether the left shoulder (bumper) button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.LeftStick">
      <summary>Identifies whether the left stick button on the Xbox 360 Controller is pressed (the stick is "clicked" in).</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.RightShoulder">
      <summary>Identifies whether the right shoulder (bumper) button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.RightStick">
      <summary>Identifies whether the right stick button on the Xbox 360 Controller is pressed (the stick is "clicked" in).</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.Start">
      <summary>Identifies whether the START button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.X">
      <summary>Identifies whether the X button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.Y">
      <summary>Identifies whether the Y button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadButtons">
      <summary>Identifies whether the buttons on an Xbox 360 Controller are pressed or released. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType">
      <summary>Gets the type of controller.</summary>
      <returns>Enumerated value describing the controller type.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasAButton">
      <summary>Indicates whether the controller has an A button.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBackButton">
      <summary>Indicates whether the controller has a BACK button.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBButton">
      <summary>Indicates whether the controller has a B button.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBigButton">
      <summary>
    Indicates whether the controller has a BigButton button.
  </summary>
      <returns>true if the controller has this capability; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadDownButton">
      <summary>Indicates whether the controller has a directional pad DOWN button.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadLeftButton">
      <summary>Indicates whether the controller has a directional pad LEFT button.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadRightButton">
      <summary>Indicates whether the controller has a directional pad RIGHT button.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadUpButton">
      <summary>Indicates whether the controller has a directional pad UP button.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftShoulderButton">
      <summary>Indicates whether the controller has a left bumper button.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftStickButton">
      <summary>Indicates whether the controller has a digital button control on the left analog stick.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftTrigger">
      <summary>Indicates whether the controller has a left analog trigger.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftVibrationMotor">
      <summary>Indicates whether the controller has a low-frequency vibration motor.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftXThumbStick">
      <summary>Indicates whether the controller supports a left analog control with horizontal movement.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftYThumbStick">
      <summary>Indicates whether the controller supports a left analog control with vertical movement.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightShoulderButton">
      <summary>Indicates whether the controller has a right bumper button.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightStickButton">
      <summary>Indicates whether the controller has a digital button control on the right analog stick.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightTrigger">
      <summary>Indicates whether the controller has a right analog trigger.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightVibrationMotor">
      <summary>Indicates whether the controller has a high-frequency vibration motor.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightXThumbStick">
      <summary>Indicates whether the controller supports a right analog control with horizontal movement.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightYThumbStick">
      <summary>Indicates whether the controller supports a right analog control with vertical movement.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasStartButton">
      <summary>Indicates whether the controller has a START button.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasVoiceSupport">
      <summary>Indicates whether the controller supports voice.</summary>
      <returns>true if the controller supports voice; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasXButton">
      <summary>Indicates whether the controller has an X button.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasYButton">
      <summary>Indicates whether the controller has a Y button.</summary>
      <returns>true if the controller has this capability; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.IsConnected">
      <summary>Indicates whether the Xbox 360 Controller is connected.</summary>
      <returns>true if the controller is connected; false otherwise.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadCapabilities">
      <summary>Describes the capabilities of an Xbox 360 Controller, including controller type and whether the controller supports voice.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.#ctor(Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState)">
      <summary>Initializes a new instance of the GamePadDPad class.</summary>
      <param name="upValue">Directional pad up button state.</param>
      <param name="downValue">Directional pad down button state.</param>
      <param name="leftValue">Directional pad left button state.</param>
      <param name="rightValue">Directional pad right button state.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.op_Equality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)">
      <summary>Determines whether two GamePadDPad instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.op_Inequality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)">
      <summary>Determines whether two GamePadDPad instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Down">
      <summary>Identifies whether the Down direction on the Xbox 360 Controller directional pad is pressed.</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Left">
      <summary>Identifies whether the Left direction on the Xbox 360 Controller directional pad is pressed.</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Right">
      <summary>Identifies whether the Right direction on the Xbox 360 Controller directional pad is pressed.</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Up">
      <summary>Identifies whether the Up direction on the Xbox 360 Controller directional pad is pressed.</summary>
      <returns>ButtonState.Pressed if the button is pressed; ButtonState.Released otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadDPad">
      <summary>Identifies which directions on the directional pad of an Xbox 360 Controller are being pressed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Input.Buttons[])">
      <summary>Initializes a new instance of the GamePadState class with the specified stick, trigger, and button values.</summary>
      <param name="leftThumbStick">Left stick value.  Each axis is clamped between -1.0 and 1.0.</param>
      <param name="rightThumbStick">Right stick value.  Each axis is clamped between -1.0 and 1.0.</param>
      <param name="leftTrigger">Left trigger value.  This value is clamped between 0.0 and 1.0.</param>
      <param name="rightTrigger">Right trigger value.  This value is clamped between 0.0 and 1.0.</param>
      <param name="buttons">Array or parameter list of Buttons  to initialize as pressed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.#ctor(Microsoft.Xna.Framework.Input.GamePadThumbSticks,Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadDPad)">
      <summary>Initializes a new instance of the GamePadState class using the specified GamePadThumbSticks, GamePadTriggers, GamePadButtons, and GamePadDPad.</summary>
      <param name="thumbSticks">Initial thumbstick state.</param>
      <param name="triggers">Initial trigger state.</param>
      <param name="buttons">Initial button state.</param>
      <param name="dPad">Initial directional pad state.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.op_Equality(Microsoft.Xna.Framework.Input.GamePadState,Microsoft.Xna.Framework.Input.GamePadState)">
      <summary>Determines whether two GamePadState instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.op_Inequality(Microsoft.Xna.Framework.Input.GamePadState,Microsoft.Xna.Framework.Input.GamePadState)">
      <summary>Determines whether two GamePadState instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.IsButtonDown(Microsoft.Xna.Framework.Input.Buttons)">
      <summary>Determines whether specified input device buttons are pressed in this GamePadState.</summary>
      <param name="button">Buttons to query.  Specify a single button, or combine multiple buttons using a bitwise OR operation.</param>
      <returns>true if all specified buttons are pressed; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.IsButtonUp(Microsoft.Xna.Framework.Input.Buttons)">
      <summary>Determines whether specified input device buttons are up (not pressed) in this GamePadState.</summary>
      <param name="button">Buttons to query.  Specify a single button, or combine multiple buttons using a bitwise OR operation.</param>
      <returns>true if any specified buttons are up; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.Buttons">
      <summary>Returns a structure that identifies what buttons on the Xbox 360 controller are pressed. Reference page contains links to related code samples.</summary>
      <returns>A structure that identifies buttons pressed on the controller.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.DPad">
      <summary>Returns a structure that identifies what directions of the directional pad on the Xbox 360 Controller are pressed.</summary>
      <returns>Structure that identifies what directional pad directions are pressed.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.IsConnected">
      <summary>Indicates whether the Xbox 360 Controller is connected. Reference page contains links to related code samples.</summary>
      <returns>true if the controller is connected; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.PacketNumber">
      <summary>Gets the packet number associated with this state. Reference page contains links to related code samples.</summary>
      <returns>The packet number associated with this state.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.ThumbSticks">
      <summary>Returns a structure that indicates the position of the Xbox 360 Controller sticks (thumbsticks).</summary>
      <returns>Structure that indicates the position of the sticks.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.Triggers">
      <summary>Returns a structure that identifies the position of triggers on the Xbox 360 controller.</summary>
      <returns>Structure that identifies the position of the triggers.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadState">
      <summary>Represents specific information about the state of an Xbox 360 Controller, including the current state of buttons and sticks. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the GamePadThumbSticks class.</summary>
      <param name="leftThumbstick">Left stick value.  Each axis is clamped between -1.0 and 1.0.</param>
      <param name="rightThumbstick">Right stick value.  Each axis is clamped between -1.0 and 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Equality(Microsoft.Xna.Framework.Input.GamePadThumbSticks,Microsoft.Xna.Framework.Input.GamePadThumbSticks)">
      <summary>Determines whether two GamePadThumbSticks instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Inequality(Microsoft.Xna.Framework.Input.GamePadThumbSticks,Microsoft.Xna.Framework.Input.GamePadThumbSticks)">
      <summary>Determines whether two GamePadThumbSticks instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadThumbSticks.Left">
      <summary>Returns the position of the left Xbox 360 Controller stick (thumbstick) as a 2D vector. Reference page contains code sample.</summary>
      <returns>Two-dimensional vector that identifies the position of the left stick. Each axis is represented as a floating-point value from −1.0 to 1.0.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadThumbSticks.Right">
      <summary>Returns the position of the right Xbox 360 Controller stick (thumbstick) as a 2D vector.</summary>
      <returns>Two-dimensional vector that identifies the position of the right stick. Each axis is represented as a floating-point value from −1.0 to 1.0.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadThumbSticks">
      <summary>Structure that represents the position of left and right sticks (thumbsticks) on an Xbox 360 Controller.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the GamePadTriggers class.</summary>
      <param name="leftTrigger">Left trigger value.  This value is clamped between 0.0 and 1.0.</param>
      <param name="rightTrigger">Right trigger value.  This value is clamped between 0.0 and 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.op_Equality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)">
      <summary>Determines whether two GamePadTriggers instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.op_Inequality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)">
      <summary>Determines whether two GamePadTriggers instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadTriggers.Left">
      <summary>Identifies the position of the left trigger on the Xbox 360 Controller.</summary>
      <returns>Position of the left trigger, as a value between 0.0 and 1.0.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadTriggers.Right">
      <summary>Identifies the position of the right trigger on the Xbox 360 Controller.</summary>
      <returns>Position of the right trigger, as a value between 0.0 and 1.0.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadTriggers">
      <summary>Structure that defines the position of the left and right triggers on an Xbox 360 controller.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.Keyboard.GetState">
      <summary>Returns the current keyboard state. Reference page contains links to related code samples.</summary>
      <returns>Current keyboard state.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Keyboard">
      <summary>Allows retrieval of keystrokes from a keyboard input device. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.#ctor(Microsoft.Xna.Framework.Input.Keys[])">
      <summary>Initializes a new instance of the KeyboardState class.</summary>
      <param name="keys">Array or parameter list of Keys  to initialize as pressed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.op_Equality(Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.KeyboardState)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="a">Object to the left of the equality operator.</param>
      <param name="b">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to compare this object to.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.GetPressedKeys">
      <summary>Gets an array of values that correspond to the keyboard keys that are currently being pressed. Reference page contains links to related code samples.</summary>
      <returns>The keys that are currently pressed.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.op_Inequality(Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.KeyboardState)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="a">Object to the left of the inequality operator.</param>
      <param name="b">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)">
      <summary>Returns whether a specified key is currently being pressed. Reference page contains links to related code samples.</summary>
      <param name="key">Enumerated value that specifies the key to query.</param>
      <returns>true if the key specified by key is being held down; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)">
      <summary>Returns whether a specified key is currently not pressed. Reference page contains links to related code samples.</summary>
      <param name="key">Enumerated value that specifies the key to query.</param>
      <returns>true if the key specified by key is not pressed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.KeyboardState.Item(Microsoft.Xna.Framework.Input.Keys)">
      <summary>Returns the state of a particular key. Reference page contains links to related code samples.</summary>
      <param name="key">Enumerated value representing the key to query.</param>
      <returns>The state of the key specified by key.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.KeyboardState">
      <summary>Represents a state of keystrokes recorded by a keyboard input device. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.Mouse.GetState">
      <summary>Gets the current state of the mouse, including mouse position and buttons pressed. Reference page contains links to related code samples.</summary>
      <returns>Current state of the mouse.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.Mouse.SetPosition(System.Int32,System.Int32)">
      <summary>Sets the position of the mouse cursor relative to the upper-left corner of the window.</summary>
      <param name="x">The horizontal position of the mouse cursor, relative to the left edge of the game window.</param>
      <param name="y">The vertical position of the mouse cursor, relative to the upper edge of the game window.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.Mouse.WindowHandle">
      <summary>Gets or sets the window used for mouse processing.  Mouse coordinates returned by Mouse.GetState are relative to the upper-left corner of this window. Reference page contains links to related code samples.</summary>
      <returns>Handle to a window.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Mouse">
      <summary>Allows retrieval of position and button clicks from a mouse input device. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.#ctor(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState)">
      <summary>Initializes a new instance of the MouseState class.</summary>
      <param name="x">Horizontal mouse position.</param>
      <param name="y">Vertical mouse position.</param>
      <param name="scrollWheel">Mouse scroll wheel value.</param>
      <param name="leftButton">Left mouse button state.</param>
      <param name="middleButton">Middle mouse button state.</param>
      <param name="rightButton">Right mouse button state.</param>
      <param name="xButton1">XBUTTON1 state.</param>
      <param name="xButton2">XBUTTON2 state.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.op_Equality(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.MouseState)">
      <summary>Determines whether two MouseState instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.op_Inequality(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.MouseState)">
      <summary>Determines whether two MouseState instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.LeftButton">
      <summary>Returns the state of the left mouse button.</summary>
      <returns>State of the left mouse button.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.MiddleButton">
      <summary>Returns the state of the middle mouse button.</summary>
      <returns>State of the middle mouse button.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.RightButton">
      <summary>Returns the state of the right mouse button.</summary>
      <returns>State of the right mouse button.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.ScrollWheelValue">
      <summary>Gets the cumulative mouse scroll wheel value since the game was started.</summary>
      <returns>The scroll wheel value.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.XButton1">
      <summary>Returns the state of XBUTTON1.</summary>
      <returns>The state of XBUTTON1.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.XButton2">
      <summary>Returns the state of XBUTTON2.</summary>
      <returns>The state of XBUTTON2.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.X">
      <summary>Specifies the horizontal position of the mouse cursor. Reference page contains links to related code samples.</summary>
      <returns>Horizontal position of the mouse cursor in relation to the upper-left corner of the game window.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.Y">
      <summary>Specifies the vertical position of the mouse cursor. Reference page contains links to related code samples.</summary>
      <returns>Vertical position of the mouse cursor in relation to the upper-left corner of the game window.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.MouseState">
      <summary>Represents the state of a mouse input device, including mouse cursor position and buttons pressed. Reference page contains links to related code samples.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.ButtonState">
      <summary>Identifies the state of a controller button.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.ButtonState.Pressed" documentation_ignore="1">
      <summary>The button is pressed.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.ButtonState.Released" documentation_ignore="1">
      <summary>The button is released.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Buttons">
      <summary>Enumerates input device buttons.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.A" documentation_ignore="1">
      <summary>A button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.B" documentation_ignore="1">
      <summary>B button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.Back" documentation_ignore="1">
      <summary>BACK button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.BigButton" documentation_ignore="1">
      <summary>Big button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.DPadDown" documentation_ignore="1">
      <summary>Directional pad up</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.DPadLeft" documentation_ignore="1">
      <summary>Directional pad left</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.DPadRight" documentation_ignore="1">
      <summary>Directional pad right</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.DPadUp" documentation_ignore="1">
      <summary>Directional pad down</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftShoulder" documentation_ignore="1">
      <summary>Left bumper (shoulder) button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftStick" documentation_ignore="1">
      <summary>Left stick button (pressing the left stick)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickDown" documentation_ignore="1">
      <summary>Left stick is towards down</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickLeft" documentation_ignore="1">
      <summary>Left stick is towards the left</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickRight" documentation_ignore="1">
      <summary>Left stick is towards the right</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickUp" documentation_ignore="1">
      <summary>Left stick is towards up</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftTrigger" documentation_ignore="1">
      <summary>Left trigger</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightShoulder" documentation_ignore="1">
      <summary>Right bumper (shoulder) button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightStick" documentation_ignore="1">
      <summary>Right stick button (pressing the right stick)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightThumbstickDown" documentation_ignore="1">
      <summary>Right stick is towards down</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightThumbstickLeft" documentation_ignore="1">
      <summary>Right stick is towards the left</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightThumbstickRight" documentation_ignore="1">
      <summary>Right stick is towards the right</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightThumbstickUp" documentation_ignore="1">
      <summary>Right stick is towards up</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightTrigger" documentation_ignore="1">
      <summary>Right trigger</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.Start" documentation_ignore="1">
      <summary>START button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.X" documentation_ignore="1">
      <summary>X button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.Y" documentation_ignore="1">
      <summary>Y button</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadDeadZone">
      <summary>Specifies a type of dead zone processing to apply to Xbox 360 controller analog sticks when calling GamePad.GetState.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadDeadZone.Circular" documentation_ignore="1">
      <summary>The combined X and Y position of each stick is compared against the dead zone. This provides better control than IndependentAxes when the stick is used as a two-dimensional control surface, such as when controlling a character's view in a first-person game.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadDeadZone.IndependentAxes" documentation_ignore="1">
      <summary>The X and Y positions of each stick are compared against the dead zone independently. This setting is the default when calling GamePad.GetState.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadDeadZone.None" documentation_ignore="1">
      <summary>The values of each stick are not processed and are returned by GamePad.GetState as "raw" values. This is best if you intend to implement your own dead zone processing.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadType">
      <summary>Describes the type of a specified Xbox 360 controller.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.AlternateGuitar" documentation_ignore="1">
      <summary>Controller is an alternate guitar</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.ArcadeStick" documentation_ignore="1">
      <summary>Controller is an arcade stick</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.BigButtonPad" documentation_ignore="1">
      <summary>Controller is a big button pad</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.DancePad" documentation_ignore="1">
      <summary>Controller is a dance pad</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.DrumKit" documentation_ignore="1">
      <summary>Controller is a drum kit</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.FlightStick" documentation_ignore="1">
      <summary>Controller is a flight stick</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.GamePad" documentation_ignore="1">
      <summary>Controller is the Xbox 360 Controller</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.Guitar" documentation_ignore="1">
      <summary>Controller is a guitar</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.Unknown" documentation_ignore="1">
      <summary>Controller is an unknown type</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.Wheel" documentation_ignore="1">
      <summary>Controller is a wheel</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.KeyState">
      <summary>Identifies the state of a keyboard key.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.KeyState.Down" documentation_ignore="1">
      <summary>The key is pressed.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.KeyState.Up" documentation_ignore="1">
      <summary>The key is released.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Keys">
      <summary>Identifies a particular key on a keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.A" documentation_ignore="1">
      <summary>A key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Add" documentation_ignore="1">
      <summary>Add key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Apps" documentation_ignore="1">
      <summary>Applications key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Attn" documentation_ignore="1">
      <summary>Attn key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.B" documentation_ignore="1">
      <summary>B key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Back" documentation_ignore="1">
      <summary>BACKSPACE key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserBack" documentation_ignore="1">
      <summary>Windows 2000/XP: Browser Back key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserFavorites" documentation_ignore="1">
      <summary>Windows 2000/XP: Browser Favorites key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserForward" documentation_ignore="1">
      <summary>Windows 2000/XP: Browser Forward key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserHome" documentation_ignore="1">
      <summary>Windows 2000/XP: Browser Start and Home key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserRefresh" documentation_ignore="1">
      <summary>Windows 2000/XP: Browser Refresh key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserSearch" documentation_ignore="1">
      <summary>Windows 2000/XP: Browser Search key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserStop" documentation_ignore="1">
      <summary>Windows 2000/XP: Browser Stop key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.C" documentation_ignore="1">
      <summary>C key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.CapsLock" documentation_ignore="1">
      <summary>CAPS LOCK key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.ChatPadGreen" documentation_ignore="1">
      <summary>Green ChatPad key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.ChatPadOrange" documentation_ignore="1">
      <summary>Orange ChatPad key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Crsel" documentation_ignore="1">
      <summary>CrSel key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D" documentation_ignore="1">
      <summary>D key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D0" documentation_ignore="1">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D1" documentation_ignore="1">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D2" documentation_ignore="1">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D3" documentation_ignore="1">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D4" documentation_ignore="1">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D5" documentation_ignore="1">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D6" documentation_ignore="1">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D7" documentation_ignore="1">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D8" documentation_ignore="1">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D9" documentation_ignore="1">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Decimal" documentation_ignore="1">
      <summary>Decimal key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Delete" documentation_ignore="1">
      <summary>DEL key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Divide" documentation_ignore="1">
      <summary>Divide key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Down" documentation_ignore="1">
      <summary>DOWN ARROW key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.E" documentation_ignore="1">
      <summary>E key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.End" documentation_ignore="1">
      <summary>END key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Enter" documentation_ignore="1">
      <summary>ENTER key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.EraseEof" documentation_ignore="1">
      <summary>Erase EOF key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Escape" documentation_ignore="1">
      <summary>ESC key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Execute" documentation_ignore="1">
      <summary>EXECUTE key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Exsel" documentation_ignore="1">
      <summary>ExSel key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F" documentation_ignore="1">
      <summary>F key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F1" documentation_ignore="1">
      <summary>F1 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F10" documentation_ignore="1">
      <summary>F10 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F11" documentation_ignore="1">
      <summary>F11 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F12" documentation_ignore="1">
      <summary>F12 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F13" documentation_ignore="1">
      <summary>F13 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F14" documentation_ignore="1">
      <summary>F14 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F15" documentation_ignore="1">
      <summary>F15 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F16" documentation_ignore="1">
      <summary>F16 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F17" documentation_ignore="1">
      <summary>F17 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F18" documentation_ignore="1">
      <summary>F18 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F19" documentation_ignore="1">
      <summary>F19 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F2" documentation_ignore="1">
      <summary>F2 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F20" documentation_ignore="1">
      <summary>F20 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F21" documentation_ignore="1">
      <summary>F21 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F22" documentation_ignore="1">
      <summary>F22 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F23" documentation_ignore="1">
      <summary>F23 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F24" documentation_ignore="1">
      <summary>F24 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F3" documentation_ignore="1">
      <summary>F3 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F4" documentation_ignore="1">
      <summary>F4 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F5" documentation_ignore="1">
      <summary>F5 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F6" documentation_ignore="1">
      <summary>F6 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F7" documentation_ignore="1">
      <summary>F7 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F8" documentation_ignore="1">
      <summary>F8 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F9" documentation_ignore="1">
      <summary>F9 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.G" documentation_ignore="1">
      <summary>G key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.H" documentation_ignore="1">
      <summary>H key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Help" documentation_ignore="1">
      <summary>HELP key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Home" documentation_ignore="1">
      <summary>HOME key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.I" documentation_ignore="1">
      <summary>I key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Insert" documentation_ignore="1">
      <summary>INS key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.J" documentation_ignore="1">
      <summary>J key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.K" documentation_ignore="1">
      <summary>K key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.L" documentation_ignore="1">
      <summary>L key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.LaunchApplication1" documentation_ignore="1">
      <summary>Windows 2000/XP: Start Application 1 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.LaunchApplication2" documentation_ignore="1">
      <summary>Windows 2000/XP: Start Application 2 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.LaunchMail" documentation_ignore="1">
      <summary>Windows 2000/XP: Start Mail key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Left" documentation_ignore="1">
      <summary>LEFT ARROW key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.LeftAlt" documentation_ignore="1">
      <summary>Left ALT key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.LeftControl" documentation_ignore="1">
      <summary>Left CONTROL key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.LeftShift" documentation_ignore="1">
      <summary>Left SHIFT key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.LeftWindows" documentation_ignore="1">
      <summary>Left Windows key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.M" documentation_ignore="1">
      <summary>M key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.MediaNextTrack" documentation_ignore="1">
      <summary>Windows 2000/XP: Next Track key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.MediaPlayPause" documentation_ignore="1">
      <summary>Windows 2000/XP: Play/Pause Media key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.MediaPreviousTrack" documentation_ignore="1">
      <summary>Windows 2000/XP: Previous Track key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.MediaStop" documentation_ignore="1">
      <summary>Windows 2000/XP: Stop Media key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Multiply" documentation_ignore="1">
      <summary>Multiply key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.N" documentation_ignore="1">
      <summary>N key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.None" documentation_ignore="1">
      <summary>Reserved</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumLock" documentation_ignore="1">
      <summary>NUM LOCK key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad0" documentation_ignore="1">
      <summary>Numeric keypad 0 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad1" documentation_ignore="1">
      <summary>Numeric keypad 1 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad2" documentation_ignore="1">
      <summary>Numeric keypad 2 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad3" documentation_ignore="1">
      <summary>Numeric keypad 3 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad4" documentation_ignore="1">
      <summary>Numeric keypad 4 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad5" documentation_ignore="1">
      <summary>Numeric keypad 5 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad6" documentation_ignore="1">
      <summary>Numeric keypad 6 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad7" documentation_ignore="1">
      <summary>Numeric keypad 7 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad8" documentation_ignore="1">
      <summary>Numeric keypad 8 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad9" documentation_ignore="1">
      <summary>Numeric keypad 9 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.O" documentation_ignore="1">
      <summary>O key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Oem8" documentation_ignore="1">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemBackslash" documentation_ignore="1">
      <summary>Windows 2000/XP: The OEM angle bracket or backslash key on the RT 102 key keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemClear" documentation_ignore="1">
      <summary>CLEAR key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemCloseBrackets" documentation_ignore="1">
      <summary>Windows 2000/XP: The OEM close bracket key on a US standard keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemComma" documentation_ignore="1">
      <summary>Windows 2000/XP: For any country/region, the ',' key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemMinus" documentation_ignore="1">
      <summary>Windows 2000/XP: For any country/region, the '-' key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemOpenBrackets" documentation_ignore="1">
      <summary>Windows 2000/XP: The OEM open bracket key on a US standard keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemPeriod" documentation_ignore="1">
      <summary>Windows 2000/XP: For any country/region, the '.' key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemPipe" documentation_ignore="1">
      <summary>Windows 2000/XP: The OEM pipe key on a US standard keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemPlus" documentation_ignore="1">
      <summary>Windows 2000/XP: For any country/region, the '+' key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemQuestion" documentation_ignore="1">
      <summary>Windows 2000/XP: The OEM question mark key on a US standard keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemQuotes" documentation_ignore="1">
      <summary>Windows 2000/XP: The OEM singled/double quote key on a US standard keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemSemicolon" documentation_ignore="1">
      <summary>Windows 2000/XP: The OEM Semicolon key on a US standard keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemTilde" documentation_ignore="1">
      <summary>Windows 2000/XP: The OEM tilde key on a US standard keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.P" documentation_ignore="1">
      <summary>P key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Pa1" documentation_ignore="1">
      <summary>PA1 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.PageDown" documentation_ignore="1">
      <summary>PAGE DOWN key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.PageUp" documentation_ignore="1">
      <summary>PAGE UP key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Pause" documentation_ignore="1">
      <summary>PAUSE key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Play" documentation_ignore="1">
      <summary>Play key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Print" documentation_ignore="1">
      <summary>PRINT key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.PrintScreen" documentation_ignore="1">
      <summary>PRINT SCREEN key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.ProcessKey" documentation_ignore="1">
      <summary>Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Q" documentation_ignore="1">
      <summary>Q key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.R" documentation_ignore="1">
      <summary>R key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Right" documentation_ignore="1">
      <summary>RIGHT ARROW key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.RightAlt" documentation_ignore="1">
      <summary>Right ALT key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.RightControl" documentation_ignore="1">
      <summary>Right CONTROL key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.RightShift" documentation_ignore="1">
      <summary>Right SHIFT key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.RightWindows" documentation_ignore="1">
      <summary>Right Windows key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.S" documentation_ignore="1">
      <summary>S key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Scroll" documentation_ignore="1">
      <summary>SCROLL LOCK key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Select" documentation_ignore="1">
      <summary>SELECT key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.SelectMedia" documentation_ignore="1">
      <summary>Windows 2000/XP: Select Media key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Separator" documentation_ignore="1">
      <summary>Separator key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Sleep" documentation_ignore="1">
      <summary>Computer Sleep key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Space" documentation_ignore="1">
      <summary>SPACEBAR</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Subtract" documentation_ignore="1">
      <summary>Subtract key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.T" documentation_ignore="1">
      <summary>T key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Tab" documentation_ignore="1">
      <summary>TAB key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.U" documentation_ignore="1">
      <summary>U key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Up" documentation_ignore="1">
      <summary>UP ARROW key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.V" documentation_ignore="1">
      <summary>V key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.VolumeDown" documentation_ignore="1">
      <summary>Windows 2000/XP: Volume Down key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.VolumeMute" documentation_ignore="1">
      <summary>Windows 2000/XP: Volume Mute key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.VolumeUp" documentation_ignore="1">
      <summary>Windows 2000/XP: Volume Up key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.W" documentation_ignore="1">
      <summary>W key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.X" documentation_ignore="1">
      <summary>X key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Y" documentation_ignore="1">
      <summary>Y key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Z" documentation_ignore="1">
      <summary>Z key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Zoom" documentation_ignore="1">
      <summary>Zoom key</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.op_Equality(Microsoft.Xna.Framework.Media.Album,Microsoft.Xna.Framework.Media.Album)">
      <summary>Determines whether the specified  instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.Equals(Microsoft.Xna.Framework.Media.Album)">
      <summary>Determines whether the specified  is equal to this .</summary>
      <param name="other">to compare with this instance.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.Equals(System.Object)">
      <summary>Determines whether the specified System.Object is equal to this .</summary>
      <param name="obj">System.Object to compare with this instance.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the  is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.GetAlbumArt(System.IServiceProvider)">
      <summary>Gets the album art as a texture.</summary>
      <param name="serviceProvider">Content manager service provider, obtained through the Framework.Game.Services property.</param>
      <returns>Texture with the album art, or null if the album has no associated art.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.GetThumbnail(System.IServiceProvider)">
      <summary>Gets the album art thumbnail as a texture.</summary>
      <param name="serviceProvider">Content manager service provider, obtained through the Framework.Game.Services property.</param>
      <returns>Texture with the album art thumbnail, or null if the album has no associated thumbnail.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.op_Inequality(Microsoft.Xna.Framework.Media.Album,Microsoft.Xna.Framework.Media.Album)">
      <summary>Determines whether the specified  instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.ToString">
      <summary>Returns a System.String representation of this .</summary>
      <returns>System.String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Artist">
      <summary>Gets the Artist of the .</summary>
      <returns>Artist of this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Duration">
      <summary>Gets the duration of the .</summary>
      <returns>Duration of the album, as a System.TimeSpan structure.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Genre">
      <summary>Gets the Genre of the .</summary>
      <returns>Genre of this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.HasArt">
      <summary>Gets a value indicating whether the  has associated album art.</summary>
      <returns>true if this  has associated album art, false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Name">
      <summary>Gets the name of the .</summary>
      <returns>The name of this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Songs">
      <summary>Gets a SongCollection that contains the songs on the album.</summary>
      <returns>SongCollection containing the songs on this album.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Album">
      <summary>Provides access to an album in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.AlbumCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.AlbumCollection.Finalize">
      <summary>
    Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the .
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.AlbumCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the .</summary>
      <returns>System.Collections.Generic.IEnumerator`1 for the .</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.AlbumCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>System.Collections.IEnumerator that iterates through the collection.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.AlbumCollection.Count">
      <summary>Gets the number of Album objects in the .</summary>
      <returns>Number of Album objects in this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.AlbumCollection.Item(System.Int32)">
      <summary>Gets the Album at the specified index in the .</summary>
      <param name="index">Index of the Album to get.</param>
      <returns>A new Album representing the album at the specified index in this .  </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.AlbumCollection">
      <summary>A collection of albums in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.op_Equality(Microsoft.Xna.Framework.Media.Artist,Microsoft.Xna.Framework.Media.Artist)">
      <summary>Determines whether the specified  instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.Equals(System.Object)">
      <summary>Determines whether the specified System.Object is equal to this .</summary>
      <param name="obj">System.Object to compare with this instance.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.Equals(Microsoft.Xna.Framework.Media.Artist)">
      <summary>Determines whether the specified  is equal to this .</summary>
      <param name="other">to compare with this instance.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the  is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.op_Inequality(Microsoft.Xna.Framework.Media.Artist,Microsoft.Xna.Framework.Media.Artist)">
      <summary>Determines whether the specified  instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.ToString">
      <summary>Returns a System.String representation of the .</summary>
      <returns>System.String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Artist.Albums">
      <summary>Gets the AlbumCollection for the .</summary>
      <returns>AlbumCollection for this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Artist.Name">
      <summary>Gets the name of the .</summary>
      <returns>The name of this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Artist.Songs">
      <summary>Gets the SongCollection for the .</summary>
      <returns>SongCollection for this .</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Artist">
      <summary>Provides access to artist information in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.ArtistCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.ArtistCollection.Finalize">
      <summary>
    Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the .
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.ArtistCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the .</summary>
      <returns>System.Collections.Generic.IEnumerator`1 for the .</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.ArtistCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>System.Collections.IEnumerator that iterates through the collection.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.ArtistCollection.Count">
      <summary>Gets the number of Artist objects in the .</summary>
      <returns>Number of Artist objects in this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.ArtistCollection.Item(System.Int32)">
      <summary>Gets the Artist at the specified index in the .</summary>
      <param name="index">Index of the Artist to get.</param>
      <returns>A new Artist representing the artist at the specified index in this .</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.ArtistCollection">
      <summary>The collection of all artists in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.op_Equality(Microsoft.Xna.Framework.Media.Genre,Microsoft.Xna.Framework.Media.Genre)">
      <summary>Determines whether the specified  instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.Equals(System.Object)">
      <summary>Determines whether the specified System.Object is equal to this .</summary>
      <param name="obj">System.Object to compare with this instance.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.Equals(Microsoft.Xna.Framework.Media.Genre)">
      <summary>Determines whether the specified  is equal to this .</summary>
      <param name="other">to compare with this instance.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the  is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.op_Inequality(Microsoft.Xna.Framework.Media.Genre,Microsoft.Xna.Framework.Media.Genre)">
      <summary>Determines whether the specified  instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.ToString">
      <summary>Returns a System.String representation of the .</summary>
      <returns>System.String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Genre.Albums">
      <summary>Gets the AlbumCollection for the .</summary>
      <returns>AlbumCollection for this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Genre.Name">
      <summary>Gets the name of the .</summary>
      <returns>The name of this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Genre.Songs">
      <summary>Gets the SongCollection for the .</summary>
      <returns>SongCollection for this .</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Genre">
      <summary>Provides access to genre information in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.GenreCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.GenreCollection.Finalize">
      <summary>
    Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the .
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.GenreCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the .</summary>
      <returns>System.Collections.Generic.IEnumerator`1 for the .</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.GenreCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>System.Collections.IEnumerator that iterates through the collection.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.GenreCollection.Count">
      <summary>Gets the number of Genre objects in the .</summary>
      <returns>Number of Genre objects in this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.GenreCollection.Item(System.Int32)">
      <summary>Gets the Genre at the specified index in the .</summary>
      <param name="index">Index of the Genre to get.</param>
      <returns>A new Genre representing the genre at the specified index in this .</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.GenreCollection">
      <summary>The collection of all genres in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.#ctor(Microsoft.Xna.Framework.Media.MediaSource)">
      <summary>
    Initializes a new instance of the  class, using a specific media source to create the new media library.
   Reference page contains code sample.</summary>
      <param name="mediaSource">A media source that will be the source for the media library.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.#ctor">
      <summary>Initializes a new instance of the  class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.Dispose">
      <summary>Releases the resources used by the MediaLibrary.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.Finalize">
      <summary>
    Releases unmanaged resources and performs other cleanup operations before the  is reclaimed by garbage collection.
  </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Albums">
      <summary>Gets the AlbumCollection that contains all albums in the media library.</summary>
      <returns>AlbumCollection that contains all albums in the device's media library.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Artists">
      <summary>Gets the ArtistCollection that contains all artists in the media library.</summary>
      <returns>ArtistCollection that contains all artists in the device's media library.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Genres">
      <summary>Gets the GenreCollection that contains all genres in the media library.</summary>
      <returns>GenreCollection that contains all genres in the device's media library.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.MediaSource">
      <summary>Gets the MediaSource with which this media library was constructed.</summary>
      <returns>The MediaSource with which this media library was constructed.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Pictures">
      <summary>Gets the PictureCollection that contains all pictures in the media library.</summary>
      <returns>PictureCollection that contains all pictures in the device's media library.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Playlists">
      <summary>Gets the PlaylistCollection that contains all playlists in the media library.</summary>
      <returns>PlaylistCollection that contains all playlists in the device's media library.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.RootPictureAlbum">
      <summary>Gets the root PictureAlbum for all pictures in the media library.</summary>
      <returns>The root PictureAlbum for all pictures in the device's media library.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Songs">
      <summary>Gets the SongCollection that contains all songs in the media library.</summary>
      <returns>SongCollection that contains all songs in the device's media library.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaLibrary">
      <summary>Provides access to songs, playlists, and pictures in the device's media library. Reference page contains code sample.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Media.MediaPlayer.ActiveSongChanged">
      <summary>
    Raised when the active song changes due to active playback or due to explicit calls to the MediaPlayer.MoveNext or MediaPlayer.MovePrevious methods.
</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Media.MediaPlayer.MediaStateChanged">
      <summary>Raised when the media player play state changes.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.GetVisualizationData(Microsoft.Xna.Framework.Media.VisualizationData)">
      <summary>Retrieves visualization (frequency and sample) data for the currently-playing song. Reference page contains code sample.</summary>
      <param name="visualizationData">Visualization (frequency and sample) data for the currently playing song.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.MoveNext">
      <summary>Moves to the next song in the queue of playing songs.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.MovePrevious">
      <summary>Moves to the previous song in the queue of playing songs.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Pause">
      <summary>Pauses the currently playing song.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.SongCollection,System.Int32)">
      <summary>Plays a SongCollection, starting with the Song at the specified index. Reference page contains links to related code samples.</summary>
      <param name="songs">SongCollection to play.</param>
      <param name="index">Index of the song in the collection at which playback should begin.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.Song)">
      <summary>Plays a Song. Reference page contains links to related code samples.</summary>
      <param name="song">Song to play.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.SongCollection)">
      <summary>Plays a SongCollection. Reference page contains links to related code samples.</summary>
      <param name="songs">SongCollection to play.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Resume">
      <summary>Resumes a paused song.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Stop">
      <summary>Stops playing a song.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.GameHasControl">
      <summary>Determines whether the game has control of the background music.</summary>
      <returns>true if the game has control of the background music; otherwise, false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.IsMuted">
      <summary>Gets or set the muted setting for the media player.</summary>
      <returns>true if sound is muted; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.IsRepeating">
      <summary>Gets or sets the repeat setting for the media player.</summary>
      <returns>true if the current play queue is set to repeat; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.IsShuffled">
      <summary>Gets or sets the shuffle setting for the media player.</summary>
      <returns>true if the current play queue is set to shuffled; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.IsVisualizationEnabled">
      <summary>Gets or sets the visualization enabled setting for the media player.</summary>
      <returns>true if visualization is enabled; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.PlayPosition">
      <summary>Gets the play position within the currently playing song.</summary>
      <returns>Play position within the current song, as a System.TimeSpan structure.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.Queue">
      <summary>Gets the media playback queue, MediaQueue.</summary>
      <returns>The media playback queue, MediaQueue.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.State">
      <summary>Gets the media playback state, MediaState.</summary>
      <returns>The media playback state, MediaState.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.Volume">
      <summary>Gets or sets the media player volume.</summary>
      <returns>Media player volume, from 0.0f (silence) to 1.0f (full volume relative to the current device volume).</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaPlayer">
      <summary>Provides methods and properties to play, pause, resume, and stop songs.   also exposes shuffle, repeat, volume, play position, and visualization capabilities. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaQueue.ActiveSongIndex">
      <summary>Gets or sets the index of the current (active) song in the queue of playing songs.</summary>
      <returns>Index of the current song in the queue of playing songs.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaQueue.ActiveSong">
      <summary>Gets the current Song in the queue of playing songs.</summary>
      <returns>Current Song in the queue of playing songs.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaQueue.Count">
      <summary>Gets the count of songs in the .</summary>
      <returns>Count of songs in this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaQueue.Item(System.Int32)">
      <summary>Gets the Song at the specified index in the .</summary>
      <param name="index" />
      <returns>A new Song representing the song at the specified index in this .</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaQueue">
      <summary>Provides methods and properties to access and control the queue of playing songs.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaSource.GetAvailableMediaSources">
      <summary>Gets the available media sources. Reference page contains code sample.</summary>
      <returns>The available media sources.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaSource.ToString">
      <summary>Returns the name of this media source.</summary>
      <returns>The name of this media source.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaSource.MediaSourceType">
      <summary>
    Gets the MediaSourceType of this media source.</summary>
      <returns>
        The MediaSourceType of this media source.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaSource.Name">
      <summary>Gets the name of this media source.</summary>
      <returns>The media source name.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaSource">
      <summary>Provides methods and properties to access the source or sources from which the media will be read.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.op_Equality(Microsoft.Xna.Framework.Media.Picture,Microsoft.Xna.Framework.Media.Picture)">
      <summary>Determines whether the specified  instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.Equals(Microsoft.Xna.Framework.Media.Picture)">
      <summary>Determines whether the specified  is equal to this .</summary>
      <param name="other">to compare with this instance.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.Equals(System.Object)">
      <summary>Determines whether the specified System.Object is equal to this .</summary>
      <param name="obj">System.Object to compare with this instance.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the  is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.GetTexture(System.IServiceProvider)">
      <summary>Gets the picture as a texture.</summary>
      <param name="serviceProvider">Game service provider, obtained from the Framework.Game.Services property.</param>
      <returns>Texture with the graphical content of the picture.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.GetThumbnail(System.IServiceProvider)">
      <summary>Gets a thumbnail of the picture as a texture.</summary>
      <param name="serviceProvider">Game service provider, obtained from the Framework.Game.Services property.</param>
      <returns>Texture with a thumbnail of the picture's graphical content.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.op_Inequality(Microsoft.Xna.Framework.Media.Picture,Microsoft.Xna.Framework.Media.Picture)">
      <summary>Determines whether the specified  instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.ToString">
      <summary>Returns a System.String representation of the .</summary>
      <returns>System.String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Album">
      <summary>Gets the picture album that contains the picture.</summary>
      <returns>PictureAlbum that contains this picture.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Date">
      <summary>Gets the picture's date.</summary>
      <returns>Date and time associated with the picture's file, as a System.DateTime structure.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Height">
      <summary>Gets the picture's height.</summary>
      <returns>Height of this picture, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Name">
      <summary>Gets the name of the .</summary>
      <returns>The name of this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Width">
      <summary>Gets the picture's width.</summary>
      <returns>Width of this picture, in pixels.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Picture">
      <summary>Provides access to a picture in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.op_Equality(Microsoft.Xna.Framework.Media.PictureAlbum,Microsoft.Xna.Framework.Media.PictureAlbum)">
      <summary>Determines whether the specified  instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.Equals(System.Object)">
      <summary>Determines whether the specified System.Object is equal to this .</summary>
      <param name="obj">System.Object to compare with this instance.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.Equals(Microsoft.Xna.Framework.Media.PictureAlbum)">
      <summary>Determines whether the specified  is equal to this .</summary>
      <param name="other">to compare with this instance.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the  is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.op_Inequality(Microsoft.Xna.Framework.Media.PictureAlbum,Microsoft.Xna.Framework.Media.PictureAlbum)">
      <summary>Determines whether the specified  instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.ToString">
      <summary>Returns a System.String representation of the .</summary>
      <returns>System.String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbum.Albums">
      <summary>Gets the collection of picture albums that are contained within the picture album (that is, picture albums that are children of the picture album).</summary>
      <returns>PictureAlbumCollection that contains the picture albums that are children of this picture album.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbum.Name">
      <summary>Gets the name of the .</summary>
      <returns>The name of this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbum.Parent">
      <summary>Gets the parent picture album.</summary>
      <returns>PictureAlbum that is the parent of this picture album.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbum.Pictures">
      <summary>Gets the collection of pictures in this picture album.</summary>
      <returns>PictureCollection that contains the pictures in this picture album.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.PictureAlbum">
      <summary>Provides access to a picture album in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbumCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbumCollection.Finalize">
      <summary>
    Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the .
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbumCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>System.Collections.IEnumerator that iterates through the collection.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbumCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the .</summary>
      <returns>System.Collections.Generic.IEnumerator`1 for the .
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbumCollection.Count">
      <summary>Gets the number of PictureAlbum objects in the .</summary>
      <returns>Number of PictureAlbum objects in this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbumCollection.Item(System.Int32)">
      <summary>Gets the PictureAlbum at the specified index in the .</summary>
      <param name="index" />
      <returns>A new PictureAlbum representing the picture album at the specified index in this .</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.PictureAlbumCollection">
      <summary>A collection of picture albums in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureCollection.Finalize">
      <summary>
    Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the .
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>System.Collections.IEnumerator that iterates through the collection.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the .</summary>
      <returns>System.Collections.Generic.IEnumerator`1 for the .
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureCollection.Count">
      <summary>Gets the number of Picture objects in the .</summary>
      <returns>Number of Picture objects in this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureCollection.Item(System.Int32)">
      <summary>Gets the Picture at the specified index in the .</summary>
      <param name="index" />
      <returns>A new Picture representing the picture at the specified index in this .</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.PictureCollection">
      <summary>A collection of pictures in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.op_Equality(Microsoft.Xna.Framework.Media.Playlist,Microsoft.Xna.Framework.Media.Playlist)">
      <summary>Determines whether the specified  instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.Equals(Microsoft.Xna.Framework.Media.Playlist)">
      <summary>Determines whether the specified  is equal to this .</summary>
      <param name="other">to compare with this instance.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.Equals(System.Object)">
      <summary>Determines whether the specified System.Object is equal to this .</summary>
      <param name="obj">System.Object to compare with this instance.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the  is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.op_Inequality(Microsoft.Xna.Framework.Media.Playlist,Microsoft.Xna.Framework.Media.Playlist)">
      <summary>Determines whether the specified  instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.ToString">
      <summary>Returns a System.String representation of the .</summary>
      <returns>System.String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Playlist.Duration">
      <summary>Gets the duration of the .</summary>
      <returns>Duration of the playlist, as a System.TimeSpan structure.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Playlist.Name">
      <summary>Gets the name of the .</summary>
      <returns>The name of this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Playlist.Songs">
      <summary>Gets a SongCollection that contains the songs in the playlist.</summary>
      <returns>SongCollection containing the songs in this playlist.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Playlist">
      <summary>Provides access to a playlist in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PlaylistCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PlaylistCollection.Finalize">
      <summary>
    Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the .
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PlaylistCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>System.Collections.IEnumerator that iterates through the collection.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PlaylistCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the .</summary>
      <returns>System.Collections.Generic.IEnumerator`1 for the .
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PlaylistCollection.Count">
      <summary>Gets the number of Playlist objects in the .</summary>
      <returns>Number of Playlist objects in this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PlaylistCollection.Item(System.Int32)">
      <summary>Gets the Playlist at the specified index in the .</summary>
      <param name="index" />
      <returns>A new Playlist representing the playlist at the specified index in this .</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.PlaylistCollection">
      <summary>A collection of playlists in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.op_Equality(Microsoft.Xna.Framework.Media.Song,Microsoft.Xna.Framework.Media.Song)">
      <summary>Determines whether the specified  instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.Equals(Microsoft.Xna.Framework.Media.Song)">
      <summary>Determines whether the specified  is equal to this .</summary>
      <param name="other">to compare with this instance.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.Equals(System.Object)">
      <summary>Determines whether the specified System.Object is equal to this .</summary>
      <param name="obj">System.Object to compare with this instance.</param>
      <returns>true if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the  is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.op_Inequality(Microsoft.Xna.Framework.Media.Song,Microsoft.Xna.Framework.Media.Song)">
      <summary>Determines whether the specified  instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.ToString">
      <summary>Returns a System.String representation of the .</summary>
      <returns>System.String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Album">
      <summary>Gets the Album on which the  appears.</summary>
      <returns>Album on which this  appears.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Artist">
      <summary>Gets the Artist of the .</summary>
      <returns>Artist of this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Duration">
      <summary>Gets the duration of the .</summary>
      <returns>Duration of the song, as a System.TimeSpan structure.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Genre">
      <summary>Gets the Genre of the .</summary>
      <returns>Genre of this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.IsProtected">
      <summary>Gets a value that indicates whether the song is DRM protected content.</summary>
      <returns>true if this  is DRM protected; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.IsRated">
      <summary>Gets a value that indicates whether the song has been rated by the user.</summary>
      <returns>true if this  has been rated by the user; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Name">
      <summary>Gets the name of the .</summary>
      <returns>The name of this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.PlayCount">
      <summary>Gets the song play count.</summary>
      <returns>Song play count.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Rating">
      <summary>Gets the user's rating for the .</summary>
      <returns>User's rating for this , or 0 if the song is unrated.Ratings range from 1 (dislike the most) to 10 (like the most).When the user rates songs using the Zune device or Zune software, the rating is set to 8 for liked songs (shown as a heart) and to 2 or 3 for disliked songs (shown as a broken heart).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.TrackNumber">
      <summary>Gets the track number of the song on the song's Album.</summary>
      <returns>Track number of this  on the song's Album.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Song">
      <summary>Provides access to a song in the song library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.SongCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.SongCollection.Finalize">
      <summary>
    Releases unmanaged resources and performs other cleanup operations before garbage collection reclaims the .
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.SongCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>System.Collections.IEnumerator that iterates through the collection.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.SongCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the .</summary>
      <returns>System.Collections.Generic.IEnumerator`1 for the .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.SongCollection.Count">
      <summary>Gets the number of Song objects in the .</summary>
      <returns>Number of Song objects in this .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.SongCollection.Item(System.Int32)">
      <summary>Gets the Song at the specified index in the .</summary>
      <param name="index" />
      <returns>A new Song representing the song at the specified index in this .</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.SongCollection">
      <summary>A collection of songs in the song library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.VisualizationData.#ctor">
      <summary>Initializes a new instance of the VisualizationData class.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.VisualizationData.Frequencies">
      <summary>
    Returns a collection of floats that contain frequency data. </summary>
      <returns>A collection of floats that contain frequency data.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.VisualizationData.Samples">
      <summary>
    Returns a collection of floats that contain sample data. 
  </summary>
      <returns>A collection of floats that contain sample data.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.VisualizationData">
      <summary>Encapsulates visualization (frequency and sample) data for the currently-playing song.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaSourceType">
      <summary>Type of the media source.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Media.MediaSourceType.LocalDevice" documentation_ignore="1">
      <summary>A local device.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Media.MediaSourceType.WindowsMediaConnect" documentation_ignore="1">
      <summary>A Windows Media Connect device.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaState">
      <summary>Media playback state (playing, paused, or stopped).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Media.MediaState.Paused" documentation_ignore="1">
      <summary>Media playback is paused.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Media.MediaState.Playing" documentation_ignore="1">
      <summary>Media is currently playing.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Media.MediaState.Stopped" documentation_ignore="1">
      <summary>Media playback is stopped.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.AvailableNetworkSession.CurrentGamerCount">
      <summary>Gets the number of gamers in the session.</summary>
      <returns>Number of gamers currently in the session.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.AvailableNetworkSession.HostGamertag">
      <summary>Gets the gamertag of the session host.</summary>
      <returns>Name of the gamertag.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.AvailableNetworkSession.OpenPrivateGamerSlots">
      <summary>Gets the number of private player slots.</summary>
      <returns>Number of reserved private slots.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.AvailableNetworkSession.OpenPublicGamerSlots">
      <summary>Gets the number of public player slots.</summary>
      <returns>Number of public slots.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.AvailableNetworkSession.QualityOfService">
      <summary>Gets an estimate of the quality of network service between this local machine and the remote session. </summary>
      <returns>An estimate of the quality of network service between this local machine and the remote session. Initially the QualityOfService.IsAvailable property will be set to false, and all the other properties of the returned QualityOfService instance will be zero, but after the probing finishes this will become true and the other properties will be filled in with some actual data.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.AvailableNetworkSession.SessionProperties">
      <summary>Gets any custom properties that have been attached to the session.</summary>
      <returns>Any custom properties that have been attached to the session.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.AvailableNetworkSession">
      <summary>Describes a multiplayer session that can be joined. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.Dispose">
      <summary>Immediately releases the collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.Finalize">
      <summary>Allows Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.Finalize to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection">
      <summary>Represents a collection of sessions available for joining. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.GameEndedEventArgs.#ctor">
      <summary>Creates an instance of GameEndedEventArgs.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.GameEndedEventArgs">
      <summary>Represents the arguments passed to a NetworkSession.GameEnded event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.GamerJoinedEventArgs.#ctor(Microsoft.Xna.Framework.Net.NetworkGamer)">
      <summary>Creates an instance of GamerJoinedEventArgs.</summary>
      <param name="gamer">The gamer who just joined the session.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.GamerJoinedEventArgs.Gamer">
      <summary>Gets the gamer who just joined the session.</summary>
      <returns>The gamer who just joined the session.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.GamerJoinedEventArgs">
      <summary>Represents the arguments passed to a NetworkSession.GamerJoined event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.GamerLeftEventArgs.#ctor(Microsoft.Xna.Framework.Net.NetworkGamer)">
      <summary>Creates an instance of GamerLeftEventArgs.</summary>
      <param name="gamer">The gamer who just left the session.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.GamerLeftEventArgs.Gamer">
      <summary>Gets the gamer who just left the session.</summary>
      <returns>The gamer who just left the session.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.GamerLeftEventArgs">
      <summary>Represents the arguments passed to a NetworkSession.GamerLeft event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.GameStartedEventArgs.#ctor">
      <summary>Creates an instance of GameStartedEventArgs.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.GameStartedEventArgs">
      <summary>Represents the arguments passed to a NetworkSession.GameStarted event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.HostChangedEventArgs.#ctor(Microsoft.Xna.Framework.Net.NetworkGamer,Microsoft.Xna.Framework.Net.NetworkGamer)">
      <summary>Creates an instance of HostChangedEventArgs.</summary>
      <param name="oldHost">The player who was the previous session host.</param>
      <param name="newHost">The player who is the new host of the multiplayer session.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.HostChangedEventArgs.NewHost">
      <summary>Gets the new host of the session.</summary>
      <returns>The player who is the new host of the multiplayer session.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.HostChangedEventArgs.OldHost">
      <summary>Gets the player who was the previous session host.</summary>
      <returns>The player who was the previous session host.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.HostChangedEventArgs">
      <summary>Represents the arguments passed to a HostChanged event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs.#ctor(Microsoft.Xna.Framework.GamerServices.SignedInGamer)">
      <summary>Creates a new instance of InviteAcceptedEventArgs.</summary>
      <param name="gamer">The player who has accepted the game invitation.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs.Gamer">
      <summary>Gets the gamer who accepted the game invitation.</summary>
      <returns>The gamer accepting the game invitation.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs">
      <summary>Represents the arguments passed to a NetworkSession.InviteAccepted event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.EnableSendVoice(Microsoft.Xna.Framework.Net.NetworkGamer,System.Boolean)">
      <summary>Specifies whether voice data should be sent to, or received from, the specified remote gamer.</summary>
      <param name="remoteGamer">A remote gamer in the session.</param>
      <param name="enable">true if voice is enabled; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.ReceiveData(System.Byte[],System.Int32,Microsoft.Xna.Framework.Net.NetworkGamer@)">
      <summary>Reads the next incoming packet using the specified values. Reference page contains links to related code samples.</summary>
      <param name="data">Storage for the network packet data.</param>
      <param name="offset">Offset, in bytes, to begin reading data.</param>
      <param name="sender">Gamer who sent this packet.</param>
      <returns>Number of bytes read from the network packet. Returns 0 if no packet is available.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.ReceiveData(Microsoft.Xna.Framework.Net.PacketReader,Microsoft.Xna.Framework.Net.NetworkGamer@)">
      <summary>
    Reads the next incoming packet and copies the packet data into the specified reader object.
   Reference page contains links to related code samples.</summary>
      <param name="data">Network packet data.</param>
      <param name="sender">Gamer who sent this packet.</param>
      <returns>Number of bytes read from the network packet. Returns 0 if no packet is available.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.ReceiveData(System.Byte[],Microsoft.Xna.Framework.Net.NetworkGamer@)">
      <summary>Reads the next incoming packet using the specified values. Reference page contains links to related code samples.</summary>
      <param name="data">Storage for the network packet data.</param>
      <param name="sender">Gamer who sent this packet.</param>
      <returns>Number of bytes read from the network packet. Returns 0 if no packet is available.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SendData(System.Byte[],System.Int32,System.Int32,Microsoft.Xna.Framework.Net.SendDataOptions)">
      <summary>Sends a selected portion of a byte array to all gamers in a session. Reference page contains links to related code samples.</summary>
      <param name="data">Byte array containing session data.</param>
      <param name="offset">Offset, in bytes, to the start of the data.</param>
      <param name="count">Amount, in bytes, of data sent.</param>
      <param name="options">Enumeration containing data send options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SendData(System.Byte[],System.Int32,System.Int32,Microsoft.Xna.Framework.Net.SendDataOptions,Microsoft.Xna.Framework.Net.NetworkGamer)">
      <summary>Sends a selected portion of a byte array to the specified gamer. Reference page contains links to related code samples.</summary>
      <param name="data">Byte array containing session data.</param>
      <param name="offset">Offset, in bytes, to the start of the data.</param>
      <param name="count">Amount, in bytes, of data sent.</param>
      <param name="options">Enumeration containing data send options.</param>
      <param name="recipient">Gamer to receive the data packet.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SendData(Microsoft.Xna.Framework.Net.PacketWriter,Microsoft.Xna.Framework.Net.SendDataOptions,Microsoft.Xna.Framework.Net.NetworkGamer)">
      <summary>Sends a network packet to the specified gamer in a session. Reference page contains links to related code samples.</summary>
      <param name="data">Byte array containing session data.</param>
      <param name="options">Enumeration containing data send options.</param>
      <param name="recipient">Gamer receiving the data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SendData(Microsoft.Xna.Framework.Net.PacketWriter,Microsoft.Xna.Framework.Net.SendDataOptions)">
      <summary>Sends a network packet to all gamers in a session. Reference page contains links to related code samples.</summary>
      <param name="data">Byte array containing session data.</param>
      <param name="options">Enumeration containing data send options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SendData(System.Byte[],Microsoft.Xna.Framework.Net.SendDataOptions,Microsoft.Xna.Framework.Net.NetworkGamer)">
      <summary>Sends a byte array to the specified gamer. Reference page contains links to related code samples.</summary>
      <param name="data">Byte array containing session data.</param>
      <param name="options">Enumeration containing data send options.</param>
      <param name="recipient">Gamer to receive the data packet.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SendData(System.Byte[],Microsoft.Xna.Framework.Net.SendDataOptions)">
      <summary>Sends a byte array to all gamers in a session. Reference page contains links to related code samples.</summary>
      <param name="data">Byte array containing session data.</param>
      <param name="options">Enumeration containing data send options.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.LocalNetworkGamer.IsDataAvailable">
      <summary>Determines if there is incoming packet data for this player.</summary>
      <returns>true if there are one or more packets waiting; otherwise false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.LocalNetworkGamer.SignedInGamer">
      <summary>Gets the Framework.GamerServices.SignedInGamer instance for this Microsoft.Xna.Framework.Net.LocalNetworkGamer.SignedInGamer object.</summary>
      <returns>
        The related Framework.GamerServices.SignedInGamer instance.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.LocalNetworkGamer">
      <summary>Represents a local player in a network session.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of NetworkException with the specified error message and the inner exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The inner exception related to this exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkException.#ctor(System.String)">
      <summary>Initializes a new instance of NetworkException with the specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkException.#ctor">
      <summary>Creates an empty instance of NetworkException.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkException">
      <summary>Thrown if there is a network communication failure.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.HasVoice">
      <summary>Determines if the player has a voice headset.</summary>
      <returns>true if a headset is present; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.Id">
      <summary>
    Gets a unique identifier that can be used to refer to this gamer in network packets. 
  </summary>
      <returns>A unique identifier that can be used to refer to this gamer in network packets.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.IsGuest">
      <summary>Determines whether this gamer is logged in as a guest profile.</summary>
      <returns>true if this gamer is logged in as a guest profile; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.IsHost">
      <summary>Determines if the player is the host of the multiplayer session.</summary>
      <returns>true if the player is the host; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.IsLocal">
      <summary>Determines if the player is playing on a local machine.</summary>
      <returns>true if the player is local; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.IsMutedByLocalUser">
      <summary>Determines if the player is muted by one or more local users.</summary>
      <returns>true if the player is muted by one or more players in the session; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.IsPrivateSlot">
      <summary>Determines if the player occupies a reserved private session slot.</summary>
      <returns>true if the player occupies a reserved private session slot; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.IsReady">
      <summary>Determines whether the gamer is ready to leave the lobby screen and begin gameplay. Reference page contains links to related code samples.</summary>
      <returns>true if the gamer is ready to start playing; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.IsTalking">
      <summary>Determines whether the gamer is currently sending voice data.</summary>
      <returns>true if the gamer is sending voice data; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.Machine">
      <summary>
    Gets an object representing the physical gaming machine this NetworkGamer is playing on.
  </summary>
      <returns>
        An object representing the physical gaming machine this NetworkGamer is playing on.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.RoundtripTime">
      <summary>Gets an estimate of the network latency involved in sending a packet round trip from the local machine to this gamer and back again. </summary>
      <returns>An estimate of the network latency involved in sending a packet round trip from the local machine to this gamer and back again.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkGamer.Session">
      <summary>Gets the multiplayer session of the gamer.</summary>
      <returns>Session that contains the gamer.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkGamer">
      <summary>
    Represents a player in a network session. 
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkMachine.RemoveFromSession">
      <summary>Forcibly removes this machine from the session.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkMachine.Gamers">
      <summary>Gets a collection of all the gamers who are playing on this machine.</summary>
      <returns>A collection of all the gamers who are playing on this machine.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkMachine">
      <summary>
    Represents a physical machine (such as single Xbox 360 console or Windows-based computer) that is participating in a multiplayer session. It can be used to detect when more than one NetworkGamer is playing on the same actual machine.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkNotAvailableException.#ctor(System.String,System.Exception)">
      <summary>Constructs an exception with the specified error message and inner exception.</summary>
      <param name="message">Error message to associate with this exception.</param>
      <param name="innerException">Inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkNotAvailableException.#ctor(System.String)">
      <summary>Constructs an exception with the specified error message.</summary>
      <param name="message">Error message to associate with this exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkNotAvailableException.#ctor">
      <summary>Constructs an empty exception.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkNotAvailableException">
      <summary>Exception thrown if no network is available.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Net.NetworkSession.GameEnded">
      <summary>Occurs when the game moves from gameplay to the lobby. Reference page contains links to related code samples.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Net.NetworkSession.GamerJoined">
      <summary>
    Occurs when a new player joins a multiplayer session. 
   Reference page contains links to related code samples.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Net.NetworkSession.GamerLeft">
      <summary>Occurs when a player leaves the multiplayer session. Reference page contains links to related code samples.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Net.NetworkSession.GameStarted">
      <summary>Occurs when the game moves from the lobby into actual gameplay. Reference page contains links to related code samples.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Net.NetworkSession.HostChanged">
      <summary>
    Occurs when the session host has changed.
  </summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Net.NetworkSession.InviteAccepted">
      <summary>Event that occurs when a user has accepted an invite to join a network session.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Net.NetworkSession.SessionEnded">
      <summary>Occurs when the multiplayer session ends. Reference page contains links to related code samples.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSession.MaxSupportedGamers">
      <summary>Maximum number of gamers supported in a session.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.AddLocalGamer(Microsoft.Xna.Framework.GamerServices.SignedInGamer)">
      <summary>Adds the specified local gamer profile to the network session.</summary>
      <param name="gamer">The gamer to add to the network session</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.GamerServices.SignedInGamer},System.Int32,System.Int32,Microsoft.Xna.Framework.Net.NetworkSessionProperties,System.AsyncCallback,System.Object)">
      <summary>Starts hosting a new multiplayer session.
  </summary>
      <param name="sessionType">Type of session being created.</param>
      <param name="localGamers">Collection of local gamers to participate in the network session.  The first gamer in the collection becomes the host, and the others are added to the session.</param>
      <param name="maxGamers">Maximum number of players allowed in this network session.  For Windows- or Xbox 360-based games, this value must be between 2 and 31; 31 is the maximum number of players supported in a session.  For Zune-based games, this value must be between 2 and 8; 8 is the maximum number of players supported in the session.</param>
      <param name="privateGamerSlots">Number of reserved private session slots created for the session.  This value must be less than maximumGamers.</param>
      <param name="sessionProperties">Properties of the session being created.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
      <returns>An System.IAsyncResult used to track the progress of the method.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Starts hosting a new multiplayer session.
  </summary>
      <param name="sessionType">Type of session being created.</param>
      <param name="maxLocalGamers">Maximum number of local players on the same gaming machine in this network session.</param>
      <param name="maxGamers">Maximum number of players allowed in this network session.  For Windows- or Xbox 360-based games, this value must be between 2 and 31; 31 is the maximum number of players supported in a session.  For Zune-based games, this value must be between 2 and 8; 8 is the maximum number of players supported in the session.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
      <returns>An System.IAsyncResult used to track the progress of the method.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Net.NetworkSessionProperties,System.AsyncCallback,System.Object)">
      <summary>
      Starts hosting a new multiplayer session.
    </summary>
      <param name="sessionType">Type of session being created.</param>
      <param name="maxLocalGamers">Maximum number of local players on the same gaming machine in this network session.</param>
      <param name="maxGamers">Maximum number of players allowed in this network session.  For Windows- or Xbox 360-based games, this value must be between 2 and 31; 31 is the maximum number of players supported in a session.  For Zune-based games, this value must be between 2 and 8; 8 is the maximum number of players supported in the session.</param>
      <param name="privateGamerSlots">Number of reserved private session slots created for the session.  This value must be less than maximumGamers.</param>
      <param name="sessionProperties">Properties of the session being created.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
      <returns>An System.IAsyncResult used to track the progress of the method. Call EndCreate to access these results.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginFind(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.GamerServices.SignedInGamer},Microsoft.Xna.Framework.Net.NetworkSessionProperties,System.AsyncCallback,System.Object)">
      <summary>Starts a matchmaking query to search for available multiplayer sessions, specifying a collection of local gamers to add to the network session.</summary>
      <param name="sessionType">Type of session sought.</param>
      <param name="localGamers">Collection of local gamers to participate in the network session.  The first gamer in the collection becomes the host, and the others are added to the session.</param>
      <param name="searchProperties">Optional session properties to match during the search.  If this argument is null, the query results will not be filtered based on the session properties of available sessions.  If any of the search property values in searchProperties are specified, only sessions with matching properties will be returned by the query. null items in the searchProperties collection will match to any value for that session property.</param>
      <param name="callback">Method to be called once the asynchronous operation has finished.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
      <returns>
        An System.IAsyncResult used to track the progress of the method.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginFind(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Int32,Microsoft.Xna.Framework.Net.NetworkSessionProperties,System.AsyncCallback,System.Object)">
      <summary>Starts a matchmaking query to search for available multiplayer sessions.</summary>
      <param name="sessionType">Type of session sought.</param>
      <param name="maxLocalGamers">Maximum number of local players on the same gaming machine in this network session.</param>
      <param name="searchProperties">Optional session properties to match during the search.  If this argument is null, the query results will not be filtered based on the session properties of available sessions.  If any of the search property values in searchProperties are specified, only sessions with matching properties will be returned by the query. null items in the searchProperties collection will match to any value for that session property.</param>
      <param name="callback">Method to be called once the asynchronous operation has finished.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
      <returns>An System.IAsyncResult used to track the progress of the method.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginJoinInvited(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.GamerServices.SignedInGamer},System.AsyncCallback,System.Object)">
      <summary>
    Starts joining an existing network session in response to an NetworkSession.InviteAccepted notification event with the specified collection of local gamers.</summary>
      <param name="localGamers">Collection of local gamers to participate in the network session.  The first gamer in the collection becomes the host, and the others are added to the session.</param>
      <param name="callback">Method to be called at the conclusion of the asynchronous operation.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
      <returns>An System.IAsyncResult used to track the progress of the method.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginJoinInvited(System.Int32,System.AsyncCallback,System.Object)">
      <summary>
    Starts joining an existing network session in response to an NetworkSession.InviteAccepted notification event.
  </summary>
      <param name="maxLocalGamers">Maximum number of local players on the same gaming machine in this network session.</param>
      <param name="callback">Method to be called at the conclusion of the asynchronous operation.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
      <returns>An System.IAsyncResult used to track the progress of the method.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.BeginJoin(Microsoft.Xna.Framework.Net.AvailableNetworkSession,System.AsyncCallback,System.Object)">
      <summary>Starts a join operation for the specified multiplayer session.</summary>
      <param name="availableSession">Session the gamer is attempting to join.</param>
      <param name="callback">The method to be called once the asynchronous operation has finished.</param>
      <param name="asyncState">State of the asynchronous operation.</param>
      <returns>An System.IAsyncResult used to track the progress of the method. Call EndJoin to access these results.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Create(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.GamerServices.SignedInGamer},System.Int32,System.Int32,Microsoft.Xna.Framework.Net.NetworkSessionProperties)">
      <summary>Starts hosting a new multiplayer session.</summary>
      <param name="sessionType">Type of session being hosted.</param>
      <param name="localGamers">Collection of local gamers to participate in the network session.  The first gamer in the collection becomes the host, and the others are added to the session.</param>
      <param name="maxGamers">Maximum number of players allowed in this network session.  For Windows- or Xbox 360-based games, this value must be between 2 and 31; 31 is the maximum number of players supported in a session.  For Zune-based games, this value must be between 2 and 8; 8 is the maximum number of players supported in the session.</param>
      <param name="privateGamerSlots">Number of reserved private session slots created for the session.  This value must be less than maxGamers.</param>
      <param name="sessionProperties">Properties of the session being created.</param>
      <returns>The newly hosted session.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Create(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Int32,System.Int32)">
      <summary>Starts hosting a new multiplayer session.</summary>
      <param name="sessionType">Type of session being hosted.</param>
      <param name="maxLocalGamers">Maximum number of local players on the same gaming machine in this network session.</param>
      <param name="maxGamers">Maximum number of players allowed in this network session.  For Windows- or Xbox 360-based games, this value must be between 2 and 31; 31 is the maximum number of players supported in a session.  For Zune-based games, this value must be between 2 and 8; 8 is the maximum number of players supported in the session.</param>
      <returns>The newly hosted session.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Create(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Net.NetworkSessionProperties)">
      <summary>Starts hosting a new multiplayer session.</summary>
      <param name="sessionType">Type of session being hosted.</param>
      <param name="maxLocalGamers">Maximum number of local players on the same gaming machine in this network session.</param>
      <param name="maxGamers">Maximum number of players allowed in this network session.  For Windows- or Xbox 360-based games, this value must be between 2 and 31; 31 is the maximum number of players supported in a session.  For Zune-based games, this value must be between 2 and 8; 8 is the maximum number of players supported in the session.</param>
      <param name="privateGamerSlots">Number of reserved private session slots created for the session.  This value must be less than maxGamers.</param>
      <param name="sessionProperties">Properties of the session being created.</param>
      <returns>The newly hosted session.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Dispose">
      <summary>Ends the current multiplayer session.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.EndCreate(System.IAsyncResult)">
      <summary>Gets the result from a BeginCreate asynchronous call.</summary>
      <param name="result">An System.IAsyncResult used to track the progress of the operation.</param>
      <returns>The session being created.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.EndFind(System.IAsyncResult)">
      <summary>Gets the result from a NetworkSession.BeginFind asynchronous call.</summary>
      <param name="result">An System.IAsyncResult used to track the progress of the operation.</param>
      <returns>Collection of sessions matching the search criteria.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.EndGame">
      <summary>Changes the session state from NetworkSessionState.Playing to NetworkSessionState.Lobby.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.EndJoinInvited(System.IAsyncResult)">
      <summary>Gets the result from a NetworkSession.BeginJoinInvited asynchronous call.</summary>
      <param name="result">An System.IAsyncResult used to track the progress of the operation.</param>
      <returns>The session being joined by the gamer.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.EndJoin(System.IAsyncResult)">
      <summary>Gets the result from a NetworkSession.BeginJoin asynchronous call.</summary>
      <param name="result">An System.IAsyncResult used to track the progress of the operation.</param>
      <returns>The session being joined by the gamer.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.FindGamerById(System.Byte)">
      <summary>
    Looks up the network gamer with the specified ID.</summary>
      <param name="gamerId">Identifier specifying the network gamer for which to search.</param>
      <returns>Network gamer matching the requested ID, or null if no matching gamer was found.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Find(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.GamerServices.SignedInGamer},Microsoft.Xna.Framework.Net.NetworkSessionProperties)">
      <summary>Issues a matchmaking query, searching for available multiplayer sessions. Reference page contains links to related code samples.</summary>
      <param name="sessionType">Type of session sought.</param>
      <param name="localGamers">Collection of local gamers to participate in the network session.  The first gamer in the collection becomes the host, and the others are added to the session.</param>
      <param name="searchProperties">Optional session properties to match during the search.  If this argument is null, the query results will not be filtered based on the session properties of available sessions.  If any of the search property values in searchProperties are specified, only sessions with matching properties will be returned by the query. null items in the searchProperties collection will match to any value for that session property.</param>
      <returns>Collection of available network multiplayer sessions.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Find(Microsoft.Xna.Framework.Net.NetworkSessionType,System.Int32,Microsoft.Xna.Framework.Net.NetworkSessionProperties)">
      <summary>Issues a matchmaking query, searching for available multiplayer sessions. Reference page contains links to related code samples.</summary>
      <param name="sessionType">Type of session sought.</param>
      <param name="maxLocalGamers">Maximum number of local players on the same gaming machine in this network session.</param>
      <param name="searchProperties">Optional session properties to match during the search.  If this argument is null, the query results will not be filtered based on the session properties of available sessions.  If any of the search property values in searchProperties are specified, only sessions with matching properties will be returned by the query. null items in the searchProperties collection will match to any value for that session property.</param>
      <returns>Collection of available network multiplayer sessions.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.JoinInvited(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.GamerServices.SignedInGamer})">
      <summary>
    Joins an existing network session in response to an NetworkSession.InviteAccepted notification event. 
  </summary>
      <param name="localGamers">Collection of local gamers to participate in the network session.  The first gamer in the collection becomes the host, and the others are added to the session.</param>
      <returns>The network session.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.JoinInvited(System.Int32)">
      <summary>
    Joins an existing network session in response to an NetworkSession.InviteAccepted notification event. 
  </summary>
      <param name="maxLocalGamers">Maximum number of local players on the same gaming machine in this network session.</param>
      <returns>The network session.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Join(Microsoft.Xna.Framework.Net.AvailableNetworkSession)">
      <summary>Joins an existing multiplayer session. Reference page contains links to related code samples.</summary>
      <param name="availableSession">An existing multiplayer session.</param>
      <returns>Session joined by the gamer.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.ResetReady">
      <summary>Resets the NetworkGamer.IsReady property of all session gamers.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.StartGame">
      <summary>Changes the session state from NetworkSessionState.Lobby to NetworkSessionState.Playing.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSession.Update">
      <summary>Updates the state of the multiplayer session.
  </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.AllGamers">
      <summary>Gets the collection of gamers currently in the session.</summary>
      <returns>Collection of gamers in the session.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.AllowHostMigration">
      <summary>
    Gets or sets whether host migration is allowed. This can be read by any machine in the session, but can only be changed by the host.  The default value is false indicating that host migration is disabled.
   Reference page contains links to related conceptual articles.</summary>
      <returns>true to enable host migration; false to disable host migration.  The default value is false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.AllowJoinInProgress">
      <summary>
    Gets or sets whether join-in-progress is allowed.  If the host enables this setting, new machines will be able to join at any time. The default value is false, indicating that join-in-progress is disabled.  Microsoft.Xna.Framework.Net.NetworkSession.AllowJoinInProgress can be read by any machine in the session, but can only be changed by the host.
   Reference page contains links to related code samples.</summary>
      <returns>true to enable join-in-progress, false otherwise.  The default value is false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.BytesPerSecondReceived">
      <summary>Gets a performance counter recording the amount of data being received from the network.
  </summary>
      <returns>A performance counter recording the amount of data being received from the network.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.BytesPerSecondSent">
      <summary> Gets a performance counter recording the amount of data being sent over the network. 
  </summary>
      <returns>A performance counter recording the amount of data being sent over the network.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.Host">
      <summary>Gets the current host of the multiplayer session.</summary>
      <returns>The gamer currently hosting the session.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.IsEveryoneReady">
      <summary>Determines whether all gamers are ready to enter the session. Reference page contains links to related code samples.</summary>
      <returns>true if all gamers are ready to leave the lobby screen and begin gameplay. This state is indicated by a setting of true for the NetworkGamer.IsReady property.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.IsHost">
      <summary>Determines whether this machine is the session host.</summary>
      <returns>true if this machine is the session host; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.LocalGamers">
      <summary>Get the collection of local gamers for a multiplayer session.</summary>
      <returns>Collection of local gamers of a network session. For a complete collection of gamers, access the AllGamers property.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.MaxGamers">
      <summary>Gets or sets the maximum number of players able to join this multiplayer session.</summary>
      <returns>Maximum number of players supported by the multiplayer session. Only the host can modify this value.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.PrivateGamerSlots">
      <summary>Gets or sets the number of private slots reserved for gamers who join using an invitation.</summary>
      <returns>Number of private slots.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.RemoteGamers">
      <summary>Gets the collection of remote gamers for a multiplayer session.</summary>
      <returns>Collection of remote gamers of a network session. For a complete collection of gamers, access the AllGamers property.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.SessionProperties">
      <summary>Gets any custom properties that have been attached to the session.</summary>
      <returns>Any custom properties that have been attached to the session.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.SessionState">
      <summary>Gets the current state of a multiplayer session.</summary>
      <returns>Current state of the session.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.SessionType">
      <summary>Gets the current multiplayer session type.</summary>
      <returns>The type of the multiplayer session.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.SimulatedLatency">
      <summary>Gets or sets the amount of simulated network latency. </summary>
      <returns>The amount of simulated network latency, in milliseconds. The default value is 0.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSession.SimulatedPacketLoss">
      <summary>Gets or sets the amount of simulated packet loss. </summary>
      <returns>The amount of simulated packet loss, expressed as any fractional probability in the range 0 to 1, with 1 causing 100% packet loss.  The default value is zero.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSession">
      <summary>Represents a multiplayer game session. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs.#ctor(Microsoft.Xna.Framework.Net.NetworkSessionEndReason)">
      <summary>Creates an instance of NetworkSessionEndedEventArgs.</summary>
      <param name="endReason">Reason for ending the session.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs.EndReason">
      <summary>Gets the reason for ending a session.</summary>
      <returns>Reason for ending the session.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs">
      <summary>Represents the arguments passed to a NetworkSession.SessionEnded event. These arguments are passed to event handlers when a session ends.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionJoinException.#ctor(System.String,System.Exception)">
      <summary>Creates an instance of Microsoft.Xna.Framework.Net.NetworkSessionJoinException(System.String,System.Exception) with the specified error message and inner exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The inner exception related to this exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionJoinException.#ctor(System.String)">
      <summary>Creates an instance of Microsoft.Xna.Framework.Net.NetworkSessionJoinException(System.String) with the specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionJoinException.#ctor(System.String,Microsoft.Xna.Framework.Net.NetworkSessionJoinError)">
      <summary>Creates an instance of Microsoft.Xna.Framework.Net.NetworkSessionJoinException(System.String,Microsoft.Xna.Framework.Net.NetworkSessionJoinError) with the specified error and additional information on the exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="joinError">Reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionJoinException.#ctor">
      <summary>Creates an empty instance of Microsoft.Xna.Framework.Net.NetworkSessionJoinException.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionJoinException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>When overridden in a derived class, returns information about the exception.</summary>
      <param name="info">Information necessary for serialization and deserialization of the session item.</param>
      <param name="context">Information necessary for the source and destination of a given serialized stream. Also provides an additional caller-defined context.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSessionJoinException.JoinError">
      <summary>Gets or sets a more detailed description of the session join failure.</summary>
      <returns>Contains information about the session join failure.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSessionJoinException">
      <summary>Thrown if an error was encountered while joining a session. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.#ctor">
      <summary>Creates an empty instance of Microsoft.Xna.Framework.Net.NetworkSessionProperties.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.Add(System.Nullable{System.Int32})">
      <summary>The Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.Add(System.Nullable{System.Int32}) interface method is not supported by NetworkSessionProperties.</summary>
      <param name="item">The value to add.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.Clear">
      <summary>
    The Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.Clear interface method is not supported by NetworkSessionProperties.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.Contains(System.Nullable{System.Int32})">
      <summary>Checks whether the collection contains the specified value.</summary>
      <param name="item">The value to search for.</param>
      <returns>true if the collection contains the specified value; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.CopyTo(System.Nullable{System.Int32}[],System.Int32)">
      <summary>Copies the contents of the collection to an array.</summary>
      <param name="array">The array to receive the contents of the collection.</param>
      <param name="arrayIndex">Starting index for the copy operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.IEnumerable.GetEnumerator">
      <summary>Gets an enumerator for iterating over the custom property values.</summary>
      <returns>An enumerator for iterating over the custom property values.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.GetEnumerator">
      <summary>Gets an enumerator for iterating over the custom property values.</summary>
      <returns>An enumerator for iterating over the custom property values.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.IList&lt;System.Nullable&lt;System.Int32&gt;&gt;.IndexOf(System.Nullable{System.Int32})">
      <summary>Gets the index of the specified value.</summary>
      <param name="item">The value to search for.</param>
      <returns>The index of the specified value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.IList&lt;System.Nullable&lt;System.Int32&gt;&gt;.Insert(System.Int32,System.Nullable{System.Int32})">
      <summary>
    The Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.IList&lt;System.Nullable&lt;System.Int32&gt;&gt;.Insert(System.Int32,System.Nullable{System.Int32}) interface method is not supported by NetworkSessionProperties.
  </summary>
      <param name="index">Index for the insertion operation</param>
      <param name="item">Item to insert.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.IList&lt;System.Nullable&lt;System.Int32&gt;&gt;.RemoveAt(System.Int32)">
      <summary>
    The Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.IList&lt;System.Nullable&lt;System.Int32&gt;&gt;.RemoveAt(System.Int32) interface method is not supported by NetworkSessionProperties.
  </summary>
      <param name="index">Index of the item to remove.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.Remove(System.Nullable{System.Int32})">
      <summary>
    The Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.Remove(System.Nullable{System.Int32}) interface method is not supported by NetworkSessionProperties.
  </summary>
      <param name="item">The item to remove.</param>
      <returns>true if the item was removed successfully; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSessionProperties.Count">
      <summary>Gets the number of custom session properties.</summary>
      <returns>The number of custom session properties.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSessionProperties.System.Collections.Generic.ICollection&lt;System.Nullable&lt;System.Int32&gt;&gt;.IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.NetworkSessionProperties.Item(System.Int32)">
      <summary>Gets or sets a custom session property value at the specified index</summary>
      <param name="index">Index of the item to retrieve.</param>
      <returns>The custom session property value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSessionProperties">
      <summary>Describes custom, game-specific information about a NetworkSession object. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.#ctor(System.Int32)">
      <summary>Initializes an empty instance of Microsoft.Xna.Framework.Net.PacketReader(System.Int32) with the specified options.</summary>
      <param name="capacity">Initial capacity for a received network packet.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.#ctor">
      <summary>Initializes an empty instance of Microsoft.Xna.Framework.Net.PacketReader.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadColor">
      <summary>Reads a Color value.</summary>
      <returns>Color data received from the network packet.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadDouble">
      <summary>Reads an 8-byte floating point value. Reference page contains links to related code samples.</summary>
      <returns>8-byte floating point value from the received network packet.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadMatrix">
      <summary>Reads a Matrix value. Reference page contains links to related code samples.</summary>
      <returns>Matrix data from the received network packet.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadQuaternion">
      <summary>
    Reads a Quaternion value.
   Reference page contains links to related code samples.</summary>
      <returns>Quaternion data from the received network packet.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadSingle">
      <summary>Reads a 4-byte floating point value. Reference page contains links to related code samples.</summary>
      <returns>Reads a 4-byte floating point value from the received network packet.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadVector2">
      <summary>Reads a Vector2 value. Reference page contains links to related code samples.</summary>
      <returns>Vector data from the received network packet.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadVector3">
      <summary>Reads a Vector3 value. Reference page contains links to related code samples.</summary>
      <returns>Vector data from the received network packet.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketReader.ReadVector4">
      <summary>Reads a Vector3 value. Reference page contains links to related code samples.</summary>
      <returns>Vector data from the received network packet.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.PacketReader.Length">
      <summary>Gets the length of the packet being read.</summary>
      <returns>Length of the packet.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.PacketReader.Position">
      <summary>Gets or sets the current packet read position.</summary>
      <returns>Current position of the packet.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.PacketReader">
      <summary>Provides common functionality for efficiently reading incoming network packets. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.#ctor(System.Int32)">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.Net.PacketWriter(System.Int32) with the specified capacity.</summary>
      <param name="capacity">Capacity for the packet writer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.#ctor">
      <summary>Initializes an empty instance of Microsoft.Xna.Framework.Net.PacketWriter.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(System.Single)">
      <summary>
    Writes a System.Single value to an outgoing network packet.
  </summary>
      <param name="value">Value to be written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Writes a Framework.Graphics.Color value to an outgoing network packet.</summary>
      <param name="value">Value to be written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(Microsoft.Xna.Framework.Vector2)">
      <summary>Writes a Vector2 value to an outgoing network packet. Reference page contains links to related code samples.</summary>
      <param name="value">Value being written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(Microsoft.Xna.Framework.Vector4)">
      <summary>Writes a Vector4 value to an outgoing network packet. Reference page contains links to related code samples.</summary>
      <param name="value">Value being written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(Microsoft.Xna.Framework.Quaternion)">
      <summary>Writes a Quaternion value to an outgoing network packet. Reference page contains links to related code samples.</summary>
      <param name="value">Value being written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(System.Double)">
      <summary>Writes a System.Double value to an outgoing network packet.</summary>
      <param name="value">Value to be written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(Microsoft.Xna.Framework.Matrix)">
      <summary>Writes a Matrix value to an outgoing network packet. Reference page contains links to related code samples.</summary>
      <param name="value">Value being written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Net.PacketWriter.Write(Microsoft.Xna.Framework.Vector3)">
      <summary>Writes a Vector3 value to an outgoing network packet. Reference page contains links to related code samples.</summary>
      <param name="value">Value being written.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.PacketWriter.Length">
      <summary>Gets the length of the packet being written.</summary>
      <returns>Length of the packet.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.PacketWriter.Position">
      <summary>Gets or sets the current packet write position.</summary>
      <returns>Current position of the packet.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.PacketWriter">
      <summary>Provides common functionality for efficiently formatting outgoing network packets. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.QualityOfService.AverageRoundtripTime">
      <summary>
    Gets the average (median) round trip time of all the network packets that were sent during the quality of service measurement process.
  </summary>
      <returns>
        The average (median) round trip time of all the network packets that were sent during the quality of service measurement process.   Will return zero if the query has not yet completed.  You can check if the query is complete using QualityOfService.IsAvailable.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.QualityOfService.BytesPerSecondDownstream">
      <summary>
    Gets an estimate of the available downstream network bandwidth from the session host to this machine, measured in bytes per second.
  </summary>
      <returns>
        An estimate of the available downstream network bandwidth from the session host to this machine, measured in bytes per second.   Will return zero if the query has not yet completed.  You can check if the query is complete using QualityOfService.IsAvailable.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.QualityOfService.BytesPerSecondUpstream">
      <summary>
    Gets an estimate of the available upstream network bandwidth from this machine to the session host, measured in bytes per second.
  </summary>
      <returns>An estimate of the available upstream network bandwidth from this machine to the session host, measured in bytes per second.  Will return zero if the query has not yet completed.  You can check if the query is complete using QualityOfService.IsAvailable.
    </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.QualityOfService.IsAvailable">
      <summary>
    Checks whether this quality of service operation has completed. 
  </summary>
      <returns>true if quality of service data is available; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Net.QualityOfService.MinimumRoundtripTime">
      <summary>
    Gets the minimum round trip time of any network packet that was sent during the quality of service measurement process.
  </summary>
      <returns>
        The minimum round trip time of any network packet that was sent during the quality of service measurement process.  Will return zero if the query has not yet completed.  You can check if the query is complete using QualityOfService.IsAvailable.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.QualityOfService">
      <summary>
    Describes the quality of the network connection between this machine and the host of a multiplayer session that was discovered with a matchmaking query.
  </summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSessionEndReason">
      <summary>Defines the reason a session ended.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSessionEndReason.ClientSignedOut" documentation_ignore="1">
      <summary>This client player has signed out of session.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSessionEndReason.HostEndedSession" documentation_ignore="1">
      <summary>The host left the session, removing all active players.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSessionEndReason.RemovedByHost" documentation_ignore="1">
      <summary>The host removed this client player from the session.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSessionEndReason.Disconnected" documentation_ignore="1">
      <summary>Network connectivity problems ended the session</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSessionJoinError">
      <summary>Contains additional data about a NetworkSessionJoinException.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSessionJoinError.SessionNotFound" documentation_ignore="1">
      <summary>The session could not be found.Occurs if the session has ended after the matchmaking query but before the client joined, of if there is no network connectivity between the client and session host machines.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSessionJoinError.SessionNotJoinable" documentation_ignore="1">
      <summary>The session exists but is not joinable.Occurs if the session is in progress but does not allow gamers to join a session in progress.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSessionJoinError.SessionFull" documentation_ignore="1">
      <summary>The session exists but does not have any open slots for local signed-in gamers.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSessionState">
      <summary>Defines the different states of a multiplayer session.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSessionState.Lobby" documentation_ignore="1">
      <summary>The local machine joins the session, waiting in the pregame lobby. The GameStarted event is raised when gameplay begins.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSessionState.Playing" documentation_ignore="1">
      <summary>The local machine joins the session, currently in the middle of gameplay. The GameEnded event is raised when the session returns to the lobby.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSessionState.Ended" documentation_ignore="1">
      <summary>The local machine has left the current session or the session has ended. The SessionEnded event is raised at this time. The event's arguments describe the reason for the session ending.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.NetworkSessionType">
      <summary>Defines the different types of a multiplayer session. Reference page contains links to related code samples.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSessionType.Local" documentation_ignore="1">
      <summary>Does not involve any networking traffic, but can be used for split-screen gaming on a single Xbox 360 console.  Creating a local network session may also make it easier to share code between local and online game modes.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSessionType.SystemLink" documentation_ignore="1">
      <summary>Connect multiple Xbox 360 consoles or computers over a local subnet. These machines do not require a connection to Xbox LIVE or any LIVE accounts. However, connection to machines on different subnets is not allowed.If you are a Creators Club developer testing your game, you can use this type to connect an Xbox 360 console to a computer. However, cross-platform networking is not supported in games distributed to non–Creators Club community players.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSessionType.PlayerMatch" documentation_ignore="1">
      <summary>Uses the Xbox LIVE servers. This enables connection to other machines over the Internet.  It requires a LIVE Silver Membership for Windows-based games or a LIVE Gold membership for Xbox 360 games.  Games in development will also require an XNA Creators Club premium membership.  While in trial mode, XNA Community games downloaded from Xbox LIVE Markeplace will not have access to LIVE matchmaking.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.NetworkSessionType.Ranked" documentation_ignore="1">
      <summary>All session matches are ranked. This option is available only for commercial games that have passed Xbox LIVE certification.  Due to the competitive nature of the gameplay, this session type does not support join-in-progress.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Net.SendDataOptions">
      <summary>Defines options for network packet transmission.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.SendDataOptions.None" documentation_ignore="1">
      <summary>Sends the data with no guarantees.Packets of this type may be delivered in any order, with occasional packet loss.This is the most efficient option in terms of network bandwidth and machine resource usage. However, it is recommended only in situations where your game can recover from occasional packet loss.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.SendDataOptions.Reliable" documentation_ignore="1">
      <summary>Sends the data with reliable delivery, but no special ordering.Packets of this type are resent until arrival at the destination. They may arrive out of order.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.SendDataOptions.InOrder" documentation_ignore="1">
      <summary>Sends the data with guaranteed ordering, but without reliable delivery.Occasionally, packets of this type are not delivered. However, any delivered packets always arrive in the order in which they are sent.Use this option in situations where the transmitted value changes constantly. Old versions never arrive after a more recent version.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.SendDataOptions.ReliableInOrder" documentation_ignore="1">
      <summary>Sends the data with reliability and arrival in the order originally sent.Packets of this type are resent until arrival and ordered internally. This means they arrive in the same order in which they were sent.In terms of network bandwidth usage, this is the strongest and most expensive option. Use this only when arrival and ordering are essential. Commonly, a game uses this option for a small percentage of packets. The majority of gameplay data is sent using None or Reliable.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Net.SendDataOptions.Chat" documentation_ignore="1">
      <summary>Mark that this packet contains chat data, such as a player-to-player message string entered using the keyboard. To comply with international regulations, you must send such data without packet encryption. Therefore, you must use this flag to mark it. To maintain security, other game data should not use this flag. It is acceptable and efficient to mix encrypted and unencrypted data.If you send packets both with and without this flag within a single frame, both the encrypyted and unencrypted data streams will be merged into a single wire packet. This option can be combined with either or both of the Reliable and InOrder flags. When you request in-order delivery for chat packets, they will be ordered relative to other chat packets, but they may arrive out of order with respect to other non-chat data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.#ctor(System.Single)">
      <summary>Initializes a new instance of the Alpha8 structure.</summary>
      <param name="alpha">The initial value for the Alpha8 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8,Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8,Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representaion from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.ToAlpha">
      <summary>Expands the packed representation to a System.Single.</summary>
      <returns>The expanded Alpha8.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8">
      <summary>Packed vector type containing a single 8 bit normalized W value in the range of 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Initializes a new instance of the Bgr565 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Bgr565 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Bgr565 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565,Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565,Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToVector3">
      <summary>Expands the packed representation into a Framework.Vector3.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565">
      <summary>Packed vector type containing unsigned normalized values ranging from 0 to 1.  The x and z components use 5 bits, and the y component uses 6 bits.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Bgra5551 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Bgra5551 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Bgra5551 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551,Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551,Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.
</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551">
      <summary>Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 5 bits each for x, y, and z, and 1 bit for w.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Byte4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Byte4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Byte4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4,Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4,Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4</summary>
      <param name="vector">The vector to create packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4">
      <summary>Packed vector type containing four 8-bit unsigned integer values, ranging from 0 to 255.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.#ctor(System.Single)">
      <summary>Initializes a new instance of the HalfSingle structure.</summary>
      <param name="value">The initial value of the HalfSingle structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle,Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle,Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.
</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.ToSingle">
      <summary>Expands the HalfSingle to a System.Single.</summary>
      <returns>The expanded HalfSingle.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle">
      <summary>Packed vector type containing a single 16 bit floating point value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the HalfVector2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the HalfVector2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the HalfVector2 structure.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.ToVector2">
      <summary>Expands the HalfVector2 to a Vector2.</summary>
      <returns>The expanded HalfVector2.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2">
      <summary>Packed vector type containing two 16-bit floating-point values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the HalfVector4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the HalfVector4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the HalfVector4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4">
      <summary>Packed vector type containing four 16-bit floating-point values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector">
      <summary>
    Interface that converts packed vector types to and from Framework.Vector4 values,
    allowing multiple encodings to be manipulated in a generic way.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1">
      <summary>Converts packed vector types to and from Framework.Vector4 values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Initializes a new instance of the Normalized101010 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Normalized101010 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Normalized101010 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010,Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010,Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.ToVector3">
      <summary>Expands the packed representation into a Framework.Vector3. </summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010">
      <summary>Packed vector type containing signed normalized values,
    ranging from −1 to 1, using 10 bits each for x, y, and z, and 2 bits for w.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the NormalizedByte2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedByte2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedByte2 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.ToVector2">
      <summary>Expands the packed representation to a vector.</summary>
      <returns>The expanded NormalizedByte2.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2">
      <summary>Packed vector type containing two 8-bit signed normalized values, ranging from −1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the NormalizedByte4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedByte4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedByte4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4">
      <summary>Packed vector type containing four 8-bit signed normalized values, ranging from −1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the NormalizedShort2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedShort2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedShort2 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.ToVector2">
      <summary>Expands the packed representation to a vector.</summary>
      <returns>The expanded NormalizedShort2.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2">
      <summary>Packed vector type containing two 16-bit signed normalized values, ranging from −1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the NormalizedShort4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedShort4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedShort4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4">
      <summary>Packed vector type containing four 16-bit signed normalized values, ranging from −1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the Rg32 structure.</summary>
      <param name="vector">The vector containing the initial values for the components of the Rg32 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the Rg32 structure.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32,Microsoft.Xna.Framework.Graphics.PackedVector.Rg32)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32,Microsoft.Xna.Framework.Graphics.PackedVector.Rg32)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4</summary>
      <param name="vector">The vector to create packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.ToVector2">
      <summary>Expands the packed vector representation into a Framework.Vector2.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32">
      <summary>Packed vector type containing two 16-bit unsigned normalized values, ranging from  0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Rgba1010102 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Rgba1010102 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Rgba1010102 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the left of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102">
      <summary>Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 10 bits each for x, y, and z, and 2 bits for w.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Rgba32 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Rgba32 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Rgba32 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32">
      <summary>Packed vector type containing four 8-bit unsigned normalized values, ranging from  0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Rgba64 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Rgba64 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Rgba64 structure.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.
</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64">
      <summary>Packed vector type containing four 16-bit unsigned normalized values, ranging from 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the Short2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Short2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the Short2 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Short2,Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Short2,Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.ToVector2">
      <summary>Expands the packed representation to a vector.</summary>
      <returns>The expanded Short2.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short2">
      <summary>Packed vector type containing two 16-bit signed integer values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Short4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Short4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Short4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Short4,Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Short4,Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short4">
      <summary>Packed vector type containing four 16-bit signed integer values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Initializes a new instance of the UInt101010 class.</summary>
      <param name="vector">A vector containing the initial values for the components of the UInt101010 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the UInt101010 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010,Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010,Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.ToVector3">
      <summary>
    Expands the packed representation into a Framework.Vector3.
  </summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010">
      <summary>Packed vector type containing unsigned integer values, using 10 bits
    each for x, y, and z (ranging from 0 to 1023), and 2 bits for w (ranging from 0 to 3).</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Storage.StorageContainer.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.Delete">
      <summary>Deletes the storage container.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object. </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageContainer.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed. </summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageContainer.Path">
      <summary>Gets the file path to the location of the user's save game files.</summary>
      <returns>The file path to the location of the user's save game files.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageContainer.StorageDevice">
      <summary>Gets the StorageDevice that holds the files in this container.</summary>
      <returns>The StorageDevice that holds the files in this container.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageContainer.TitleLocation">
      <summary>Gets the file path to the location of the title storage space.</summary>
      <returns>The title's install location based on the current platform.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageContainer.TitleName">
      <summary>Gets the name of the title.</summary>
      <returns>The name of the title.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Storage.StorageContainer">
      <summary>Represents a logical collection of storage files. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDevice.OpenContainer(System.String)">
      <summary>Opens a StorageContainer containing any files for the specified title.</summary>
      <param name="titleName">The name of the XNA Framework title.</param>
      <returns>A StorageContainer containing any files for the title.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageDevice.FreeSpace">
      <summary>Gets the amount of free space on the device.</summary>
      <returns>Free space on the device, in bytes.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageDevice.IsConnected">
      <summary>Gets whether the device is connected.</summary>
      <returns>true if the device is connected; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageDevice.TotalSpace">
      <summary>Gets the total amount of space on the device.</summary>
      <returns>Total amount of space on the device, in bytes.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Storage.StorageDevice">
      <summary>Represents a storage device for user data, such as a memory unit or hard drive. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException">
      <summary>The exception that is thrown when the requested StorageDevice is not connected.</summary>
    </member>
  </members>
</doc>